
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model alembic_version
 * 
 */
export type alembic_version = $Result.DefaultSelection<Prisma.$alembic_versionPayload>
/**
 * Model banners
 * 
 */
export type banners = $Result.DefaultSelection<Prisma.$bannersPayload>
/**
 * Model bestselling
 * 
 */
export type bestselling = $Result.DefaultSelection<Prisma.$bestsellingPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model coupons
 * 
 */
export type coupons = $Result.DefaultSelection<Prisma.$couponsPayload>
/**
 * Model new_arrivals
 * 
 */
export type new_arrivals = $Result.DefaultSelection<Prisma.$new_arrivalsPayload>
/**
 * Model on_sale
 * 
 */
export type on_sale = $Result.DefaultSelection<Prisma.$on_salePayload>
/**
 * Model order_counter
 * 
 */
export type order_counter = $Result.DefaultSelection<Prisma.$order_counterPayload>
/**
 * Model order_items
 * 
 */
export type order_items = $Result.DefaultSelection<Prisma.$order_itemsPayload>
/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model product_reviews
 * 
 */
export type product_reviews = $Result.DefaultSelection<Prisma.$product_reviewsPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model receipts
 * 
 */
export type receipts = $Result.DefaultSelection<Prisma.$receiptsPayload>
/**
 * Model shop_by_need
 * 
 */
export type shop_by_need = $Result.DefaultSelection<Prisma.$shop_by_needPayload>
/**
 * Model text_banners
 * 
 */
export type text_banners = $Result.DefaultSelection<Prisma.$text_bannersPayload>
/**
 * Model trending
 * 
 */
export type trending = $Result.DefaultSelection<Prisma.$trendingPayload>
/**
 * Model user_details
 * 
 */
export type user_details = $Result.DefaultSelection<Prisma.$user_detailsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const customization_type_enum: {
  size: 'size',
  color: 'color'
};

export type customization_type_enum = (typeof customization_type_enum)[keyof typeof customization_type_enum]


export const productstatus: {
  in_stock: 'in_stock',
  out_of_stock: 'out_of_stock',
  discontinued: 'discontinued'
};

export type productstatus = (typeof productstatus)[keyof typeof productstatus]


export const userrole: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type userrole = (typeof userrole)[keyof typeof userrole]

}

export type customization_type_enum = $Enums.customization_type_enum

export const customization_type_enum: typeof $Enums.customization_type_enum

export type productstatus = $Enums.productstatus

export const productstatus: typeof $Enums.productstatus

export type userrole = $Enums.userrole

export const userrole: typeof $Enums.userrole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Alembic_versions
 * const alembic_versions = await prisma.alembic_version.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Alembic_versions
   * const alembic_versions = await prisma.alembic_version.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.alembic_version`: Exposes CRUD operations for the **alembic_version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alembic_versions
    * const alembic_versions = await prisma.alembic_version.findMany()
    * ```
    */
  get alembic_version(): Prisma.alembic_versionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.banners`: Exposes CRUD operations for the **banners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banners.findMany()
    * ```
    */
  get banners(): Prisma.bannersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bestselling`: Exposes CRUD operations for the **bestselling** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bestsellings
    * const bestsellings = await prisma.bestselling.findMany()
    * ```
    */
  get bestselling(): Prisma.bestsellingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coupons`: Exposes CRUD operations for the **coupons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coupons
    * const coupons = await prisma.coupons.findMany()
    * ```
    */
  get coupons(): Prisma.couponsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.new_arrivals`: Exposes CRUD operations for the **new_arrivals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more New_arrivals
    * const new_arrivals = await prisma.new_arrivals.findMany()
    * ```
    */
  get new_arrivals(): Prisma.new_arrivalsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.on_sale`: Exposes CRUD operations for the **on_sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more On_sales
    * const on_sales = await prisma.on_sale.findMany()
    * ```
    */
  get on_sale(): Prisma.on_saleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order_counter`: Exposes CRUD operations for the **order_counter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_counters
    * const order_counters = await prisma.order_counter.findMany()
    * ```
    */
  get order_counter(): Prisma.order_counterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order_items`: Exposes CRUD operations for the **order_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_items
    * const order_items = await prisma.order_items.findMany()
    * ```
    */
  get order_items(): Prisma.order_itemsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product_reviews`: Exposes CRUD operations for the **product_reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_reviews
    * const product_reviews = await prisma.product_reviews.findMany()
    * ```
    */
  get product_reviews(): Prisma.product_reviewsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receipts`: Exposes CRUD operations for the **receipts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receipts
    * const receipts = await prisma.receipts.findMany()
    * ```
    */
  get receipts(): Prisma.receiptsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shop_by_need`: Exposes CRUD operations for the **shop_by_need** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shop_by_needs
    * const shop_by_needs = await prisma.shop_by_need.findMany()
    * ```
    */
  get shop_by_need(): Prisma.shop_by_needDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.text_banners`: Exposes CRUD operations for the **text_banners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Text_banners
    * const text_banners = await prisma.text_banners.findMany()
    * ```
    */
  get text_banners(): Prisma.text_bannersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trending`: Exposes CRUD operations for the **trending** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trendings
    * const trendings = await prisma.trending.findMany()
    * ```
    */
  get trending(): Prisma.trendingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_details`: Exposes CRUD operations for the **user_details** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_details
    * const user_details = await prisma.user_details.findMany()
    * ```
    */
  get user_details(): Prisma.user_detailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    alembic_version: 'alembic_version',
    banners: 'banners',
    bestselling: 'bestselling',
    categories: 'categories',
    coupons: 'coupons',
    new_arrivals: 'new_arrivals',
    on_sale: 'on_sale',
    order_counter: 'order_counter',
    order_items: 'order_items',
    orders: 'orders',
    product_reviews: 'product_reviews',
    products: 'products',
    receipts: 'receipts',
    shop_by_need: 'shop_by_need',
    text_banners: 'text_banners',
    trending: 'trending',
    user_details: 'user_details',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "alembic_version" | "banners" | "bestselling" | "categories" | "coupons" | "new_arrivals" | "on_sale" | "order_counter" | "order_items" | "orders" | "product_reviews" | "products" | "receipts" | "shop_by_need" | "text_banners" | "trending" | "user_details" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      alembic_version: {
        payload: Prisma.$alembic_versionPayload<ExtArgs>
        fields: Prisma.alembic_versionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.alembic_versionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.alembic_versionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>
          }
          findFirst: {
            args: Prisma.alembic_versionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.alembic_versionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>
          }
          findMany: {
            args: Prisma.alembic_versionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>[]
          }
          create: {
            args: Prisma.alembic_versionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>
          }
          createMany: {
            args: Prisma.alembic_versionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.alembic_versionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>[]
          }
          delete: {
            args: Prisma.alembic_versionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>
          }
          update: {
            args: Prisma.alembic_versionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>
          }
          deleteMany: {
            args: Prisma.alembic_versionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.alembic_versionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.alembic_versionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>[]
          }
          upsert: {
            args: Prisma.alembic_versionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alembic_versionPayload>
          }
          aggregate: {
            args: Prisma.Alembic_versionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlembic_version>
          }
          groupBy: {
            args: Prisma.alembic_versionGroupByArgs<ExtArgs>
            result: $Utils.Optional<Alembic_versionGroupByOutputType>[]
          }
          count: {
            args: Prisma.alembic_versionCountArgs<ExtArgs>
            result: $Utils.Optional<Alembic_versionCountAggregateOutputType> | number
          }
        }
      }
      banners: {
        payload: Prisma.$bannersPayload<ExtArgs>
        fields: Prisma.bannersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bannersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bannersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          findFirst: {
            args: Prisma.bannersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bannersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          findMany: {
            args: Prisma.bannersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>[]
          }
          create: {
            args: Prisma.bannersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          createMany: {
            args: Prisma.bannersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bannersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>[]
          }
          delete: {
            args: Prisma.bannersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          update: {
            args: Prisma.bannersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          deleteMany: {
            args: Prisma.bannersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bannersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.bannersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>[]
          }
          upsert: {
            args: Prisma.bannersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bannersPayload>
          }
          aggregate: {
            args: Prisma.BannersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanners>
          }
          groupBy: {
            args: Prisma.bannersGroupByArgs<ExtArgs>
            result: $Utils.Optional<BannersGroupByOutputType>[]
          }
          count: {
            args: Prisma.bannersCountArgs<ExtArgs>
            result: $Utils.Optional<BannersCountAggregateOutputType> | number
          }
        }
      }
      bestselling: {
        payload: Prisma.$bestsellingPayload<ExtArgs>
        fields: Prisma.bestsellingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.bestsellingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.bestsellingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>
          }
          findFirst: {
            args: Prisma.bestsellingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.bestsellingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>
          }
          findMany: {
            args: Prisma.bestsellingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>[]
          }
          create: {
            args: Prisma.bestsellingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>
          }
          createMany: {
            args: Prisma.bestsellingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.bestsellingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>[]
          }
          delete: {
            args: Prisma.bestsellingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>
          }
          update: {
            args: Prisma.bestsellingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>
          }
          deleteMany: {
            args: Prisma.bestsellingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.bestsellingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.bestsellingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>[]
          }
          upsert: {
            args: Prisma.bestsellingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$bestsellingPayload>
          }
          aggregate: {
            args: Prisma.BestsellingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBestselling>
          }
          groupBy: {
            args: Prisma.bestsellingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BestsellingGroupByOutputType>[]
          }
          count: {
            args: Prisma.bestsellingCountArgs<ExtArgs>
            result: $Utils.Optional<BestsellingCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.categoriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.categoriesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      coupons: {
        payload: Prisma.$couponsPayload<ExtArgs>
        fields: Prisma.couponsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.couponsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.couponsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>
          }
          findFirst: {
            args: Prisma.couponsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.couponsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>
          }
          findMany: {
            args: Prisma.couponsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>[]
          }
          create: {
            args: Prisma.couponsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>
          }
          createMany: {
            args: Prisma.couponsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.couponsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>[]
          }
          delete: {
            args: Prisma.couponsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>
          }
          update: {
            args: Prisma.couponsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>
          }
          deleteMany: {
            args: Prisma.couponsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.couponsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.couponsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>[]
          }
          upsert: {
            args: Prisma.couponsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$couponsPayload>
          }
          aggregate: {
            args: Prisma.CouponsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoupons>
          }
          groupBy: {
            args: Prisma.couponsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CouponsGroupByOutputType>[]
          }
          count: {
            args: Prisma.couponsCountArgs<ExtArgs>
            result: $Utils.Optional<CouponsCountAggregateOutputType> | number
          }
        }
      }
      new_arrivals: {
        payload: Prisma.$new_arrivalsPayload<ExtArgs>
        fields: Prisma.new_arrivalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.new_arrivalsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.new_arrivalsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>
          }
          findFirst: {
            args: Prisma.new_arrivalsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.new_arrivalsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>
          }
          findMany: {
            args: Prisma.new_arrivalsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>[]
          }
          create: {
            args: Prisma.new_arrivalsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>
          }
          createMany: {
            args: Prisma.new_arrivalsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.new_arrivalsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>[]
          }
          delete: {
            args: Prisma.new_arrivalsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>
          }
          update: {
            args: Prisma.new_arrivalsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>
          }
          deleteMany: {
            args: Prisma.new_arrivalsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.new_arrivalsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.new_arrivalsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>[]
          }
          upsert: {
            args: Prisma.new_arrivalsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$new_arrivalsPayload>
          }
          aggregate: {
            args: Prisma.New_arrivalsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNew_arrivals>
          }
          groupBy: {
            args: Prisma.new_arrivalsGroupByArgs<ExtArgs>
            result: $Utils.Optional<New_arrivalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.new_arrivalsCountArgs<ExtArgs>
            result: $Utils.Optional<New_arrivalsCountAggregateOutputType> | number
          }
        }
      }
      on_sale: {
        payload: Prisma.$on_salePayload<ExtArgs>
        fields: Prisma.on_saleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.on_saleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.on_saleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>
          }
          findFirst: {
            args: Prisma.on_saleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.on_saleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>
          }
          findMany: {
            args: Prisma.on_saleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>[]
          }
          create: {
            args: Prisma.on_saleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>
          }
          createMany: {
            args: Prisma.on_saleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.on_saleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>[]
          }
          delete: {
            args: Prisma.on_saleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>
          }
          update: {
            args: Prisma.on_saleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>
          }
          deleteMany: {
            args: Prisma.on_saleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.on_saleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.on_saleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>[]
          }
          upsert: {
            args: Prisma.on_saleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$on_salePayload>
          }
          aggregate: {
            args: Prisma.On_saleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOn_sale>
          }
          groupBy: {
            args: Prisma.on_saleGroupByArgs<ExtArgs>
            result: $Utils.Optional<On_saleGroupByOutputType>[]
          }
          count: {
            args: Prisma.on_saleCountArgs<ExtArgs>
            result: $Utils.Optional<On_saleCountAggregateOutputType> | number
          }
        }
      }
      order_counter: {
        payload: Prisma.$order_counterPayload<ExtArgs>
        fields: Prisma.order_counterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.order_counterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.order_counterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>
          }
          findFirst: {
            args: Prisma.order_counterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.order_counterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>
          }
          findMany: {
            args: Prisma.order_counterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>[]
          }
          create: {
            args: Prisma.order_counterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>
          }
          createMany: {
            args: Prisma.order_counterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.order_counterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>[]
          }
          delete: {
            args: Prisma.order_counterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>
          }
          update: {
            args: Prisma.order_counterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>
          }
          deleteMany: {
            args: Prisma.order_counterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.order_counterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.order_counterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>[]
          }
          upsert: {
            args: Prisma.order_counterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_counterPayload>
          }
          aggregate: {
            args: Prisma.Order_counterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder_counter>
          }
          groupBy: {
            args: Prisma.order_counterGroupByArgs<ExtArgs>
            result: $Utils.Optional<Order_counterGroupByOutputType>[]
          }
          count: {
            args: Prisma.order_counterCountArgs<ExtArgs>
            result: $Utils.Optional<Order_counterCountAggregateOutputType> | number
          }
        }
      }
      order_items: {
        payload: Prisma.$order_itemsPayload<ExtArgs>
        fields: Prisma.order_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.order_itemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.order_itemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          findFirst: {
            args: Prisma.order_itemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.order_itemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          findMany: {
            args: Prisma.order_itemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
          }
          create: {
            args: Prisma.order_itemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          createMany: {
            args: Prisma.order_itemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.order_itemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
          }
          delete: {
            args: Prisma.order_itemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          update: {
            args: Prisma.order_itemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          deleteMany: {
            args: Prisma.order_itemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.order_itemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.order_itemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
          }
          upsert: {
            args: Prisma.order_itemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          aggregate: {
            args: Prisma.Order_itemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder_items>
          }
          groupBy: {
            args: Prisma.order_itemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Order_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.order_itemsCountArgs<ExtArgs>
            result: $Utils.Optional<Order_itemsCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ordersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ordersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      product_reviews: {
        payload: Prisma.$product_reviewsPayload<ExtArgs>
        fields: Prisma.product_reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_reviewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_reviewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>
          }
          findFirst: {
            args: Prisma.product_reviewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_reviewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>
          }
          findMany: {
            args: Prisma.product_reviewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>[]
          }
          create: {
            args: Prisma.product_reviewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>
          }
          createMany: {
            args: Prisma.product_reviewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.product_reviewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>[]
          }
          delete: {
            args: Prisma.product_reviewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>
          }
          update: {
            args: Prisma.product_reviewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>
          }
          deleteMany: {
            args: Prisma.product_reviewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.product_reviewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.product_reviewsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>[]
          }
          upsert: {
            args: Prisma.product_reviewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$product_reviewsPayload>
          }
          aggregate: {
            args: Prisma.Product_reviewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct_reviews>
          }
          groupBy: {
            args: Prisma.product_reviewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Product_reviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_reviewsCountArgs<ExtArgs>
            result: $Utils.Optional<Product_reviewsCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.productsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.productsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      receipts: {
        payload: Prisma.$receiptsPayload<ExtArgs>
        fields: Prisma.receiptsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.receiptsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.receiptsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>
          }
          findFirst: {
            args: Prisma.receiptsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.receiptsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>
          }
          findMany: {
            args: Prisma.receiptsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>[]
          }
          create: {
            args: Prisma.receiptsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>
          }
          createMany: {
            args: Prisma.receiptsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.receiptsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>[]
          }
          delete: {
            args: Prisma.receiptsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>
          }
          update: {
            args: Prisma.receiptsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>
          }
          deleteMany: {
            args: Prisma.receiptsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.receiptsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.receiptsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>[]
          }
          upsert: {
            args: Prisma.receiptsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$receiptsPayload>
          }
          aggregate: {
            args: Prisma.ReceiptsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceipts>
          }
          groupBy: {
            args: Prisma.receiptsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptsGroupByOutputType>[]
          }
          count: {
            args: Prisma.receiptsCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptsCountAggregateOutputType> | number
          }
        }
      }
      shop_by_need: {
        payload: Prisma.$shop_by_needPayload<ExtArgs>
        fields: Prisma.shop_by_needFieldRefs
        operations: {
          findUnique: {
            args: Prisma.shop_by_needFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.shop_by_needFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>
          }
          findFirst: {
            args: Prisma.shop_by_needFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.shop_by_needFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>
          }
          findMany: {
            args: Prisma.shop_by_needFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>[]
          }
          create: {
            args: Prisma.shop_by_needCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>
          }
          createMany: {
            args: Prisma.shop_by_needCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.shop_by_needCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>[]
          }
          delete: {
            args: Prisma.shop_by_needDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>
          }
          update: {
            args: Prisma.shop_by_needUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>
          }
          deleteMany: {
            args: Prisma.shop_by_needDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.shop_by_needUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.shop_by_needUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>[]
          }
          upsert: {
            args: Prisma.shop_by_needUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$shop_by_needPayload>
          }
          aggregate: {
            args: Prisma.Shop_by_needAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShop_by_need>
          }
          groupBy: {
            args: Prisma.shop_by_needGroupByArgs<ExtArgs>
            result: $Utils.Optional<Shop_by_needGroupByOutputType>[]
          }
          count: {
            args: Prisma.shop_by_needCountArgs<ExtArgs>
            result: $Utils.Optional<Shop_by_needCountAggregateOutputType> | number
          }
        }
      }
      text_banners: {
        payload: Prisma.$text_bannersPayload<ExtArgs>
        fields: Prisma.text_bannersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.text_bannersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.text_bannersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>
          }
          findFirst: {
            args: Prisma.text_bannersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.text_bannersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>
          }
          findMany: {
            args: Prisma.text_bannersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>[]
          }
          create: {
            args: Prisma.text_bannersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>
          }
          createMany: {
            args: Prisma.text_bannersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.text_bannersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>[]
          }
          delete: {
            args: Prisma.text_bannersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>
          }
          update: {
            args: Prisma.text_bannersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>
          }
          deleteMany: {
            args: Prisma.text_bannersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.text_bannersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.text_bannersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>[]
          }
          upsert: {
            args: Prisma.text_bannersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$text_bannersPayload>
          }
          aggregate: {
            args: Prisma.Text_bannersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateText_banners>
          }
          groupBy: {
            args: Prisma.text_bannersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Text_bannersGroupByOutputType>[]
          }
          count: {
            args: Prisma.text_bannersCountArgs<ExtArgs>
            result: $Utils.Optional<Text_bannersCountAggregateOutputType> | number
          }
        }
      }
      trending: {
        payload: Prisma.$trendingPayload<ExtArgs>
        fields: Prisma.trendingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trendingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trendingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>
          }
          findFirst: {
            args: Prisma.trendingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trendingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>
          }
          findMany: {
            args: Prisma.trendingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>[]
          }
          create: {
            args: Prisma.trendingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>
          }
          createMany: {
            args: Prisma.trendingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.trendingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>[]
          }
          delete: {
            args: Prisma.trendingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>
          }
          update: {
            args: Prisma.trendingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>
          }
          deleteMany: {
            args: Prisma.trendingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trendingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.trendingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>[]
          }
          upsert: {
            args: Prisma.trendingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trendingPayload>
          }
          aggregate: {
            args: Prisma.TrendingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrending>
          }
          groupBy: {
            args: Prisma.trendingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrendingGroupByOutputType>[]
          }
          count: {
            args: Prisma.trendingCountArgs<ExtArgs>
            result: $Utils.Optional<TrendingCountAggregateOutputType> | number
          }
        }
      }
      user_details: {
        payload: Prisma.$user_detailsPayload<ExtArgs>
        fields: Prisma.user_detailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_detailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_detailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>
          }
          findFirst: {
            args: Prisma.user_detailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_detailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>
          }
          findMany: {
            args: Prisma.user_detailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>[]
          }
          create: {
            args: Prisma.user_detailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>
          }
          createMany: {
            args: Prisma.user_detailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_detailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>[]
          }
          delete: {
            args: Prisma.user_detailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>
          }
          update: {
            args: Prisma.user_detailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>
          }
          deleteMany: {
            args: Prisma.user_detailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_detailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_detailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>[]
          }
          upsert: {
            args: Prisma.user_detailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_detailsPayload>
          }
          aggregate: {
            args: Prisma.User_detailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_details>
          }
          groupBy: {
            args: Prisma.user_detailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_detailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_detailsCountArgs<ExtArgs>
            result: $Utils.Optional<User_detailsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    alembic_version?: alembic_versionOmit
    banners?: bannersOmit
    bestselling?: bestsellingOmit
    categories?: categoriesOmit
    coupons?: couponsOmit
    new_arrivals?: new_arrivalsOmit
    on_sale?: on_saleOmit
    order_counter?: order_counterOmit
    order_items?: order_itemsOmit
    orders?: ordersOmit
    product_reviews?: product_reviewsOmit
    products?: productsOmit
    receipts?: receiptsOmit
    shop_by_need?: shop_by_needOmit
    text_banners?: text_bannersOmit
    trending?: trendingOmit
    user_details?: user_detailsOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    products: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CategoriesCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    order_items: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | OrdersCountOutputTypeCountOrder_itemsArgs
  }

  // Custom InputTypes
  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemsWhereInput
  }


  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    order_items: number
    product_reviews: number
    shop_by_need: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | ProductsCountOutputTypeCountOrder_itemsArgs
    product_reviews?: boolean | ProductsCountOutputTypeCountProduct_reviewsArgs
    shop_by_need?: boolean | ProductsCountOutputTypeCountShop_by_needArgs
  }

  // Custom InputTypes
  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountProduct_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_reviewsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountShop_by_needArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shop_by_needWhereInput
  }


  /**
   * Count Type ReceiptsCountOutputType
   */

  export type ReceiptsCountOutputType = {
    orders: number
  }

  export type ReceiptsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ReceiptsCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * ReceiptsCountOutputType without action
   */
  export type ReceiptsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptsCountOutputType
     */
    select?: ReceiptsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReceiptsCountOutputType without action
   */
  export type ReceiptsCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model alembic_version
   */

  export type AggregateAlembic_version = {
    _count: Alembic_versionCountAggregateOutputType | null
    _min: Alembic_versionMinAggregateOutputType | null
    _max: Alembic_versionMaxAggregateOutputType | null
  }

  export type Alembic_versionMinAggregateOutputType = {
    version_num: string | null
  }

  export type Alembic_versionMaxAggregateOutputType = {
    version_num: string | null
  }

  export type Alembic_versionCountAggregateOutputType = {
    version_num: number
    _all: number
  }


  export type Alembic_versionMinAggregateInputType = {
    version_num?: true
  }

  export type Alembic_versionMaxAggregateInputType = {
    version_num?: true
  }

  export type Alembic_versionCountAggregateInputType = {
    version_num?: true
    _all?: true
  }

  export type Alembic_versionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alembic_version to aggregate.
     */
    where?: alembic_versionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alembic_versions to fetch.
     */
    orderBy?: alembic_versionOrderByWithRelationInput | alembic_versionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alembic_versionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alembic_versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alembic_versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alembic_versions
    **/
    _count?: true | Alembic_versionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Alembic_versionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Alembic_versionMaxAggregateInputType
  }

  export type GetAlembic_versionAggregateType<T extends Alembic_versionAggregateArgs> = {
        [P in keyof T & keyof AggregateAlembic_version]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlembic_version[P]>
      : GetScalarType<T[P], AggregateAlembic_version[P]>
  }




  export type alembic_versionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: alembic_versionWhereInput
    orderBy?: alembic_versionOrderByWithAggregationInput | alembic_versionOrderByWithAggregationInput[]
    by: Alembic_versionScalarFieldEnum[] | Alembic_versionScalarFieldEnum
    having?: alembic_versionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Alembic_versionCountAggregateInputType | true
    _min?: Alembic_versionMinAggregateInputType
    _max?: Alembic_versionMaxAggregateInputType
  }

  export type Alembic_versionGroupByOutputType = {
    version_num: string
    _count: Alembic_versionCountAggregateOutputType | null
    _min: Alembic_versionMinAggregateOutputType | null
    _max: Alembic_versionMaxAggregateOutputType | null
  }

  type GetAlembic_versionGroupByPayload<T extends alembic_versionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Alembic_versionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Alembic_versionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Alembic_versionGroupByOutputType[P]>
            : GetScalarType<T[P], Alembic_versionGroupByOutputType[P]>
        }
      >
    >


  export type alembic_versionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    version_num?: boolean
  }, ExtArgs["result"]["alembic_version"]>

  export type alembic_versionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    version_num?: boolean
  }, ExtArgs["result"]["alembic_version"]>

  export type alembic_versionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    version_num?: boolean
  }, ExtArgs["result"]["alembic_version"]>

  export type alembic_versionSelectScalar = {
    version_num?: boolean
  }

  export type alembic_versionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"version_num", ExtArgs["result"]["alembic_version"]>

  export type $alembic_versionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "alembic_version"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      version_num: string
    }, ExtArgs["result"]["alembic_version"]>
    composites: {}
  }

  type alembic_versionGetPayload<S extends boolean | null | undefined | alembic_versionDefaultArgs> = $Result.GetResult<Prisma.$alembic_versionPayload, S>

  type alembic_versionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<alembic_versionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Alembic_versionCountAggregateInputType | true
    }

  export interface alembic_versionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['alembic_version'], meta: { name: 'alembic_version' } }
    /**
     * Find zero or one Alembic_version that matches the filter.
     * @param {alembic_versionFindUniqueArgs} args - Arguments to find a Alembic_version
     * @example
     * // Get one Alembic_version
     * const alembic_version = await prisma.alembic_version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends alembic_versionFindUniqueArgs>(args: SelectSubset<T, alembic_versionFindUniqueArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alembic_version that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {alembic_versionFindUniqueOrThrowArgs} args - Arguments to find a Alembic_version
     * @example
     * // Get one Alembic_version
     * const alembic_version = await prisma.alembic_version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends alembic_versionFindUniqueOrThrowArgs>(args: SelectSubset<T, alembic_versionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alembic_version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alembic_versionFindFirstArgs} args - Arguments to find a Alembic_version
     * @example
     * // Get one Alembic_version
     * const alembic_version = await prisma.alembic_version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends alembic_versionFindFirstArgs>(args?: SelectSubset<T, alembic_versionFindFirstArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alembic_version that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alembic_versionFindFirstOrThrowArgs} args - Arguments to find a Alembic_version
     * @example
     * // Get one Alembic_version
     * const alembic_version = await prisma.alembic_version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends alembic_versionFindFirstOrThrowArgs>(args?: SelectSubset<T, alembic_versionFindFirstOrThrowArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alembic_versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alembic_versionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alembic_versions
     * const alembic_versions = await prisma.alembic_version.findMany()
     * 
     * // Get first 10 Alembic_versions
     * const alembic_versions = await prisma.alembic_version.findMany({ take: 10 })
     * 
     * // Only select the `version_num`
     * const alembic_versionWithVersion_numOnly = await prisma.alembic_version.findMany({ select: { version_num: true } })
     * 
     */
    findMany<T extends alembic_versionFindManyArgs>(args?: SelectSubset<T, alembic_versionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alembic_version.
     * @param {alembic_versionCreateArgs} args - Arguments to create a Alembic_version.
     * @example
     * // Create one Alembic_version
     * const Alembic_version = await prisma.alembic_version.create({
     *   data: {
     *     // ... data to create a Alembic_version
     *   }
     * })
     * 
     */
    create<T extends alembic_versionCreateArgs>(args: SelectSubset<T, alembic_versionCreateArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alembic_versions.
     * @param {alembic_versionCreateManyArgs} args - Arguments to create many Alembic_versions.
     * @example
     * // Create many Alembic_versions
     * const alembic_version = await prisma.alembic_version.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends alembic_versionCreateManyArgs>(args?: SelectSubset<T, alembic_versionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alembic_versions and returns the data saved in the database.
     * @param {alembic_versionCreateManyAndReturnArgs} args - Arguments to create many Alembic_versions.
     * @example
     * // Create many Alembic_versions
     * const alembic_version = await prisma.alembic_version.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alembic_versions and only return the `version_num`
     * const alembic_versionWithVersion_numOnly = await prisma.alembic_version.createManyAndReturn({
     *   select: { version_num: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends alembic_versionCreateManyAndReturnArgs>(args?: SelectSubset<T, alembic_versionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alembic_version.
     * @param {alembic_versionDeleteArgs} args - Arguments to delete one Alembic_version.
     * @example
     * // Delete one Alembic_version
     * const Alembic_version = await prisma.alembic_version.delete({
     *   where: {
     *     // ... filter to delete one Alembic_version
     *   }
     * })
     * 
     */
    delete<T extends alembic_versionDeleteArgs>(args: SelectSubset<T, alembic_versionDeleteArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alembic_version.
     * @param {alembic_versionUpdateArgs} args - Arguments to update one Alembic_version.
     * @example
     * // Update one Alembic_version
     * const alembic_version = await prisma.alembic_version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends alembic_versionUpdateArgs>(args: SelectSubset<T, alembic_versionUpdateArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alembic_versions.
     * @param {alembic_versionDeleteManyArgs} args - Arguments to filter Alembic_versions to delete.
     * @example
     * // Delete a few Alembic_versions
     * const { count } = await prisma.alembic_version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends alembic_versionDeleteManyArgs>(args?: SelectSubset<T, alembic_versionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alembic_versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alembic_versionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alembic_versions
     * const alembic_version = await prisma.alembic_version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends alembic_versionUpdateManyArgs>(args: SelectSubset<T, alembic_versionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alembic_versions and returns the data updated in the database.
     * @param {alembic_versionUpdateManyAndReturnArgs} args - Arguments to update many Alembic_versions.
     * @example
     * // Update many Alembic_versions
     * const alembic_version = await prisma.alembic_version.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alembic_versions and only return the `version_num`
     * const alembic_versionWithVersion_numOnly = await prisma.alembic_version.updateManyAndReturn({
     *   select: { version_num: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends alembic_versionUpdateManyAndReturnArgs>(args: SelectSubset<T, alembic_versionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alembic_version.
     * @param {alembic_versionUpsertArgs} args - Arguments to update or create a Alembic_version.
     * @example
     * // Update or create a Alembic_version
     * const alembic_version = await prisma.alembic_version.upsert({
     *   create: {
     *     // ... data to create a Alembic_version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alembic_version we want to update
     *   }
     * })
     */
    upsert<T extends alembic_versionUpsertArgs>(args: SelectSubset<T, alembic_versionUpsertArgs<ExtArgs>>): Prisma__alembic_versionClient<$Result.GetResult<Prisma.$alembic_versionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alembic_versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alembic_versionCountArgs} args - Arguments to filter Alembic_versions to count.
     * @example
     * // Count the number of Alembic_versions
     * const count = await prisma.alembic_version.count({
     *   where: {
     *     // ... the filter for the Alembic_versions we want to count
     *   }
     * })
    **/
    count<T extends alembic_versionCountArgs>(
      args?: Subset<T, alembic_versionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Alembic_versionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alembic_version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Alembic_versionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Alembic_versionAggregateArgs>(args: Subset<T, Alembic_versionAggregateArgs>): Prisma.PrismaPromise<GetAlembic_versionAggregateType<T>>

    /**
     * Group by Alembic_version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alembic_versionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends alembic_versionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: alembic_versionGroupByArgs['orderBy'] }
        : { orderBy?: alembic_versionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, alembic_versionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlembic_versionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the alembic_version model
   */
  readonly fields: alembic_versionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for alembic_version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__alembic_versionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the alembic_version model
   */
  interface alembic_versionFieldRefs {
    readonly version_num: FieldRef<"alembic_version", 'String'>
  }
    

  // Custom InputTypes
  /**
   * alembic_version findUnique
   */
  export type alembic_versionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * Filter, which alembic_version to fetch.
     */
    where: alembic_versionWhereUniqueInput
  }

  /**
   * alembic_version findUniqueOrThrow
   */
  export type alembic_versionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * Filter, which alembic_version to fetch.
     */
    where: alembic_versionWhereUniqueInput
  }

  /**
   * alembic_version findFirst
   */
  export type alembic_versionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * Filter, which alembic_version to fetch.
     */
    where?: alembic_versionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alembic_versions to fetch.
     */
    orderBy?: alembic_versionOrderByWithRelationInput | alembic_versionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alembic_versions.
     */
    cursor?: alembic_versionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alembic_versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alembic_versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alembic_versions.
     */
    distinct?: Alembic_versionScalarFieldEnum | Alembic_versionScalarFieldEnum[]
  }

  /**
   * alembic_version findFirstOrThrow
   */
  export type alembic_versionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * Filter, which alembic_version to fetch.
     */
    where?: alembic_versionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alembic_versions to fetch.
     */
    orderBy?: alembic_versionOrderByWithRelationInput | alembic_versionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alembic_versions.
     */
    cursor?: alembic_versionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alembic_versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alembic_versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alembic_versions.
     */
    distinct?: Alembic_versionScalarFieldEnum | Alembic_versionScalarFieldEnum[]
  }

  /**
   * alembic_version findMany
   */
  export type alembic_versionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * Filter, which alembic_versions to fetch.
     */
    where?: alembic_versionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alembic_versions to fetch.
     */
    orderBy?: alembic_versionOrderByWithRelationInput | alembic_versionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alembic_versions.
     */
    cursor?: alembic_versionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alembic_versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alembic_versions.
     */
    skip?: number
    distinct?: Alembic_versionScalarFieldEnum | Alembic_versionScalarFieldEnum[]
  }

  /**
   * alembic_version create
   */
  export type alembic_versionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * The data needed to create a alembic_version.
     */
    data: XOR<alembic_versionCreateInput, alembic_versionUncheckedCreateInput>
  }

  /**
   * alembic_version createMany
   */
  export type alembic_versionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many alembic_versions.
     */
    data: alembic_versionCreateManyInput | alembic_versionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * alembic_version createManyAndReturn
   */
  export type alembic_versionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * The data used to create many alembic_versions.
     */
    data: alembic_versionCreateManyInput | alembic_versionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * alembic_version update
   */
  export type alembic_versionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * The data needed to update a alembic_version.
     */
    data: XOR<alembic_versionUpdateInput, alembic_versionUncheckedUpdateInput>
    /**
     * Choose, which alembic_version to update.
     */
    where: alembic_versionWhereUniqueInput
  }

  /**
   * alembic_version updateMany
   */
  export type alembic_versionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update alembic_versions.
     */
    data: XOR<alembic_versionUpdateManyMutationInput, alembic_versionUncheckedUpdateManyInput>
    /**
     * Filter which alembic_versions to update
     */
    where?: alembic_versionWhereInput
    /**
     * Limit how many alembic_versions to update.
     */
    limit?: number
  }

  /**
   * alembic_version updateManyAndReturn
   */
  export type alembic_versionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * The data used to update alembic_versions.
     */
    data: XOR<alembic_versionUpdateManyMutationInput, alembic_versionUncheckedUpdateManyInput>
    /**
     * Filter which alembic_versions to update
     */
    where?: alembic_versionWhereInput
    /**
     * Limit how many alembic_versions to update.
     */
    limit?: number
  }

  /**
   * alembic_version upsert
   */
  export type alembic_versionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * The filter to search for the alembic_version to update in case it exists.
     */
    where: alembic_versionWhereUniqueInput
    /**
     * In case the alembic_version found by the `where` argument doesn't exist, create a new alembic_version with this data.
     */
    create: XOR<alembic_versionCreateInput, alembic_versionUncheckedCreateInput>
    /**
     * In case the alembic_version was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alembic_versionUpdateInput, alembic_versionUncheckedUpdateInput>
  }

  /**
   * alembic_version delete
   */
  export type alembic_versionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
    /**
     * Filter which alembic_version to delete.
     */
    where: alembic_versionWhereUniqueInput
  }

  /**
   * alembic_version deleteMany
   */
  export type alembic_versionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alembic_versions to delete
     */
    where?: alembic_versionWhereInput
    /**
     * Limit how many alembic_versions to delete.
     */
    limit?: number
  }

  /**
   * alembic_version without action
   */
  export type alembic_versionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alembic_version
     */
    select?: alembic_versionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alembic_version
     */
    omit?: alembic_versionOmit<ExtArgs> | null
  }


  /**
   * Model banners
   */

  export type AggregateBanners = {
    _count: BannersCountAggregateOutputType | null
    _avg: BannersAvgAggregateOutputType | null
    _sum: BannersSumAggregateOutputType | null
    _min: BannersMinAggregateOutputType | null
    _max: BannersMaxAggregateOutputType | null
  }

  export type BannersAvgAggregateOutputType = {
    id: number | null
    display_order: number | null
    active: number | null
  }

  export type BannersSumAggregateOutputType = {
    id: number | null
    display_order: number | null
    active: number | null
  }

  export type BannersMinAggregateOutputType = {
    id: number | null
    image_url: string | null
    display_order: number | null
    active: number | null
    created_at: Date | null
  }

  export type BannersMaxAggregateOutputType = {
    id: number | null
    image_url: string | null
    display_order: number | null
    active: number | null
    created_at: Date | null
  }

  export type BannersCountAggregateOutputType = {
    id: number
    image_url: number
    display_order: number
    active: number
    created_at: number
    _all: number
  }


  export type BannersAvgAggregateInputType = {
    id?: true
    display_order?: true
    active?: true
  }

  export type BannersSumAggregateInputType = {
    id?: true
    display_order?: true
    active?: true
  }

  export type BannersMinAggregateInputType = {
    id?: true
    image_url?: true
    display_order?: true
    active?: true
    created_at?: true
  }

  export type BannersMaxAggregateInputType = {
    id?: true
    image_url?: true
    display_order?: true
    active?: true
    created_at?: true
  }

  export type BannersCountAggregateInputType = {
    id?: true
    image_url?: true
    display_order?: true
    active?: true
    created_at?: true
    _all?: true
  }

  export type BannersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to aggregate.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned banners
    **/
    _count?: true | BannersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BannersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BannersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannersMaxAggregateInputType
  }

  export type GetBannersAggregateType<T extends BannersAggregateArgs> = {
        [P in keyof T & keyof AggregateBanners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanners[P]>
      : GetScalarType<T[P], AggregateBanners[P]>
  }




  export type bannersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bannersWhereInput
    orderBy?: bannersOrderByWithAggregationInput | bannersOrderByWithAggregationInput[]
    by: BannersScalarFieldEnum[] | BannersScalarFieldEnum
    having?: bannersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannersCountAggregateInputType | true
    _avg?: BannersAvgAggregateInputType
    _sum?: BannersSumAggregateInputType
    _min?: BannersMinAggregateInputType
    _max?: BannersMaxAggregateInputType
  }

  export type BannersGroupByOutputType = {
    id: number
    image_url: string
    display_order: number | null
    active: number | null
    created_at: Date | null
    _count: BannersCountAggregateOutputType | null
    _avg: BannersAvgAggregateOutputType | null
    _sum: BannersSumAggregateOutputType | null
    _min: BannersMinAggregateOutputType | null
    _max: BannersMaxAggregateOutputType | null
  }

  type GetBannersGroupByPayload<T extends bannersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannersGroupByOutputType[P]>
            : GetScalarType<T[P], BannersGroupByOutputType[P]>
        }
      >
    >


  export type bannersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_url?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["banners"]>

  export type bannersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_url?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["banners"]>

  export type bannersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image_url?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["banners"]>

  export type bannersSelectScalar = {
    id?: boolean
    image_url?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }

  export type bannersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "image_url" | "display_order" | "active" | "created_at", ExtArgs["result"]["banners"]>

  export type $bannersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "banners"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      image_url: string
      display_order: number | null
      active: number | null
      created_at: Date | null
    }, ExtArgs["result"]["banners"]>
    composites: {}
  }

  type bannersGetPayload<S extends boolean | null | undefined | bannersDefaultArgs> = $Result.GetResult<Prisma.$bannersPayload, S>

  type bannersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<bannersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BannersCountAggregateInputType | true
    }

  export interface bannersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['banners'], meta: { name: 'banners' } }
    /**
     * Find zero or one Banners that matches the filter.
     * @param {bannersFindUniqueArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bannersFindUniqueArgs>(args: SelectSubset<T, bannersFindUniqueArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Banners that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {bannersFindUniqueOrThrowArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bannersFindUniqueOrThrowArgs>(args: SelectSubset<T, bannersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersFindFirstArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bannersFindFirstArgs>(args?: SelectSubset<T, bannersFindFirstArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Banners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersFindFirstOrThrowArgs} args - Arguments to find a Banners
     * @example
     * // Get one Banners
     * const banners = await prisma.banners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bannersFindFirstOrThrowArgs>(args?: SelectSubset<T, bannersFindFirstOrThrowArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banners.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannersWithIdOnly = await prisma.banners.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bannersFindManyArgs>(args?: SelectSubset<T, bannersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Banners.
     * @param {bannersCreateArgs} args - Arguments to create a Banners.
     * @example
     * // Create one Banners
     * const Banners = await prisma.banners.create({
     *   data: {
     *     // ... data to create a Banners
     *   }
     * })
     * 
     */
    create<T extends bannersCreateArgs>(args: SelectSubset<T, bannersCreateArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Banners.
     * @param {bannersCreateManyArgs} args - Arguments to create many Banners.
     * @example
     * // Create many Banners
     * const banners = await prisma.banners.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bannersCreateManyArgs>(args?: SelectSubset<T, bannersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Banners and returns the data saved in the database.
     * @param {bannersCreateManyAndReturnArgs} args - Arguments to create many Banners.
     * @example
     * // Create many Banners
     * const banners = await prisma.banners.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Banners and only return the `id`
     * const bannersWithIdOnly = await prisma.banners.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bannersCreateManyAndReturnArgs>(args?: SelectSubset<T, bannersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Banners.
     * @param {bannersDeleteArgs} args - Arguments to delete one Banners.
     * @example
     * // Delete one Banners
     * const Banners = await prisma.banners.delete({
     *   where: {
     *     // ... filter to delete one Banners
     *   }
     * })
     * 
     */
    delete<T extends bannersDeleteArgs>(args: SelectSubset<T, bannersDeleteArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Banners.
     * @param {bannersUpdateArgs} args - Arguments to update one Banners.
     * @example
     * // Update one Banners
     * const banners = await prisma.banners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bannersUpdateArgs>(args: SelectSubset<T, bannersUpdateArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Banners.
     * @param {bannersDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bannersDeleteManyArgs>(args?: SelectSubset<T, bannersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banners = await prisma.banners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bannersUpdateManyArgs>(args: SelectSubset<T, bannersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners and returns the data updated in the database.
     * @param {bannersUpdateManyAndReturnArgs} args - Arguments to update many Banners.
     * @example
     * // Update many Banners
     * const banners = await prisma.banners.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Banners and only return the `id`
     * const bannersWithIdOnly = await prisma.banners.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends bannersUpdateManyAndReturnArgs>(args: SelectSubset<T, bannersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Banners.
     * @param {bannersUpsertArgs} args - Arguments to update or create a Banners.
     * @example
     * // Update or create a Banners
     * const banners = await prisma.banners.upsert({
     *   create: {
     *     // ... data to create a Banners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banners we want to update
     *   }
     * })
     */
    upsert<T extends bannersUpsertArgs>(args: SelectSubset<T, bannersUpsertArgs<ExtArgs>>): Prisma__bannersClient<$Result.GetResult<Prisma.$bannersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banners.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends bannersCountArgs>(
      args?: Subset<T, bannersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannersAggregateArgs>(args: Subset<T, BannersAggregateArgs>): Prisma.PrismaPromise<GetBannersAggregateType<T>>

    /**
     * Group by Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bannersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bannersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bannersGroupByArgs['orderBy'] }
        : { orderBy?: bannersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bannersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the banners model
   */
  readonly fields: bannersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for banners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bannersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the banners model
   */
  interface bannersFieldRefs {
    readonly id: FieldRef<"banners", 'Int'>
    readonly image_url: FieldRef<"banners", 'String'>
    readonly display_order: FieldRef<"banners", 'Int'>
    readonly active: FieldRef<"banners", 'Int'>
    readonly created_at: FieldRef<"banners", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * banners findUnique
   */
  export type bannersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners findUniqueOrThrow
   */
  export type bannersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners findFirst
   */
  export type bannersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }

  /**
   * banners findFirstOrThrow
   */
  export type bannersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for banners.
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of banners.
     */
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }

  /**
   * banners findMany
   */
  export type bannersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter, which banners to fetch.
     */
    where?: bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of banners to fetch.
     */
    orderBy?: bannersOrderByWithRelationInput | bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing banners.
     */
    cursor?: bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` banners.
     */
    skip?: number
    distinct?: BannersScalarFieldEnum | BannersScalarFieldEnum[]
  }

  /**
   * banners create
   */
  export type bannersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The data needed to create a banners.
     */
    data: XOR<bannersCreateInput, bannersUncheckedCreateInput>
  }

  /**
   * banners createMany
   */
  export type bannersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many banners.
     */
    data: bannersCreateManyInput | bannersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * banners createManyAndReturn
   */
  export type bannersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The data used to create many banners.
     */
    data: bannersCreateManyInput | bannersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * banners update
   */
  export type bannersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The data needed to update a banners.
     */
    data: XOR<bannersUpdateInput, bannersUncheckedUpdateInput>
    /**
     * Choose, which banners to update.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners updateMany
   */
  export type bannersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update banners.
     */
    data: XOR<bannersUpdateManyMutationInput, bannersUncheckedUpdateManyInput>
    /**
     * Filter which banners to update
     */
    where?: bannersWhereInput
    /**
     * Limit how many banners to update.
     */
    limit?: number
  }

  /**
   * banners updateManyAndReturn
   */
  export type bannersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The data used to update banners.
     */
    data: XOR<bannersUpdateManyMutationInput, bannersUncheckedUpdateManyInput>
    /**
     * Filter which banners to update
     */
    where?: bannersWhereInput
    /**
     * Limit how many banners to update.
     */
    limit?: number
  }

  /**
   * banners upsert
   */
  export type bannersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * The filter to search for the banners to update in case it exists.
     */
    where: bannersWhereUniqueInput
    /**
     * In case the banners found by the `where` argument doesn't exist, create a new banners with this data.
     */
    create: XOR<bannersCreateInput, bannersUncheckedCreateInput>
    /**
     * In case the banners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bannersUpdateInput, bannersUncheckedUpdateInput>
  }

  /**
   * banners delete
   */
  export type bannersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
    /**
     * Filter which banners to delete.
     */
    where: bannersWhereUniqueInput
  }

  /**
   * banners deleteMany
   */
  export type bannersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which banners to delete
     */
    where?: bannersWhereInput
    /**
     * Limit how many banners to delete.
     */
    limit?: number
  }

  /**
   * banners without action
   */
  export type bannersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the banners
     */
    select?: bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the banners
     */
    omit?: bannersOmit<ExtArgs> | null
  }


  /**
   * Model bestselling
   */

  export type AggregateBestselling = {
    _count: BestsellingCountAggregateOutputType | null
    _avg: BestsellingAvgAggregateOutputType | null
    _sum: BestsellingSumAggregateOutputType | null
    _min: BestsellingMinAggregateOutputType | null
    _max: BestsellingMaxAggregateOutputType | null
  }

  export type BestsellingAvgAggregateOutputType = {
    id: number | null
  }

  export type BestsellingSumAggregateOutputType = {
    id: number | null
  }

  export type BestsellingMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type BestsellingMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type BestsellingCountAggregateOutputType = {
    id: number
    product_id: number
    created_at: number
    _all: number
  }


  export type BestsellingAvgAggregateInputType = {
    id?: true
  }

  export type BestsellingSumAggregateInputType = {
    id?: true
  }

  export type BestsellingMinAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type BestsellingMaxAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type BestsellingCountAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type BestsellingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bestselling to aggregate.
     */
    where?: bestsellingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bestsellings to fetch.
     */
    orderBy?: bestsellingOrderByWithRelationInput | bestsellingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bestsellingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bestsellings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bestsellings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bestsellings
    **/
    _count?: true | BestsellingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BestsellingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BestsellingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BestsellingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BestsellingMaxAggregateInputType
  }

  export type GetBestsellingAggregateType<T extends BestsellingAggregateArgs> = {
        [P in keyof T & keyof AggregateBestselling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBestselling[P]>
      : GetScalarType<T[P], AggregateBestselling[P]>
  }




  export type bestsellingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: bestsellingWhereInput
    orderBy?: bestsellingOrderByWithAggregationInput | bestsellingOrderByWithAggregationInput[]
    by: BestsellingScalarFieldEnum[] | BestsellingScalarFieldEnum
    having?: bestsellingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BestsellingCountAggregateInputType | true
    _avg?: BestsellingAvgAggregateInputType
    _sum?: BestsellingSumAggregateInputType
    _min?: BestsellingMinAggregateInputType
    _max?: BestsellingMaxAggregateInputType
  }

  export type BestsellingGroupByOutputType = {
    id: number
    product_id: string
    created_at: Date | null
    _count: BestsellingCountAggregateOutputType | null
    _avg: BestsellingAvgAggregateOutputType | null
    _sum: BestsellingSumAggregateOutputType | null
    _min: BestsellingMinAggregateOutputType | null
    _max: BestsellingMaxAggregateOutputType | null
  }

  type GetBestsellingGroupByPayload<T extends bestsellingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BestsellingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BestsellingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BestsellingGroupByOutputType[P]>
            : GetScalarType<T[P], BestsellingGroupByOutputType[P]>
        }
      >
    >


  export type bestsellingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bestselling"]>

  export type bestsellingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bestselling"]>

  export type bestsellingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bestselling"]>

  export type bestsellingSelectScalar = {
    id?: boolean
    product_id?: boolean
    created_at?: boolean
  }

  export type bestsellingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "created_at", ExtArgs["result"]["bestselling"]>
  export type bestsellingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type bestsellingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type bestsellingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $bestsellingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "bestselling"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      created_at: Date | null
    }, ExtArgs["result"]["bestselling"]>
    composites: {}
  }

  type bestsellingGetPayload<S extends boolean | null | undefined | bestsellingDefaultArgs> = $Result.GetResult<Prisma.$bestsellingPayload, S>

  type bestsellingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<bestsellingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BestsellingCountAggregateInputType | true
    }

  export interface bestsellingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['bestselling'], meta: { name: 'bestselling' } }
    /**
     * Find zero or one Bestselling that matches the filter.
     * @param {bestsellingFindUniqueArgs} args - Arguments to find a Bestselling
     * @example
     * // Get one Bestselling
     * const bestselling = await prisma.bestselling.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends bestsellingFindUniqueArgs>(args: SelectSubset<T, bestsellingFindUniqueArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bestselling that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {bestsellingFindUniqueOrThrowArgs} args - Arguments to find a Bestselling
     * @example
     * // Get one Bestselling
     * const bestselling = await prisma.bestselling.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends bestsellingFindUniqueOrThrowArgs>(args: SelectSubset<T, bestsellingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bestselling that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bestsellingFindFirstArgs} args - Arguments to find a Bestselling
     * @example
     * // Get one Bestselling
     * const bestselling = await prisma.bestselling.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends bestsellingFindFirstArgs>(args?: SelectSubset<T, bestsellingFindFirstArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bestselling that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bestsellingFindFirstOrThrowArgs} args - Arguments to find a Bestselling
     * @example
     * // Get one Bestselling
     * const bestselling = await prisma.bestselling.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends bestsellingFindFirstOrThrowArgs>(args?: SelectSubset<T, bestsellingFindFirstOrThrowArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bestsellings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bestsellingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bestsellings
     * const bestsellings = await prisma.bestselling.findMany()
     * 
     * // Get first 10 Bestsellings
     * const bestsellings = await prisma.bestselling.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bestsellingWithIdOnly = await prisma.bestselling.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends bestsellingFindManyArgs>(args?: SelectSubset<T, bestsellingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bestselling.
     * @param {bestsellingCreateArgs} args - Arguments to create a Bestselling.
     * @example
     * // Create one Bestselling
     * const Bestselling = await prisma.bestselling.create({
     *   data: {
     *     // ... data to create a Bestselling
     *   }
     * })
     * 
     */
    create<T extends bestsellingCreateArgs>(args: SelectSubset<T, bestsellingCreateArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bestsellings.
     * @param {bestsellingCreateManyArgs} args - Arguments to create many Bestsellings.
     * @example
     * // Create many Bestsellings
     * const bestselling = await prisma.bestselling.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends bestsellingCreateManyArgs>(args?: SelectSubset<T, bestsellingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bestsellings and returns the data saved in the database.
     * @param {bestsellingCreateManyAndReturnArgs} args - Arguments to create many Bestsellings.
     * @example
     * // Create many Bestsellings
     * const bestselling = await prisma.bestselling.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bestsellings and only return the `id`
     * const bestsellingWithIdOnly = await prisma.bestselling.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends bestsellingCreateManyAndReturnArgs>(args?: SelectSubset<T, bestsellingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bestselling.
     * @param {bestsellingDeleteArgs} args - Arguments to delete one Bestselling.
     * @example
     * // Delete one Bestselling
     * const Bestselling = await prisma.bestselling.delete({
     *   where: {
     *     // ... filter to delete one Bestselling
     *   }
     * })
     * 
     */
    delete<T extends bestsellingDeleteArgs>(args: SelectSubset<T, bestsellingDeleteArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bestselling.
     * @param {bestsellingUpdateArgs} args - Arguments to update one Bestselling.
     * @example
     * // Update one Bestselling
     * const bestselling = await prisma.bestselling.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends bestsellingUpdateArgs>(args: SelectSubset<T, bestsellingUpdateArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bestsellings.
     * @param {bestsellingDeleteManyArgs} args - Arguments to filter Bestsellings to delete.
     * @example
     * // Delete a few Bestsellings
     * const { count } = await prisma.bestselling.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends bestsellingDeleteManyArgs>(args?: SelectSubset<T, bestsellingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bestsellings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bestsellingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bestsellings
     * const bestselling = await prisma.bestselling.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends bestsellingUpdateManyArgs>(args: SelectSubset<T, bestsellingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bestsellings and returns the data updated in the database.
     * @param {bestsellingUpdateManyAndReturnArgs} args - Arguments to update many Bestsellings.
     * @example
     * // Update many Bestsellings
     * const bestselling = await prisma.bestselling.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bestsellings and only return the `id`
     * const bestsellingWithIdOnly = await prisma.bestselling.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends bestsellingUpdateManyAndReturnArgs>(args: SelectSubset<T, bestsellingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bestselling.
     * @param {bestsellingUpsertArgs} args - Arguments to update or create a Bestselling.
     * @example
     * // Update or create a Bestselling
     * const bestselling = await prisma.bestselling.upsert({
     *   create: {
     *     // ... data to create a Bestselling
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bestselling we want to update
     *   }
     * })
     */
    upsert<T extends bestsellingUpsertArgs>(args: SelectSubset<T, bestsellingUpsertArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bestsellings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bestsellingCountArgs} args - Arguments to filter Bestsellings to count.
     * @example
     * // Count the number of Bestsellings
     * const count = await prisma.bestselling.count({
     *   where: {
     *     // ... the filter for the Bestsellings we want to count
     *   }
     * })
    **/
    count<T extends bestsellingCountArgs>(
      args?: Subset<T, bestsellingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BestsellingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bestselling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BestsellingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BestsellingAggregateArgs>(args: Subset<T, BestsellingAggregateArgs>): Prisma.PrismaPromise<GetBestsellingAggregateType<T>>

    /**
     * Group by Bestselling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bestsellingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends bestsellingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: bestsellingGroupByArgs['orderBy'] }
        : { orderBy?: bestsellingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, bestsellingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBestsellingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the bestselling model
   */
  readonly fields: bestsellingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for bestselling.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__bestsellingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the bestselling model
   */
  interface bestsellingFieldRefs {
    readonly id: FieldRef<"bestselling", 'Int'>
    readonly product_id: FieldRef<"bestselling", 'String'>
    readonly created_at: FieldRef<"bestselling", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * bestselling findUnique
   */
  export type bestsellingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * Filter, which bestselling to fetch.
     */
    where: bestsellingWhereUniqueInput
  }

  /**
   * bestselling findUniqueOrThrow
   */
  export type bestsellingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * Filter, which bestselling to fetch.
     */
    where: bestsellingWhereUniqueInput
  }

  /**
   * bestselling findFirst
   */
  export type bestsellingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * Filter, which bestselling to fetch.
     */
    where?: bestsellingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bestsellings to fetch.
     */
    orderBy?: bestsellingOrderByWithRelationInput | bestsellingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bestsellings.
     */
    cursor?: bestsellingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bestsellings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bestsellings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bestsellings.
     */
    distinct?: BestsellingScalarFieldEnum | BestsellingScalarFieldEnum[]
  }

  /**
   * bestselling findFirstOrThrow
   */
  export type bestsellingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * Filter, which bestselling to fetch.
     */
    where?: bestsellingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bestsellings to fetch.
     */
    orderBy?: bestsellingOrderByWithRelationInput | bestsellingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bestsellings.
     */
    cursor?: bestsellingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bestsellings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bestsellings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bestsellings.
     */
    distinct?: BestsellingScalarFieldEnum | BestsellingScalarFieldEnum[]
  }

  /**
   * bestselling findMany
   */
  export type bestsellingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * Filter, which bestsellings to fetch.
     */
    where?: bestsellingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bestsellings to fetch.
     */
    orderBy?: bestsellingOrderByWithRelationInput | bestsellingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bestsellings.
     */
    cursor?: bestsellingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bestsellings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bestsellings.
     */
    skip?: number
    distinct?: BestsellingScalarFieldEnum | BestsellingScalarFieldEnum[]
  }

  /**
   * bestselling create
   */
  export type bestsellingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * The data needed to create a bestselling.
     */
    data: XOR<bestsellingCreateInput, bestsellingUncheckedCreateInput>
  }

  /**
   * bestselling createMany
   */
  export type bestsellingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many bestsellings.
     */
    data: bestsellingCreateManyInput | bestsellingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * bestselling createManyAndReturn
   */
  export type bestsellingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * The data used to create many bestsellings.
     */
    data: bestsellingCreateManyInput | bestsellingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * bestselling update
   */
  export type bestsellingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * The data needed to update a bestselling.
     */
    data: XOR<bestsellingUpdateInput, bestsellingUncheckedUpdateInput>
    /**
     * Choose, which bestselling to update.
     */
    where: bestsellingWhereUniqueInput
  }

  /**
   * bestselling updateMany
   */
  export type bestsellingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update bestsellings.
     */
    data: XOR<bestsellingUpdateManyMutationInput, bestsellingUncheckedUpdateManyInput>
    /**
     * Filter which bestsellings to update
     */
    where?: bestsellingWhereInput
    /**
     * Limit how many bestsellings to update.
     */
    limit?: number
  }

  /**
   * bestselling updateManyAndReturn
   */
  export type bestsellingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * The data used to update bestsellings.
     */
    data: XOR<bestsellingUpdateManyMutationInput, bestsellingUncheckedUpdateManyInput>
    /**
     * Filter which bestsellings to update
     */
    where?: bestsellingWhereInput
    /**
     * Limit how many bestsellings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * bestselling upsert
   */
  export type bestsellingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * The filter to search for the bestselling to update in case it exists.
     */
    where: bestsellingWhereUniqueInput
    /**
     * In case the bestselling found by the `where` argument doesn't exist, create a new bestselling with this data.
     */
    create: XOR<bestsellingCreateInput, bestsellingUncheckedCreateInput>
    /**
     * In case the bestselling was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bestsellingUpdateInput, bestsellingUncheckedUpdateInput>
  }

  /**
   * bestselling delete
   */
  export type bestsellingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    /**
     * Filter which bestselling to delete.
     */
    where: bestsellingWhereUniqueInput
  }

  /**
   * bestselling deleteMany
   */
  export type bestsellingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which bestsellings to delete
     */
    where?: bestsellingWhereInput
    /**
     * Limit how many bestsellings to delete.
     */
    limit?: number
  }

  /**
   * bestselling without action
   */
  export type bestsellingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
  }


  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    image_url: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    image_url: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    allowed_customizations: number
    created_at: number
    image_url: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    image_url?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    image_url?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    allowed_customizations?: true
    created_at?: true
    image_url?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    allowed_customizations: JsonValue | null
    created_at: Date | null
    image_url: string | null
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    allowed_customizations?: boolean
    created_at?: boolean
    image_url?: boolean
    products?: boolean | categories$productsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    allowed_customizations?: boolean
    created_at?: boolean
    image_url?: boolean
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    allowed_customizations?: boolean
    created_at?: boolean
    image_url?: boolean
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    id?: boolean
    name?: boolean
    allowed_customizations?: boolean
    created_at?: boolean
    image_url?: boolean
  }

  export type categoriesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "allowed_customizations" | "created_at" | "image_url", ExtArgs["result"]["categories"]>
  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | categories$productsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type categoriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type categoriesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      allowed_customizations: Prisma.JsonValue | null
      created_at: Date | null
      image_url: string | null
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }

  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoriesFindUniqueArgs>(args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categories that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoriesFindFirstArgs>(args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoriesFindManyArgs>(args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
     */
    create<T extends categoriesCreateArgs>(args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categories = await prisma.categories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoriesCreateManyArgs>(args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {categoriesCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const categories = await prisma.categories.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoriesWithIdOnly = await prisma.categories.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends categoriesCreateManyAndReturnArgs>(args?: SelectSubset<T, categoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
     */
    delete<T extends categoriesDeleteArgs>(args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoriesUpdateArgs>(args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoriesDeleteManyArgs>(args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoriesUpdateManyArgs>(args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {categoriesUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoriesWithIdOnly = await prisma.categories.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends categoriesUpdateManyAndReturnArgs>(args: SelectSubset<T, categoriesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
     */
    upsert<T extends categoriesUpsertArgs>(args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends categories$productsArgs<ExtArgs> = {}>(args?: Subset<T, categories$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the categories model
   */
  interface categoriesFieldRefs {
    readonly id: FieldRef<"categories", 'Int'>
    readonly name: FieldRef<"categories", 'String'>
    readonly allowed_customizations: FieldRef<"categories", 'Json'>
    readonly created_at: FieldRef<"categories", 'DateTime'>
    readonly image_url: FieldRef<"categories", 'String'>
  }
    

  // Custom InputTypes
  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }

  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }

  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categories createManyAndReturn
   */
  export type categoriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
    /**
     * Limit how many categories to update.
     */
    limit?: number
  }

  /**
   * categories updateManyAndReturn
   */
  export type categoriesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
    /**
     * Limit how many categories to update.
     */
    limit?: number
  }

  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }

  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }

  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
    /**
     * Limit how many categories to delete.
     */
    limit?: number
  }

  /**
   * categories.products
   */
  export type categories$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the categories
     */
    omit?: categoriesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoriesInclude<ExtArgs> | null
  }


  /**
   * Model coupons
   */

  export type AggregateCoupons = {
    _count: CouponsCountAggregateOutputType | null
    _avg: CouponsAvgAggregateOutputType | null
    _sum: CouponsSumAggregateOutputType | null
    _min: CouponsMinAggregateOutputType | null
    _max: CouponsMaxAggregateOutputType | null
  }

  export type CouponsAvgAggregateOutputType = {
    id: number | null
    discount_percentage: number | null
    applicable_categories: number | null
    active: number | null
  }

  export type CouponsSumAggregateOutputType = {
    id: number | null
    discount_percentage: number | null
    applicable_categories: number[]
    active: number | null
  }

  export type CouponsMinAggregateOutputType = {
    id: number | null
    code: string | null
    discount_percentage: number | null
    active: number | null
    created_at: Date | null
    expires_at: Date | null
  }

  export type CouponsMaxAggregateOutputType = {
    id: number | null
    code: string | null
    discount_percentage: number | null
    active: number | null
    created_at: Date | null
    expires_at: Date | null
  }

  export type CouponsCountAggregateOutputType = {
    id: number
    code: number
    discount_percentage: number
    applicable_categories: number
    applicable_products: number
    active: number
    created_at: number
    expires_at: number
    _all: number
  }


  export type CouponsAvgAggregateInputType = {
    id?: true
    discount_percentage?: true
    applicable_categories?: true
    active?: true
  }

  export type CouponsSumAggregateInputType = {
    id?: true
    discount_percentage?: true
    applicable_categories?: true
    active?: true
  }

  export type CouponsMinAggregateInputType = {
    id?: true
    code?: true
    discount_percentage?: true
    active?: true
    created_at?: true
    expires_at?: true
  }

  export type CouponsMaxAggregateInputType = {
    id?: true
    code?: true
    discount_percentage?: true
    active?: true
    created_at?: true
    expires_at?: true
  }

  export type CouponsCountAggregateInputType = {
    id?: true
    code?: true
    discount_percentage?: true
    applicable_categories?: true
    applicable_products?: true
    active?: true
    created_at?: true
    expires_at?: true
    _all?: true
  }

  export type CouponsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which coupons to aggregate.
     */
    where?: couponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupons to fetch.
     */
    orderBy?: couponsOrderByWithRelationInput | couponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: couponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned coupons
    **/
    _count?: true | CouponsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CouponsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CouponsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CouponsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CouponsMaxAggregateInputType
  }

  export type GetCouponsAggregateType<T extends CouponsAggregateArgs> = {
        [P in keyof T & keyof AggregateCoupons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoupons[P]>
      : GetScalarType<T[P], AggregateCoupons[P]>
  }




  export type couponsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: couponsWhereInput
    orderBy?: couponsOrderByWithAggregationInput | couponsOrderByWithAggregationInput[]
    by: CouponsScalarFieldEnum[] | CouponsScalarFieldEnum
    having?: couponsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CouponsCountAggregateInputType | true
    _avg?: CouponsAvgAggregateInputType
    _sum?: CouponsSumAggregateInputType
    _min?: CouponsMinAggregateInputType
    _max?: CouponsMaxAggregateInputType
  }

  export type CouponsGroupByOutputType = {
    id: number
    code: string
    discount_percentage: number
    applicable_categories: number[]
    applicable_products: string[]
    active: number | null
    created_at: Date | null
    expires_at: Date | null
    _count: CouponsCountAggregateOutputType | null
    _avg: CouponsAvgAggregateOutputType | null
    _sum: CouponsSumAggregateOutputType | null
    _min: CouponsMinAggregateOutputType | null
    _max: CouponsMaxAggregateOutputType | null
  }

  type GetCouponsGroupByPayload<T extends couponsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CouponsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CouponsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CouponsGroupByOutputType[P]>
            : GetScalarType<T[P], CouponsGroupByOutputType[P]>
        }
      >
    >


  export type couponsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    discount_percentage?: boolean
    applicable_categories?: boolean
    applicable_products?: boolean
    active?: boolean
    created_at?: boolean
    expires_at?: boolean
  }, ExtArgs["result"]["coupons"]>

  export type couponsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    discount_percentage?: boolean
    applicable_categories?: boolean
    applicable_products?: boolean
    active?: boolean
    created_at?: boolean
    expires_at?: boolean
  }, ExtArgs["result"]["coupons"]>

  export type couponsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    discount_percentage?: boolean
    applicable_categories?: boolean
    applicable_products?: boolean
    active?: boolean
    created_at?: boolean
    expires_at?: boolean
  }, ExtArgs["result"]["coupons"]>

  export type couponsSelectScalar = {
    id?: boolean
    code?: boolean
    discount_percentage?: boolean
    applicable_categories?: boolean
    applicable_products?: boolean
    active?: boolean
    created_at?: boolean
    expires_at?: boolean
  }

  export type couponsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "discount_percentage" | "applicable_categories" | "applicable_products" | "active" | "created_at" | "expires_at", ExtArgs["result"]["coupons"]>

  export type $couponsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "coupons"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      discount_percentage: number
      applicable_categories: number[]
      applicable_products: string[]
      active: number | null
      created_at: Date | null
      expires_at: Date | null
    }, ExtArgs["result"]["coupons"]>
    composites: {}
  }

  type couponsGetPayload<S extends boolean | null | undefined | couponsDefaultArgs> = $Result.GetResult<Prisma.$couponsPayload, S>

  type couponsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<couponsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CouponsCountAggregateInputType | true
    }

  export interface couponsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coupons'], meta: { name: 'coupons' } }
    /**
     * Find zero or one Coupons that matches the filter.
     * @param {couponsFindUniqueArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends couponsFindUniqueArgs>(args: SelectSubset<T, couponsFindUniqueArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Coupons that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {couponsFindUniqueOrThrowArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends couponsFindUniqueOrThrowArgs>(args: SelectSubset<T, couponsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {couponsFindFirstArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends couponsFindFirstArgs>(args?: SelectSubset<T, couponsFindFirstArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coupons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {couponsFindFirstOrThrowArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends couponsFindFirstOrThrowArgs>(args?: SelectSubset<T, couponsFindFirstOrThrowArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Coupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {couponsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coupons
     * const coupons = await prisma.coupons.findMany()
     * 
     * // Get first 10 Coupons
     * const coupons = await prisma.coupons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const couponsWithIdOnly = await prisma.coupons.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends couponsFindManyArgs>(args?: SelectSubset<T, couponsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Coupons.
     * @param {couponsCreateArgs} args - Arguments to create a Coupons.
     * @example
     * // Create one Coupons
     * const Coupons = await prisma.coupons.create({
     *   data: {
     *     // ... data to create a Coupons
     *   }
     * })
     * 
     */
    create<T extends couponsCreateArgs>(args: SelectSubset<T, couponsCreateArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Coupons.
     * @param {couponsCreateManyArgs} args - Arguments to create many Coupons.
     * @example
     * // Create many Coupons
     * const coupons = await prisma.coupons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends couponsCreateManyArgs>(args?: SelectSubset<T, couponsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coupons and returns the data saved in the database.
     * @param {couponsCreateManyAndReturnArgs} args - Arguments to create many Coupons.
     * @example
     * // Create many Coupons
     * const coupons = await prisma.coupons.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coupons and only return the `id`
     * const couponsWithIdOnly = await prisma.coupons.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends couponsCreateManyAndReturnArgs>(args?: SelectSubset<T, couponsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Coupons.
     * @param {couponsDeleteArgs} args - Arguments to delete one Coupons.
     * @example
     * // Delete one Coupons
     * const Coupons = await prisma.coupons.delete({
     *   where: {
     *     // ... filter to delete one Coupons
     *   }
     * })
     * 
     */
    delete<T extends couponsDeleteArgs>(args: SelectSubset<T, couponsDeleteArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Coupons.
     * @param {couponsUpdateArgs} args - Arguments to update one Coupons.
     * @example
     * // Update one Coupons
     * const coupons = await prisma.coupons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends couponsUpdateArgs>(args: SelectSubset<T, couponsUpdateArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Coupons.
     * @param {couponsDeleteManyArgs} args - Arguments to filter Coupons to delete.
     * @example
     * // Delete a few Coupons
     * const { count } = await prisma.coupons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends couponsDeleteManyArgs>(args?: SelectSubset<T, couponsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {couponsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coupons
     * const coupons = await prisma.coupons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends couponsUpdateManyArgs>(args: SelectSubset<T, couponsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coupons and returns the data updated in the database.
     * @param {couponsUpdateManyAndReturnArgs} args - Arguments to update many Coupons.
     * @example
     * // Update many Coupons
     * const coupons = await prisma.coupons.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Coupons and only return the `id`
     * const couponsWithIdOnly = await prisma.coupons.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends couponsUpdateManyAndReturnArgs>(args: SelectSubset<T, couponsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Coupons.
     * @param {couponsUpsertArgs} args - Arguments to update or create a Coupons.
     * @example
     * // Update or create a Coupons
     * const coupons = await prisma.coupons.upsert({
     *   create: {
     *     // ... data to create a Coupons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coupons we want to update
     *   }
     * })
     */
    upsert<T extends couponsUpsertArgs>(args: SelectSubset<T, couponsUpsertArgs<ExtArgs>>): Prisma__couponsClient<$Result.GetResult<Prisma.$couponsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {couponsCountArgs} args - Arguments to filter Coupons to count.
     * @example
     * // Count the number of Coupons
     * const count = await prisma.coupons.count({
     *   where: {
     *     // ... the filter for the Coupons we want to count
     *   }
     * })
    **/
    count<T extends couponsCountArgs>(
      args?: Subset<T, couponsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CouponsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CouponsAggregateArgs>(args: Subset<T, CouponsAggregateArgs>): Prisma.PrismaPromise<GetCouponsAggregateType<T>>

    /**
     * Group by Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {couponsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends couponsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: couponsGroupByArgs['orderBy'] }
        : { orderBy?: couponsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, couponsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the coupons model
   */
  readonly fields: couponsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for coupons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__couponsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the coupons model
   */
  interface couponsFieldRefs {
    readonly id: FieldRef<"coupons", 'Int'>
    readonly code: FieldRef<"coupons", 'String'>
    readonly discount_percentage: FieldRef<"coupons", 'Int'>
    readonly applicable_categories: FieldRef<"coupons", 'Int[]'>
    readonly applicable_products: FieldRef<"coupons", 'String[]'>
    readonly active: FieldRef<"coupons", 'Int'>
    readonly created_at: FieldRef<"coupons", 'DateTime'>
    readonly expires_at: FieldRef<"coupons", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * coupons findUnique
   */
  export type couponsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * Filter, which coupons to fetch.
     */
    where: couponsWhereUniqueInput
  }

  /**
   * coupons findUniqueOrThrow
   */
  export type couponsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * Filter, which coupons to fetch.
     */
    where: couponsWhereUniqueInput
  }

  /**
   * coupons findFirst
   */
  export type couponsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * Filter, which coupons to fetch.
     */
    where?: couponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupons to fetch.
     */
    orderBy?: couponsOrderByWithRelationInput | couponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coupons.
     */
    cursor?: couponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coupons.
     */
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * coupons findFirstOrThrow
   */
  export type couponsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * Filter, which coupons to fetch.
     */
    where?: couponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupons to fetch.
     */
    orderBy?: couponsOrderByWithRelationInput | couponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coupons.
     */
    cursor?: couponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coupons.
     */
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * coupons findMany
   */
  export type couponsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * Filter, which coupons to fetch.
     */
    where?: couponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupons to fetch.
     */
    orderBy?: couponsOrderByWithRelationInput | couponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing coupons.
     */
    cursor?: couponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupons.
     */
    skip?: number
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * coupons create
   */
  export type couponsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * The data needed to create a coupons.
     */
    data: XOR<couponsCreateInput, couponsUncheckedCreateInput>
  }

  /**
   * coupons createMany
   */
  export type couponsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many coupons.
     */
    data: couponsCreateManyInput | couponsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * coupons createManyAndReturn
   */
  export type couponsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * The data used to create many coupons.
     */
    data: couponsCreateManyInput | couponsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * coupons update
   */
  export type couponsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * The data needed to update a coupons.
     */
    data: XOR<couponsUpdateInput, couponsUncheckedUpdateInput>
    /**
     * Choose, which coupons to update.
     */
    where: couponsWhereUniqueInput
  }

  /**
   * coupons updateMany
   */
  export type couponsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update coupons.
     */
    data: XOR<couponsUpdateManyMutationInput, couponsUncheckedUpdateManyInput>
    /**
     * Filter which coupons to update
     */
    where?: couponsWhereInput
    /**
     * Limit how many coupons to update.
     */
    limit?: number
  }

  /**
   * coupons updateManyAndReturn
   */
  export type couponsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * The data used to update coupons.
     */
    data: XOR<couponsUpdateManyMutationInput, couponsUncheckedUpdateManyInput>
    /**
     * Filter which coupons to update
     */
    where?: couponsWhereInput
    /**
     * Limit how many coupons to update.
     */
    limit?: number
  }

  /**
   * coupons upsert
   */
  export type couponsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * The filter to search for the coupons to update in case it exists.
     */
    where: couponsWhereUniqueInput
    /**
     * In case the coupons found by the `where` argument doesn't exist, create a new coupons with this data.
     */
    create: XOR<couponsCreateInput, couponsUncheckedCreateInput>
    /**
     * In case the coupons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<couponsUpdateInput, couponsUncheckedUpdateInput>
  }

  /**
   * coupons delete
   */
  export type couponsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
    /**
     * Filter which coupons to delete.
     */
    where: couponsWhereUniqueInput
  }

  /**
   * coupons deleteMany
   */
  export type couponsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which coupons to delete
     */
    where?: couponsWhereInput
    /**
     * Limit how many coupons to delete.
     */
    limit?: number
  }

  /**
   * coupons without action
   */
  export type couponsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupons
     */
    select?: couponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupons
     */
    omit?: couponsOmit<ExtArgs> | null
  }


  /**
   * Model new_arrivals
   */

  export type AggregateNew_arrivals = {
    _count: New_arrivalsCountAggregateOutputType | null
    _avg: New_arrivalsAvgAggregateOutputType | null
    _sum: New_arrivalsSumAggregateOutputType | null
    _min: New_arrivalsMinAggregateOutputType | null
    _max: New_arrivalsMaxAggregateOutputType | null
  }

  export type New_arrivalsAvgAggregateOutputType = {
    id: number | null
  }

  export type New_arrivalsSumAggregateOutputType = {
    id: number | null
  }

  export type New_arrivalsMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type New_arrivalsMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type New_arrivalsCountAggregateOutputType = {
    id: number
    product_id: number
    created_at: number
    _all: number
  }


  export type New_arrivalsAvgAggregateInputType = {
    id?: true
  }

  export type New_arrivalsSumAggregateInputType = {
    id?: true
  }

  export type New_arrivalsMinAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type New_arrivalsMaxAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type New_arrivalsCountAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type New_arrivalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which new_arrivals to aggregate.
     */
    where?: new_arrivalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_arrivals to fetch.
     */
    orderBy?: new_arrivalsOrderByWithRelationInput | new_arrivalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: new_arrivalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_arrivals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_arrivals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned new_arrivals
    **/
    _count?: true | New_arrivalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: New_arrivalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: New_arrivalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: New_arrivalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: New_arrivalsMaxAggregateInputType
  }

  export type GetNew_arrivalsAggregateType<T extends New_arrivalsAggregateArgs> = {
        [P in keyof T & keyof AggregateNew_arrivals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNew_arrivals[P]>
      : GetScalarType<T[P], AggregateNew_arrivals[P]>
  }




  export type new_arrivalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: new_arrivalsWhereInput
    orderBy?: new_arrivalsOrderByWithAggregationInput | new_arrivalsOrderByWithAggregationInput[]
    by: New_arrivalsScalarFieldEnum[] | New_arrivalsScalarFieldEnum
    having?: new_arrivalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: New_arrivalsCountAggregateInputType | true
    _avg?: New_arrivalsAvgAggregateInputType
    _sum?: New_arrivalsSumAggregateInputType
    _min?: New_arrivalsMinAggregateInputType
    _max?: New_arrivalsMaxAggregateInputType
  }

  export type New_arrivalsGroupByOutputType = {
    id: number
    product_id: string
    created_at: Date | null
    _count: New_arrivalsCountAggregateOutputType | null
    _avg: New_arrivalsAvgAggregateOutputType | null
    _sum: New_arrivalsSumAggregateOutputType | null
    _min: New_arrivalsMinAggregateOutputType | null
    _max: New_arrivalsMaxAggregateOutputType | null
  }

  type GetNew_arrivalsGroupByPayload<T extends new_arrivalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<New_arrivalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof New_arrivalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], New_arrivalsGroupByOutputType[P]>
            : GetScalarType<T[P], New_arrivalsGroupByOutputType[P]>
        }
      >
    >


  export type new_arrivalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["new_arrivals"]>

  export type new_arrivalsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["new_arrivals"]>

  export type new_arrivalsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["new_arrivals"]>

  export type new_arrivalsSelectScalar = {
    id?: boolean
    product_id?: boolean
    created_at?: boolean
  }

  export type new_arrivalsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "created_at", ExtArgs["result"]["new_arrivals"]>
  export type new_arrivalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type new_arrivalsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type new_arrivalsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $new_arrivalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "new_arrivals"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      created_at: Date | null
    }, ExtArgs["result"]["new_arrivals"]>
    composites: {}
  }

  type new_arrivalsGetPayload<S extends boolean | null | undefined | new_arrivalsDefaultArgs> = $Result.GetResult<Prisma.$new_arrivalsPayload, S>

  type new_arrivalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<new_arrivalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: New_arrivalsCountAggregateInputType | true
    }

  export interface new_arrivalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['new_arrivals'], meta: { name: 'new_arrivals' } }
    /**
     * Find zero or one New_arrivals that matches the filter.
     * @param {new_arrivalsFindUniqueArgs} args - Arguments to find a New_arrivals
     * @example
     * // Get one New_arrivals
     * const new_arrivals = await prisma.new_arrivals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends new_arrivalsFindUniqueArgs>(args: SelectSubset<T, new_arrivalsFindUniqueArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one New_arrivals that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {new_arrivalsFindUniqueOrThrowArgs} args - Arguments to find a New_arrivals
     * @example
     * // Get one New_arrivals
     * const new_arrivals = await prisma.new_arrivals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends new_arrivalsFindUniqueOrThrowArgs>(args: SelectSubset<T, new_arrivalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first New_arrivals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_arrivalsFindFirstArgs} args - Arguments to find a New_arrivals
     * @example
     * // Get one New_arrivals
     * const new_arrivals = await prisma.new_arrivals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends new_arrivalsFindFirstArgs>(args?: SelectSubset<T, new_arrivalsFindFirstArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first New_arrivals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_arrivalsFindFirstOrThrowArgs} args - Arguments to find a New_arrivals
     * @example
     * // Get one New_arrivals
     * const new_arrivals = await prisma.new_arrivals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends new_arrivalsFindFirstOrThrowArgs>(args?: SelectSubset<T, new_arrivalsFindFirstOrThrowArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more New_arrivals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_arrivalsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all New_arrivals
     * const new_arrivals = await prisma.new_arrivals.findMany()
     * 
     * // Get first 10 New_arrivals
     * const new_arrivals = await prisma.new_arrivals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const new_arrivalsWithIdOnly = await prisma.new_arrivals.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends new_arrivalsFindManyArgs>(args?: SelectSubset<T, new_arrivalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a New_arrivals.
     * @param {new_arrivalsCreateArgs} args - Arguments to create a New_arrivals.
     * @example
     * // Create one New_arrivals
     * const New_arrivals = await prisma.new_arrivals.create({
     *   data: {
     *     // ... data to create a New_arrivals
     *   }
     * })
     * 
     */
    create<T extends new_arrivalsCreateArgs>(args: SelectSubset<T, new_arrivalsCreateArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many New_arrivals.
     * @param {new_arrivalsCreateManyArgs} args - Arguments to create many New_arrivals.
     * @example
     * // Create many New_arrivals
     * const new_arrivals = await prisma.new_arrivals.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends new_arrivalsCreateManyArgs>(args?: SelectSubset<T, new_arrivalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many New_arrivals and returns the data saved in the database.
     * @param {new_arrivalsCreateManyAndReturnArgs} args - Arguments to create many New_arrivals.
     * @example
     * // Create many New_arrivals
     * const new_arrivals = await prisma.new_arrivals.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many New_arrivals and only return the `id`
     * const new_arrivalsWithIdOnly = await prisma.new_arrivals.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends new_arrivalsCreateManyAndReturnArgs>(args?: SelectSubset<T, new_arrivalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a New_arrivals.
     * @param {new_arrivalsDeleteArgs} args - Arguments to delete one New_arrivals.
     * @example
     * // Delete one New_arrivals
     * const New_arrivals = await prisma.new_arrivals.delete({
     *   where: {
     *     // ... filter to delete one New_arrivals
     *   }
     * })
     * 
     */
    delete<T extends new_arrivalsDeleteArgs>(args: SelectSubset<T, new_arrivalsDeleteArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one New_arrivals.
     * @param {new_arrivalsUpdateArgs} args - Arguments to update one New_arrivals.
     * @example
     * // Update one New_arrivals
     * const new_arrivals = await prisma.new_arrivals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends new_arrivalsUpdateArgs>(args: SelectSubset<T, new_arrivalsUpdateArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more New_arrivals.
     * @param {new_arrivalsDeleteManyArgs} args - Arguments to filter New_arrivals to delete.
     * @example
     * // Delete a few New_arrivals
     * const { count } = await prisma.new_arrivals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends new_arrivalsDeleteManyArgs>(args?: SelectSubset<T, new_arrivalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more New_arrivals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_arrivalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many New_arrivals
     * const new_arrivals = await prisma.new_arrivals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends new_arrivalsUpdateManyArgs>(args: SelectSubset<T, new_arrivalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more New_arrivals and returns the data updated in the database.
     * @param {new_arrivalsUpdateManyAndReturnArgs} args - Arguments to update many New_arrivals.
     * @example
     * // Update many New_arrivals
     * const new_arrivals = await prisma.new_arrivals.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more New_arrivals and only return the `id`
     * const new_arrivalsWithIdOnly = await prisma.new_arrivals.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends new_arrivalsUpdateManyAndReturnArgs>(args: SelectSubset<T, new_arrivalsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one New_arrivals.
     * @param {new_arrivalsUpsertArgs} args - Arguments to update or create a New_arrivals.
     * @example
     * // Update or create a New_arrivals
     * const new_arrivals = await prisma.new_arrivals.upsert({
     *   create: {
     *     // ... data to create a New_arrivals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the New_arrivals we want to update
     *   }
     * })
     */
    upsert<T extends new_arrivalsUpsertArgs>(args: SelectSubset<T, new_arrivalsUpsertArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of New_arrivals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_arrivalsCountArgs} args - Arguments to filter New_arrivals to count.
     * @example
     * // Count the number of New_arrivals
     * const count = await prisma.new_arrivals.count({
     *   where: {
     *     // ... the filter for the New_arrivals we want to count
     *   }
     * })
    **/
    count<T extends new_arrivalsCountArgs>(
      args?: Subset<T, new_arrivalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], New_arrivalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a New_arrivals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {New_arrivalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends New_arrivalsAggregateArgs>(args: Subset<T, New_arrivalsAggregateArgs>): Prisma.PrismaPromise<GetNew_arrivalsAggregateType<T>>

    /**
     * Group by New_arrivals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {new_arrivalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends new_arrivalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: new_arrivalsGroupByArgs['orderBy'] }
        : { orderBy?: new_arrivalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, new_arrivalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNew_arrivalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the new_arrivals model
   */
  readonly fields: new_arrivalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for new_arrivals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__new_arrivalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the new_arrivals model
   */
  interface new_arrivalsFieldRefs {
    readonly id: FieldRef<"new_arrivals", 'Int'>
    readonly product_id: FieldRef<"new_arrivals", 'String'>
    readonly created_at: FieldRef<"new_arrivals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * new_arrivals findUnique
   */
  export type new_arrivalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * Filter, which new_arrivals to fetch.
     */
    where: new_arrivalsWhereUniqueInput
  }

  /**
   * new_arrivals findUniqueOrThrow
   */
  export type new_arrivalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * Filter, which new_arrivals to fetch.
     */
    where: new_arrivalsWhereUniqueInput
  }

  /**
   * new_arrivals findFirst
   */
  export type new_arrivalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * Filter, which new_arrivals to fetch.
     */
    where?: new_arrivalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_arrivals to fetch.
     */
    orderBy?: new_arrivalsOrderByWithRelationInput | new_arrivalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for new_arrivals.
     */
    cursor?: new_arrivalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_arrivals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_arrivals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of new_arrivals.
     */
    distinct?: New_arrivalsScalarFieldEnum | New_arrivalsScalarFieldEnum[]
  }

  /**
   * new_arrivals findFirstOrThrow
   */
  export type new_arrivalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * Filter, which new_arrivals to fetch.
     */
    where?: new_arrivalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_arrivals to fetch.
     */
    orderBy?: new_arrivalsOrderByWithRelationInput | new_arrivalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for new_arrivals.
     */
    cursor?: new_arrivalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_arrivals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_arrivals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of new_arrivals.
     */
    distinct?: New_arrivalsScalarFieldEnum | New_arrivalsScalarFieldEnum[]
  }

  /**
   * new_arrivals findMany
   */
  export type new_arrivalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * Filter, which new_arrivals to fetch.
     */
    where?: new_arrivalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of new_arrivals to fetch.
     */
    orderBy?: new_arrivalsOrderByWithRelationInput | new_arrivalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing new_arrivals.
     */
    cursor?: new_arrivalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` new_arrivals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` new_arrivals.
     */
    skip?: number
    distinct?: New_arrivalsScalarFieldEnum | New_arrivalsScalarFieldEnum[]
  }

  /**
   * new_arrivals create
   */
  export type new_arrivalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * The data needed to create a new_arrivals.
     */
    data: XOR<new_arrivalsCreateInput, new_arrivalsUncheckedCreateInput>
  }

  /**
   * new_arrivals createMany
   */
  export type new_arrivalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many new_arrivals.
     */
    data: new_arrivalsCreateManyInput | new_arrivalsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * new_arrivals createManyAndReturn
   */
  export type new_arrivalsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * The data used to create many new_arrivals.
     */
    data: new_arrivalsCreateManyInput | new_arrivalsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * new_arrivals update
   */
  export type new_arrivalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * The data needed to update a new_arrivals.
     */
    data: XOR<new_arrivalsUpdateInput, new_arrivalsUncheckedUpdateInput>
    /**
     * Choose, which new_arrivals to update.
     */
    where: new_arrivalsWhereUniqueInput
  }

  /**
   * new_arrivals updateMany
   */
  export type new_arrivalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update new_arrivals.
     */
    data: XOR<new_arrivalsUpdateManyMutationInput, new_arrivalsUncheckedUpdateManyInput>
    /**
     * Filter which new_arrivals to update
     */
    where?: new_arrivalsWhereInput
    /**
     * Limit how many new_arrivals to update.
     */
    limit?: number
  }

  /**
   * new_arrivals updateManyAndReturn
   */
  export type new_arrivalsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * The data used to update new_arrivals.
     */
    data: XOR<new_arrivalsUpdateManyMutationInput, new_arrivalsUncheckedUpdateManyInput>
    /**
     * Filter which new_arrivals to update
     */
    where?: new_arrivalsWhereInput
    /**
     * Limit how many new_arrivals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * new_arrivals upsert
   */
  export type new_arrivalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * The filter to search for the new_arrivals to update in case it exists.
     */
    where: new_arrivalsWhereUniqueInput
    /**
     * In case the new_arrivals found by the `where` argument doesn't exist, create a new new_arrivals with this data.
     */
    create: XOR<new_arrivalsCreateInput, new_arrivalsUncheckedCreateInput>
    /**
     * In case the new_arrivals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<new_arrivalsUpdateInput, new_arrivalsUncheckedUpdateInput>
  }

  /**
   * new_arrivals delete
   */
  export type new_arrivalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    /**
     * Filter which new_arrivals to delete.
     */
    where: new_arrivalsWhereUniqueInput
  }

  /**
   * new_arrivals deleteMany
   */
  export type new_arrivalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which new_arrivals to delete
     */
    where?: new_arrivalsWhereInput
    /**
     * Limit how many new_arrivals to delete.
     */
    limit?: number
  }

  /**
   * new_arrivals without action
   */
  export type new_arrivalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
  }


  /**
   * Model on_sale
   */

  export type AggregateOn_sale = {
    _count: On_saleCountAggregateOutputType | null
    _avg: On_saleAvgAggregateOutputType | null
    _sum: On_saleSumAggregateOutputType | null
    _min: On_saleMinAggregateOutputType | null
    _max: On_saleMaxAggregateOutputType | null
  }

  export type On_saleAvgAggregateOutputType = {
    id: number | null
  }

  export type On_saleSumAggregateOutputType = {
    id: number | null
  }

  export type On_saleMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type On_saleMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type On_saleCountAggregateOutputType = {
    id: number
    product_id: number
    created_at: number
    _all: number
  }


  export type On_saleAvgAggregateInputType = {
    id?: true
  }

  export type On_saleSumAggregateInputType = {
    id?: true
  }

  export type On_saleMinAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type On_saleMaxAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type On_saleCountAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type On_saleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which on_sale to aggregate.
     */
    where?: on_saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of on_sales to fetch.
     */
    orderBy?: on_saleOrderByWithRelationInput | on_saleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: on_saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` on_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` on_sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned on_sales
    **/
    _count?: true | On_saleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: On_saleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: On_saleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: On_saleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: On_saleMaxAggregateInputType
  }

  export type GetOn_saleAggregateType<T extends On_saleAggregateArgs> = {
        [P in keyof T & keyof AggregateOn_sale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOn_sale[P]>
      : GetScalarType<T[P], AggregateOn_sale[P]>
  }




  export type on_saleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: on_saleWhereInput
    orderBy?: on_saleOrderByWithAggregationInput | on_saleOrderByWithAggregationInput[]
    by: On_saleScalarFieldEnum[] | On_saleScalarFieldEnum
    having?: on_saleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: On_saleCountAggregateInputType | true
    _avg?: On_saleAvgAggregateInputType
    _sum?: On_saleSumAggregateInputType
    _min?: On_saleMinAggregateInputType
    _max?: On_saleMaxAggregateInputType
  }

  export type On_saleGroupByOutputType = {
    id: number
    product_id: string
    created_at: Date | null
    _count: On_saleCountAggregateOutputType | null
    _avg: On_saleAvgAggregateOutputType | null
    _sum: On_saleSumAggregateOutputType | null
    _min: On_saleMinAggregateOutputType | null
    _max: On_saleMaxAggregateOutputType | null
  }

  type GetOn_saleGroupByPayload<T extends on_saleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<On_saleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof On_saleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], On_saleGroupByOutputType[P]>
            : GetScalarType<T[P], On_saleGroupByOutputType[P]>
        }
      >
    >


  export type on_saleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["on_sale"]>

  export type on_saleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["on_sale"]>

  export type on_saleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["on_sale"]>

  export type on_saleSelectScalar = {
    id?: boolean
    product_id?: boolean
    created_at?: boolean
  }

  export type on_saleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "created_at", ExtArgs["result"]["on_sale"]>
  export type on_saleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type on_saleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type on_saleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $on_salePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "on_sale"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      created_at: Date | null
    }, ExtArgs["result"]["on_sale"]>
    composites: {}
  }

  type on_saleGetPayload<S extends boolean | null | undefined | on_saleDefaultArgs> = $Result.GetResult<Prisma.$on_salePayload, S>

  type on_saleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<on_saleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: On_saleCountAggregateInputType | true
    }

  export interface on_saleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['on_sale'], meta: { name: 'on_sale' } }
    /**
     * Find zero or one On_sale that matches the filter.
     * @param {on_saleFindUniqueArgs} args - Arguments to find a On_sale
     * @example
     * // Get one On_sale
     * const on_sale = await prisma.on_sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends on_saleFindUniqueArgs>(args: SelectSubset<T, on_saleFindUniqueArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one On_sale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {on_saleFindUniqueOrThrowArgs} args - Arguments to find a On_sale
     * @example
     * // Get one On_sale
     * const on_sale = await prisma.on_sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends on_saleFindUniqueOrThrowArgs>(args: SelectSubset<T, on_saleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first On_sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {on_saleFindFirstArgs} args - Arguments to find a On_sale
     * @example
     * // Get one On_sale
     * const on_sale = await prisma.on_sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends on_saleFindFirstArgs>(args?: SelectSubset<T, on_saleFindFirstArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first On_sale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {on_saleFindFirstOrThrowArgs} args - Arguments to find a On_sale
     * @example
     * // Get one On_sale
     * const on_sale = await prisma.on_sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends on_saleFindFirstOrThrowArgs>(args?: SelectSubset<T, on_saleFindFirstOrThrowArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more On_sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {on_saleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all On_sales
     * const on_sales = await prisma.on_sale.findMany()
     * 
     * // Get first 10 On_sales
     * const on_sales = await prisma.on_sale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const on_saleWithIdOnly = await prisma.on_sale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends on_saleFindManyArgs>(args?: SelectSubset<T, on_saleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a On_sale.
     * @param {on_saleCreateArgs} args - Arguments to create a On_sale.
     * @example
     * // Create one On_sale
     * const On_sale = await prisma.on_sale.create({
     *   data: {
     *     // ... data to create a On_sale
     *   }
     * })
     * 
     */
    create<T extends on_saleCreateArgs>(args: SelectSubset<T, on_saleCreateArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many On_sales.
     * @param {on_saleCreateManyArgs} args - Arguments to create many On_sales.
     * @example
     * // Create many On_sales
     * const on_sale = await prisma.on_sale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends on_saleCreateManyArgs>(args?: SelectSubset<T, on_saleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many On_sales and returns the data saved in the database.
     * @param {on_saleCreateManyAndReturnArgs} args - Arguments to create many On_sales.
     * @example
     * // Create many On_sales
     * const on_sale = await prisma.on_sale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many On_sales and only return the `id`
     * const on_saleWithIdOnly = await prisma.on_sale.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends on_saleCreateManyAndReturnArgs>(args?: SelectSubset<T, on_saleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a On_sale.
     * @param {on_saleDeleteArgs} args - Arguments to delete one On_sale.
     * @example
     * // Delete one On_sale
     * const On_sale = await prisma.on_sale.delete({
     *   where: {
     *     // ... filter to delete one On_sale
     *   }
     * })
     * 
     */
    delete<T extends on_saleDeleteArgs>(args: SelectSubset<T, on_saleDeleteArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one On_sale.
     * @param {on_saleUpdateArgs} args - Arguments to update one On_sale.
     * @example
     * // Update one On_sale
     * const on_sale = await prisma.on_sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends on_saleUpdateArgs>(args: SelectSubset<T, on_saleUpdateArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more On_sales.
     * @param {on_saleDeleteManyArgs} args - Arguments to filter On_sales to delete.
     * @example
     * // Delete a few On_sales
     * const { count } = await prisma.on_sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends on_saleDeleteManyArgs>(args?: SelectSubset<T, on_saleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more On_sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {on_saleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many On_sales
     * const on_sale = await prisma.on_sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends on_saleUpdateManyArgs>(args: SelectSubset<T, on_saleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more On_sales and returns the data updated in the database.
     * @param {on_saleUpdateManyAndReturnArgs} args - Arguments to update many On_sales.
     * @example
     * // Update many On_sales
     * const on_sale = await prisma.on_sale.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more On_sales and only return the `id`
     * const on_saleWithIdOnly = await prisma.on_sale.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends on_saleUpdateManyAndReturnArgs>(args: SelectSubset<T, on_saleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one On_sale.
     * @param {on_saleUpsertArgs} args - Arguments to update or create a On_sale.
     * @example
     * // Update or create a On_sale
     * const on_sale = await prisma.on_sale.upsert({
     *   create: {
     *     // ... data to create a On_sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the On_sale we want to update
     *   }
     * })
     */
    upsert<T extends on_saleUpsertArgs>(args: SelectSubset<T, on_saleUpsertArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of On_sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {on_saleCountArgs} args - Arguments to filter On_sales to count.
     * @example
     * // Count the number of On_sales
     * const count = await prisma.on_sale.count({
     *   where: {
     *     // ... the filter for the On_sales we want to count
     *   }
     * })
    **/
    count<T extends on_saleCountArgs>(
      args?: Subset<T, on_saleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], On_saleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a On_sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {On_saleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends On_saleAggregateArgs>(args: Subset<T, On_saleAggregateArgs>): Prisma.PrismaPromise<GetOn_saleAggregateType<T>>

    /**
     * Group by On_sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {on_saleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends on_saleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: on_saleGroupByArgs['orderBy'] }
        : { orderBy?: on_saleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, on_saleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOn_saleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the on_sale model
   */
  readonly fields: on_saleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for on_sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__on_saleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the on_sale model
   */
  interface on_saleFieldRefs {
    readonly id: FieldRef<"on_sale", 'Int'>
    readonly product_id: FieldRef<"on_sale", 'String'>
    readonly created_at: FieldRef<"on_sale", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * on_sale findUnique
   */
  export type on_saleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * Filter, which on_sale to fetch.
     */
    where: on_saleWhereUniqueInput
  }

  /**
   * on_sale findUniqueOrThrow
   */
  export type on_saleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * Filter, which on_sale to fetch.
     */
    where: on_saleWhereUniqueInput
  }

  /**
   * on_sale findFirst
   */
  export type on_saleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * Filter, which on_sale to fetch.
     */
    where?: on_saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of on_sales to fetch.
     */
    orderBy?: on_saleOrderByWithRelationInput | on_saleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for on_sales.
     */
    cursor?: on_saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` on_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` on_sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of on_sales.
     */
    distinct?: On_saleScalarFieldEnum | On_saleScalarFieldEnum[]
  }

  /**
   * on_sale findFirstOrThrow
   */
  export type on_saleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * Filter, which on_sale to fetch.
     */
    where?: on_saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of on_sales to fetch.
     */
    orderBy?: on_saleOrderByWithRelationInput | on_saleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for on_sales.
     */
    cursor?: on_saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` on_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` on_sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of on_sales.
     */
    distinct?: On_saleScalarFieldEnum | On_saleScalarFieldEnum[]
  }

  /**
   * on_sale findMany
   */
  export type on_saleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * Filter, which on_sales to fetch.
     */
    where?: on_saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of on_sales to fetch.
     */
    orderBy?: on_saleOrderByWithRelationInput | on_saleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing on_sales.
     */
    cursor?: on_saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` on_sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` on_sales.
     */
    skip?: number
    distinct?: On_saleScalarFieldEnum | On_saleScalarFieldEnum[]
  }

  /**
   * on_sale create
   */
  export type on_saleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * The data needed to create a on_sale.
     */
    data: XOR<on_saleCreateInput, on_saleUncheckedCreateInput>
  }

  /**
   * on_sale createMany
   */
  export type on_saleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many on_sales.
     */
    data: on_saleCreateManyInput | on_saleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * on_sale createManyAndReturn
   */
  export type on_saleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * The data used to create many on_sales.
     */
    data: on_saleCreateManyInput | on_saleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * on_sale update
   */
  export type on_saleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * The data needed to update a on_sale.
     */
    data: XOR<on_saleUpdateInput, on_saleUncheckedUpdateInput>
    /**
     * Choose, which on_sale to update.
     */
    where: on_saleWhereUniqueInput
  }

  /**
   * on_sale updateMany
   */
  export type on_saleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update on_sales.
     */
    data: XOR<on_saleUpdateManyMutationInput, on_saleUncheckedUpdateManyInput>
    /**
     * Filter which on_sales to update
     */
    where?: on_saleWhereInput
    /**
     * Limit how many on_sales to update.
     */
    limit?: number
  }

  /**
   * on_sale updateManyAndReturn
   */
  export type on_saleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * The data used to update on_sales.
     */
    data: XOR<on_saleUpdateManyMutationInput, on_saleUncheckedUpdateManyInput>
    /**
     * Filter which on_sales to update
     */
    where?: on_saleWhereInput
    /**
     * Limit how many on_sales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * on_sale upsert
   */
  export type on_saleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * The filter to search for the on_sale to update in case it exists.
     */
    where: on_saleWhereUniqueInput
    /**
     * In case the on_sale found by the `where` argument doesn't exist, create a new on_sale with this data.
     */
    create: XOR<on_saleCreateInput, on_saleUncheckedCreateInput>
    /**
     * In case the on_sale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<on_saleUpdateInput, on_saleUncheckedUpdateInput>
  }

  /**
   * on_sale delete
   */
  export type on_saleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    /**
     * Filter which on_sale to delete.
     */
    where: on_saleWhereUniqueInput
  }

  /**
   * on_sale deleteMany
   */
  export type on_saleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which on_sales to delete
     */
    where?: on_saleWhereInput
    /**
     * Limit how many on_sales to delete.
     */
    limit?: number
  }

  /**
   * on_sale without action
   */
  export type on_saleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
  }


  /**
   * Model order_counter
   */

  export type AggregateOrder_counter = {
    _count: Order_counterCountAggregateOutputType | null
    _avg: Order_counterAvgAggregateOutputType | null
    _sum: Order_counterSumAggregateOutputType | null
    _min: Order_counterMinAggregateOutputType | null
    _max: Order_counterMaxAggregateOutputType | null
  }

  export type Order_counterAvgAggregateOutputType = {
    id: number | null
    current_number: number | null
  }

  export type Order_counterSumAggregateOutputType = {
    id: number | null
    current_number: number | null
  }

  export type Order_counterMinAggregateOutputType = {
    id: number | null
    current_number: number | null
  }

  export type Order_counterMaxAggregateOutputType = {
    id: number | null
    current_number: number | null
  }

  export type Order_counterCountAggregateOutputType = {
    id: number
    current_number: number
    _all: number
  }


  export type Order_counterAvgAggregateInputType = {
    id?: true
    current_number?: true
  }

  export type Order_counterSumAggregateInputType = {
    id?: true
    current_number?: true
  }

  export type Order_counterMinAggregateInputType = {
    id?: true
    current_number?: true
  }

  export type Order_counterMaxAggregateInputType = {
    id?: true
    current_number?: true
  }

  export type Order_counterCountAggregateInputType = {
    id?: true
    current_number?: true
    _all?: true
  }

  export type Order_counterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_counter to aggregate.
     */
    where?: order_counterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_counters to fetch.
     */
    orderBy?: order_counterOrderByWithRelationInput | order_counterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: order_counterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned order_counters
    **/
    _count?: true | Order_counterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_counterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_counterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_counterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_counterMaxAggregateInputType
  }

  export type GetOrder_counterAggregateType<T extends Order_counterAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_counter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_counter[P]>
      : GetScalarType<T[P], AggregateOrder_counter[P]>
  }




  export type order_counterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_counterWhereInput
    orderBy?: order_counterOrderByWithAggregationInput | order_counterOrderByWithAggregationInput[]
    by: Order_counterScalarFieldEnum[] | Order_counterScalarFieldEnum
    having?: order_counterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_counterCountAggregateInputType | true
    _avg?: Order_counterAvgAggregateInputType
    _sum?: Order_counterSumAggregateInputType
    _min?: Order_counterMinAggregateInputType
    _max?: Order_counterMaxAggregateInputType
  }

  export type Order_counterGroupByOutputType = {
    id: number
    current_number: number | null
    _count: Order_counterCountAggregateOutputType | null
    _avg: Order_counterAvgAggregateOutputType | null
    _sum: Order_counterSumAggregateOutputType | null
    _min: Order_counterMinAggregateOutputType | null
    _max: Order_counterMaxAggregateOutputType | null
  }

  type GetOrder_counterGroupByPayload<T extends order_counterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Order_counterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_counterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_counterGroupByOutputType[P]>
            : GetScalarType<T[P], Order_counterGroupByOutputType[P]>
        }
      >
    >


  export type order_counterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    current_number?: boolean
  }, ExtArgs["result"]["order_counter"]>

  export type order_counterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    current_number?: boolean
  }, ExtArgs["result"]["order_counter"]>

  export type order_counterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    current_number?: boolean
  }, ExtArgs["result"]["order_counter"]>

  export type order_counterSelectScalar = {
    id?: boolean
    current_number?: boolean
  }

  export type order_counterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "current_number", ExtArgs["result"]["order_counter"]>

  export type $order_counterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order_counter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      current_number: number | null
    }, ExtArgs["result"]["order_counter"]>
    composites: {}
  }

  type order_counterGetPayload<S extends boolean | null | undefined | order_counterDefaultArgs> = $Result.GetResult<Prisma.$order_counterPayload, S>

  type order_counterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<order_counterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Order_counterCountAggregateInputType | true
    }

  export interface order_counterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order_counter'], meta: { name: 'order_counter' } }
    /**
     * Find zero or one Order_counter that matches the filter.
     * @param {order_counterFindUniqueArgs} args - Arguments to find a Order_counter
     * @example
     * // Get one Order_counter
     * const order_counter = await prisma.order_counter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends order_counterFindUniqueArgs>(args: SelectSubset<T, order_counterFindUniqueArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order_counter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {order_counterFindUniqueOrThrowArgs} args - Arguments to find a Order_counter
     * @example
     * // Get one Order_counter
     * const order_counter = await prisma.order_counter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends order_counterFindUniqueOrThrowArgs>(args: SelectSubset<T, order_counterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order_counter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_counterFindFirstArgs} args - Arguments to find a Order_counter
     * @example
     * // Get one Order_counter
     * const order_counter = await prisma.order_counter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends order_counterFindFirstArgs>(args?: SelectSubset<T, order_counterFindFirstArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order_counter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_counterFindFirstOrThrowArgs} args - Arguments to find a Order_counter
     * @example
     * // Get one Order_counter
     * const order_counter = await prisma.order_counter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends order_counterFindFirstOrThrowArgs>(args?: SelectSubset<T, order_counterFindFirstOrThrowArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Order_counters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_counterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_counters
     * const order_counters = await prisma.order_counter.findMany()
     * 
     * // Get first 10 Order_counters
     * const order_counters = await prisma.order_counter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const order_counterWithIdOnly = await prisma.order_counter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends order_counterFindManyArgs>(args?: SelectSubset<T, order_counterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order_counter.
     * @param {order_counterCreateArgs} args - Arguments to create a Order_counter.
     * @example
     * // Create one Order_counter
     * const Order_counter = await prisma.order_counter.create({
     *   data: {
     *     // ... data to create a Order_counter
     *   }
     * })
     * 
     */
    create<T extends order_counterCreateArgs>(args: SelectSubset<T, order_counterCreateArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Order_counters.
     * @param {order_counterCreateManyArgs} args - Arguments to create many Order_counters.
     * @example
     * // Create many Order_counters
     * const order_counter = await prisma.order_counter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends order_counterCreateManyArgs>(args?: SelectSubset<T, order_counterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Order_counters and returns the data saved in the database.
     * @param {order_counterCreateManyAndReturnArgs} args - Arguments to create many Order_counters.
     * @example
     * // Create many Order_counters
     * const order_counter = await prisma.order_counter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Order_counters and only return the `id`
     * const order_counterWithIdOnly = await prisma.order_counter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends order_counterCreateManyAndReturnArgs>(args?: SelectSubset<T, order_counterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order_counter.
     * @param {order_counterDeleteArgs} args - Arguments to delete one Order_counter.
     * @example
     * // Delete one Order_counter
     * const Order_counter = await prisma.order_counter.delete({
     *   where: {
     *     // ... filter to delete one Order_counter
     *   }
     * })
     * 
     */
    delete<T extends order_counterDeleteArgs>(args: SelectSubset<T, order_counterDeleteArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order_counter.
     * @param {order_counterUpdateArgs} args - Arguments to update one Order_counter.
     * @example
     * // Update one Order_counter
     * const order_counter = await prisma.order_counter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends order_counterUpdateArgs>(args: SelectSubset<T, order_counterUpdateArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Order_counters.
     * @param {order_counterDeleteManyArgs} args - Arguments to filter Order_counters to delete.
     * @example
     * // Delete a few Order_counters
     * const { count } = await prisma.order_counter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends order_counterDeleteManyArgs>(args?: SelectSubset<T, order_counterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_counters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_counterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_counters
     * const order_counter = await prisma.order_counter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends order_counterUpdateManyArgs>(args: SelectSubset<T, order_counterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_counters and returns the data updated in the database.
     * @param {order_counterUpdateManyAndReturnArgs} args - Arguments to update many Order_counters.
     * @example
     * // Update many Order_counters
     * const order_counter = await prisma.order_counter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Order_counters and only return the `id`
     * const order_counterWithIdOnly = await prisma.order_counter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends order_counterUpdateManyAndReturnArgs>(args: SelectSubset<T, order_counterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order_counter.
     * @param {order_counterUpsertArgs} args - Arguments to update or create a Order_counter.
     * @example
     * // Update or create a Order_counter
     * const order_counter = await prisma.order_counter.upsert({
     *   create: {
     *     // ... data to create a Order_counter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_counter we want to update
     *   }
     * })
     */
    upsert<T extends order_counterUpsertArgs>(args: SelectSubset<T, order_counterUpsertArgs<ExtArgs>>): Prisma__order_counterClient<$Result.GetResult<Prisma.$order_counterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Order_counters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_counterCountArgs} args - Arguments to filter Order_counters to count.
     * @example
     * // Count the number of Order_counters
     * const count = await prisma.order_counter.count({
     *   where: {
     *     // ... the filter for the Order_counters we want to count
     *   }
     * })
    **/
    count<T extends order_counterCountArgs>(
      args?: Subset<T, order_counterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_counterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_counter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_counterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_counterAggregateArgs>(args: Subset<T, Order_counterAggregateArgs>): Prisma.PrismaPromise<GetOrder_counterAggregateType<T>>

    /**
     * Group by Order_counter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_counterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends order_counterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: order_counterGroupByArgs['orderBy'] }
        : { orderBy?: order_counterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, order_counterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_counterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order_counter model
   */
  readonly fields: order_counterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order_counter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__order_counterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the order_counter model
   */
  interface order_counterFieldRefs {
    readonly id: FieldRef<"order_counter", 'Int'>
    readonly current_number: FieldRef<"order_counter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * order_counter findUnique
   */
  export type order_counterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * Filter, which order_counter to fetch.
     */
    where: order_counterWhereUniqueInput
  }

  /**
   * order_counter findUniqueOrThrow
   */
  export type order_counterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * Filter, which order_counter to fetch.
     */
    where: order_counterWhereUniqueInput
  }

  /**
   * order_counter findFirst
   */
  export type order_counterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * Filter, which order_counter to fetch.
     */
    where?: order_counterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_counters to fetch.
     */
    orderBy?: order_counterOrderByWithRelationInput | order_counterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_counters.
     */
    cursor?: order_counterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_counters.
     */
    distinct?: Order_counterScalarFieldEnum | Order_counterScalarFieldEnum[]
  }

  /**
   * order_counter findFirstOrThrow
   */
  export type order_counterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * Filter, which order_counter to fetch.
     */
    where?: order_counterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_counters to fetch.
     */
    orderBy?: order_counterOrderByWithRelationInput | order_counterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_counters.
     */
    cursor?: order_counterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_counters.
     */
    distinct?: Order_counterScalarFieldEnum | Order_counterScalarFieldEnum[]
  }

  /**
   * order_counter findMany
   */
  export type order_counterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * Filter, which order_counters to fetch.
     */
    where?: order_counterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_counters to fetch.
     */
    orderBy?: order_counterOrderByWithRelationInput | order_counterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing order_counters.
     */
    cursor?: order_counterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_counters.
     */
    skip?: number
    distinct?: Order_counterScalarFieldEnum | Order_counterScalarFieldEnum[]
  }

  /**
   * order_counter create
   */
  export type order_counterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * The data needed to create a order_counter.
     */
    data?: XOR<order_counterCreateInput, order_counterUncheckedCreateInput>
  }

  /**
   * order_counter createMany
   */
  export type order_counterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many order_counters.
     */
    data: order_counterCreateManyInput | order_counterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order_counter createManyAndReturn
   */
  export type order_counterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * The data used to create many order_counters.
     */
    data: order_counterCreateManyInput | order_counterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order_counter update
   */
  export type order_counterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * The data needed to update a order_counter.
     */
    data: XOR<order_counterUpdateInput, order_counterUncheckedUpdateInput>
    /**
     * Choose, which order_counter to update.
     */
    where: order_counterWhereUniqueInput
  }

  /**
   * order_counter updateMany
   */
  export type order_counterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update order_counters.
     */
    data: XOR<order_counterUpdateManyMutationInput, order_counterUncheckedUpdateManyInput>
    /**
     * Filter which order_counters to update
     */
    where?: order_counterWhereInput
    /**
     * Limit how many order_counters to update.
     */
    limit?: number
  }

  /**
   * order_counter updateManyAndReturn
   */
  export type order_counterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * The data used to update order_counters.
     */
    data: XOR<order_counterUpdateManyMutationInput, order_counterUncheckedUpdateManyInput>
    /**
     * Filter which order_counters to update
     */
    where?: order_counterWhereInput
    /**
     * Limit how many order_counters to update.
     */
    limit?: number
  }

  /**
   * order_counter upsert
   */
  export type order_counterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * The filter to search for the order_counter to update in case it exists.
     */
    where: order_counterWhereUniqueInput
    /**
     * In case the order_counter found by the `where` argument doesn't exist, create a new order_counter with this data.
     */
    create: XOR<order_counterCreateInput, order_counterUncheckedCreateInput>
    /**
     * In case the order_counter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<order_counterUpdateInput, order_counterUncheckedUpdateInput>
  }

  /**
   * order_counter delete
   */
  export type order_counterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
    /**
     * Filter which order_counter to delete.
     */
    where: order_counterWhereUniqueInput
  }

  /**
   * order_counter deleteMany
   */
  export type order_counterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_counters to delete
     */
    where?: order_counterWhereInput
    /**
     * Limit how many order_counters to delete.
     */
    limit?: number
  }

  /**
   * order_counter without action
   */
  export type order_counterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_counter
     */
    select?: order_counterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_counter
     */
    omit?: order_counterOmit<ExtArgs> | null
  }


  /**
   * Model order_items
   */

  export type AggregateOrder_items = {
    _count: Order_itemsCountAggregateOutputType | null
    _avg: Order_itemsAvgAggregateOutputType | null
    _sum: Order_itemsSumAggregateOutputType | null
    _min: Order_itemsMinAggregateOutputType | null
    _max: Order_itemsMaxAggregateOutputType | null
  }

  export type Order_itemsAvgAggregateOutputType = {
    id: number | null
    order_id: number | null
    quantity: number | null
    individual_price: number | null
  }

  export type Order_itemsSumAggregateOutputType = {
    id: number | null
    order_id: number | null
    quantity: number | null
    individual_price: number | null
  }

  export type Order_itemsMinAggregateOutputType = {
    id: number | null
    order_id: number | null
    product_id: string | null
    quantity: number | null
    user_customization_type: string | null
    user_customization_value: string | null
    individual_price: number | null
  }

  export type Order_itemsMaxAggregateOutputType = {
    id: number | null
    order_id: number | null
    product_id: string | null
    quantity: number | null
    user_customization_type: string | null
    user_customization_value: string | null
    individual_price: number | null
  }

  export type Order_itemsCountAggregateOutputType = {
    id: number
    order_id: number
    product_id: number
    quantity: number
    selected_customizations: number
    user_customization_type: number
    user_customization_value: number
    individual_price: number
    _all: number
  }


  export type Order_itemsAvgAggregateInputType = {
    id?: true
    order_id?: true
    quantity?: true
    individual_price?: true
  }

  export type Order_itemsSumAggregateInputType = {
    id?: true
    order_id?: true
    quantity?: true
    individual_price?: true
  }

  export type Order_itemsMinAggregateInputType = {
    id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    user_customization_type?: true
    user_customization_value?: true
    individual_price?: true
  }

  export type Order_itemsMaxAggregateInputType = {
    id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    user_customization_type?: true
    user_customization_value?: true
    individual_price?: true
  }

  export type Order_itemsCountAggregateInputType = {
    id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    selected_customizations?: true
    user_customization_type?: true
    user_customization_value?: true
    individual_price?: true
    _all?: true
  }

  export type Order_itemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_items to aggregate.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned order_items
    **/
    _count?: true | Order_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_itemsMaxAggregateInputType
  }

  export type GetOrder_itemsAggregateType<T extends Order_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_items[P]>
      : GetScalarType<T[P], AggregateOrder_items[P]>
  }




  export type order_itemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemsWhereInput
    orderBy?: order_itemsOrderByWithAggregationInput | order_itemsOrderByWithAggregationInput[]
    by: Order_itemsScalarFieldEnum[] | Order_itemsScalarFieldEnum
    having?: order_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_itemsCountAggregateInputType | true
    _avg?: Order_itemsAvgAggregateInputType
    _sum?: Order_itemsSumAggregateInputType
    _min?: Order_itemsMinAggregateInputType
    _max?: Order_itemsMaxAggregateInputType
  }

  export type Order_itemsGroupByOutputType = {
    id: number
    order_id: number | null
    product_id: string
    quantity: number
    selected_customizations: JsonValue | null
    user_customization_type: string | null
    user_customization_value: string | null
    individual_price: number
    _count: Order_itemsCountAggregateOutputType | null
    _avg: Order_itemsAvgAggregateOutputType | null
    _sum: Order_itemsSumAggregateOutputType | null
    _min: Order_itemsMinAggregateOutputType | null
    _max: Order_itemsMaxAggregateOutputType | null
  }

  type GetOrder_itemsGroupByPayload<T extends order_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Order_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Order_itemsGroupByOutputType[P]>
        }
      >
    >


  export type order_itemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    selected_customizations?: boolean
    user_customization_type?: boolean
    user_customization_value?: boolean
    individual_price?: boolean
    orders?: boolean | order_items$ordersArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_items"]>

  export type order_itemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    selected_customizations?: boolean
    user_customization_type?: boolean
    user_customization_value?: boolean
    individual_price?: boolean
    orders?: boolean | order_items$ordersArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_items"]>

  export type order_itemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    selected_customizations?: boolean
    user_customization_type?: boolean
    user_customization_value?: boolean
    individual_price?: boolean
    orders?: boolean | order_items$ordersArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_items"]>

  export type order_itemsSelectScalar = {
    id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    selected_customizations?: boolean
    user_customization_type?: boolean
    user_customization_value?: boolean
    individual_price?: boolean
  }

  export type order_itemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order_id" | "product_id" | "quantity" | "selected_customizations" | "user_customization_type" | "user_customization_value" | "individual_price", ExtArgs["result"]["order_items"]>
  export type order_itemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | order_items$ordersArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type order_itemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | order_items$ordersArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type order_itemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | order_items$ordersArgs<ExtArgs>
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $order_itemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order_items"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs> | null
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_id: number | null
      product_id: string
      quantity: number
      selected_customizations: Prisma.JsonValue | null
      user_customization_type: string | null
      user_customization_value: string | null
      individual_price: number
    }, ExtArgs["result"]["order_items"]>
    composites: {}
  }

  type order_itemsGetPayload<S extends boolean | null | undefined | order_itemsDefaultArgs> = $Result.GetResult<Prisma.$order_itemsPayload, S>

  type order_itemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<order_itemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Order_itemsCountAggregateInputType | true
    }

  export interface order_itemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order_items'], meta: { name: 'order_items' } }
    /**
     * Find zero or one Order_items that matches the filter.
     * @param {order_itemsFindUniqueArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends order_itemsFindUniqueArgs>(args: SelectSubset<T, order_itemsFindUniqueArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order_items that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {order_itemsFindUniqueOrThrowArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends order_itemsFindUniqueOrThrowArgs>(args: SelectSubset<T, order_itemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsFindFirstArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends order_itemsFindFirstArgs>(args?: SelectSubset<T, order_itemsFindFirstArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsFindFirstOrThrowArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends order_itemsFindFirstOrThrowArgs>(args?: SelectSubset<T, order_itemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_items
     * const order_items = await prisma.order_items.findMany()
     * 
     * // Get first 10 Order_items
     * const order_items = await prisma.order_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const order_itemsWithIdOnly = await prisma.order_items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends order_itemsFindManyArgs>(args?: SelectSubset<T, order_itemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order_items.
     * @param {order_itemsCreateArgs} args - Arguments to create a Order_items.
     * @example
     * // Create one Order_items
     * const Order_items = await prisma.order_items.create({
     *   data: {
     *     // ... data to create a Order_items
     *   }
     * })
     * 
     */
    create<T extends order_itemsCreateArgs>(args: SelectSubset<T, order_itemsCreateArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Order_items.
     * @param {order_itemsCreateManyArgs} args - Arguments to create many Order_items.
     * @example
     * // Create many Order_items
     * const order_items = await prisma.order_items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends order_itemsCreateManyArgs>(args?: SelectSubset<T, order_itemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Order_items and returns the data saved in the database.
     * @param {order_itemsCreateManyAndReturnArgs} args - Arguments to create many Order_items.
     * @example
     * // Create many Order_items
     * const order_items = await prisma.order_items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Order_items and only return the `id`
     * const order_itemsWithIdOnly = await prisma.order_items.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends order_itemsCreateManyAndReturnArgs>(args?: SelectSubset<T, order_itemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order_items.
     * @param {order_itemsDeleteArgs} args - Arguments to delete one Order_items.
     * @example
     * // Delete one Order_items
     * const Order_items = await prisma.order_items.delete({
     *   where: {
     *     // ... filter to delete one Order_items
     *   }
     * })
     * 
     */
    delete<T extends order_itemsDeleteArgs>(args: SelectSubset<T, order_itemsDeleteArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order_items.
     * @param {order_itemsUpdateArgs} args - Arguments to update one Order_items.
     * @example
     * // Update one Order_items
     * const order_items = await prisma.order_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends order_itemsUpdateArgs>(args: SelectSubset<T, order_itemsUpdateArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Order_items.
     * @param {order_itemsDeleteManyArgs} args - Arguments to filter Order_items to delete.
     * @example
     * // Delete a few Order_items
     * const { count } = await prisma.order_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends order_itemsDeleteManyArgs>(args?: SelectSubset<T, order_itemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_items
     * const order_items = await prisma.order_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends order_itemsUpdateManyArgs>(args: SelectSubset<T, order_itemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_items and returns the data updated in the database.
     * @param {order_itemsUpdateManyAndReturnArgs} args - Arguments to update many Order_items.
     * @example
     * // Update many Order_items
     * const order_items = await prisma.order_items.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Order_items and only return the `id`
     * const order_itemsWithIdOnly = await prisma.order_items.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends order_itemsUpdateManyAndReturnArgs>(args: SelectSubset<T, order_itemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order_items.
     * @param {order_itemsUpsertArgs} args - Arguments to update or create a Order_items.
     * @example
     * // Update or create a Order_items
     * const order_items = await prisma.order_items.upsert({
     *   create: {
     *     // ... data to create a Order_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_items we want to update
     *   }
     * })
     */
    upsert<T extends order_itemsUpsertArgs>(args: SelectSubset<T, order_itemsUpsertArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsCountArgs} args - Arguments to filter Order_items to count.
     * @example
     * // Count the number of Order_items
     * const count = await prisma.order_items.count({
     *   where: {
     *     // ... the filter for the Order_items we want to count
     *   }
     * })
    **/
    count<T extends order_itemsCountArgs>(
      args?: Subset<T, order_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_itemsAggregateArgs>(args: Subset<T, Order_itemsAggregateArgs>): Prisma.PrismaPromise<GetOrder_itemsAggregateType<T>>

    /**
     * Group by Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends order_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: order_itemsGroupByArgs['orderBy'] }
        : { orderBy?: order_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, order_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order_items model
   */
  readonly fields: order_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__order_itemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends order_items$ordersArgs<ExtArgs> = {}>(args?: Subset<T, order_items$ordersArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the order_items model
   */
  interface order_itemsFieldRefs {
    readonly id: FieldRef<"order_items", 'Int'>
    readonly order_id: FieldRef<"order_items", 'Int'>
    readonly product_id: FieldRef<"order_items", 'String'>
    readonly quantity: FieldRef<"order_items", 'Int'>
    readonly selected_customizations: FieldRef<"order_items", 'Json'>
    readonly user_customization_type: FieldRef<"order_items", 'String'>
    readonly user_customization_value: FieldRef<"order_items", 'String'>
    readonly individual_price: FieldRef<"order_items", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * order_items findUnique
   */
  export type order_itemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items findUniqueOrThrow
   */
  export type order_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items findFirst
   */
  export type order_itemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_items.
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_items.
     */
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * order_items findFirstOrThrow
   */
  export type order_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_items.
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_items.
     */
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * order_items findMany
   */
  export type order_itemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing order_items.
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * order_items create
   */
  export type order_itemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a order_items.
     */
    data: XOR<order_itemsCreateInput, order_itemsUncheckedCreateInput>
  }

  /**
   * order_items createMany
   */
  export type order_itemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many order_items.
     */
    data: order_itemsCreateManyInput | order_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order_items createManyAndReturn
   */
  export type order_itemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * The data used to create many order_items.
     */
    data: order_itemsCreateManyInput | order_itemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * order_items update
   */
  export type order_itemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a order_items.
     */
    data: XOR<order_itemsUpdateInput, order_itemsUncheckedUpdateInput>
    /**
     * Choose, which order_items to update.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items updateMany
   */
  export type order_itemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update order_items.
     */
    data: XOR<order_itemsUpdateManyMutationInput, order_itemsUncheckedUpdateManyInput>
    /**
     * Filter which order_items to update
     */
    where?: order_itemsWhereInput
    /**
     * Limit how many order_items to update.
     */
    limit?: number
  }

  /**
   * order_items updateManyAndReturn
   */
  export type order_itemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * The data used to update order_items.
     */
    data: XOR<order_itemsUpdateManyMutationInput, order_itemsUncheckedUpdateManyInput>
    /**
     * Filter which order_items to update
     */
    where?: order_itemsWhereInput
    /**
     * Limit how many order_items to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * order_items upsert
   */
  export type order_itemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the order_items to update in case it exists.
     */
    where: order_itemsWhereUniqueInput
    /**
     * In case the order_items found by the `where` argument doesn't exist, create a new order_items with this data.
     */
    create: XOR<order_itemsCreateInput, order_itemsUncheckedCreateInput>
    /**
     * In case the order_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<order_itemsUpdateInput, order_itemsUncheckedUpdateInput>
  }

  /**
   * order_items delete
   */
  export type order_itemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter which order_items to delete.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items deleteMany
   */
  export type order_itemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_items to delete
     */
    where?: order_itemsWhereInput
    /**
     * Limit how many order_items to delete.
     */
    limit?: number
  }

  /**
   * order_items.orders
   */
  export type order_items$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
  }

  /**
   * order_items without action
   */
  export type order_itemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
  }


  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    id: number | null
    total_price: number | null
    receipt_id: number | null
  }

  export type OrdersSumAggregateOutputType = {
    id: number | null
    total_price: number | null
    receipt_id: number | null
  }

  export type OrdersMinAggregateOutputType = {
    id: number | null
    order_id: string | null
    clerkId: string | null
    total_price: number | null
    status: string | null
    created_at: Date | null
    receipt_id: number | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: number | null
    order_id: string | null
    clerkId: string | null
    total_price: number | null
    status: string | null
    created_at: Date | null
    receipt_id: number | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    order_id: number
    clerkId: number
    total_price: number
    status: number
    created_at: number
    receipt_id: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    id?: true
    total_price?: true
    receipt_id?: true
  }

  export type OrdersSumAggregateInputType = {
    id?: true
    total_price?: true
    receipt_id?: true
  }

  export type OrdersMinAggregateInputType = {
    id?: true
    order_id?: true
    clerkId?: true
    total_price?: true
    status?: true
    created_at?: true
    receipt_id?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    order_id?: true
    clerkId?: true
    total_price?: true
    status?: true
    created_at?: true
    receipt_id?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    order_id?: true
    clerkId?: true
    total_price?: true
    status?: true
    created_at?: true
    receipt_id?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    id: number
    order_id: string | null
    clerkId: string | null
    total_price: number
    status: string | null
    created_at: Date | null
    receipt_id: number | null
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    clerkId?: boolean
    total_price?: boolean
    status?: boolean
    created_at?: boolean
    receipt_id?: boolean
    order_items?: boolean | orders$order_itemsArgs<ExtArgs>
    receipts?: boolean | orders$receiptsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    clerkId?: boolean
    total_price?: boolean
    status?: boolean
    created_at?: boolean
    receipt_id?: boolean
    receipts?: boolean | orders$receiptsArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    clerkId?: boolean
    total_price?: boolean
    status?: boolean
    created_at?: boolean
    receipt_id?: boolean
    receipts?: boolean | orders$receiptsArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    id?: boolean
    order_id?: boolean
    clerkId?: boolean
    total_price?: boolean
    status?: boolean
    created_at?: boolean
    receipt_id?: boolean
  }

  export type ordersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order_id" | "clerkId" | "total_price" | "status" | "created_at" | "receipt_id", ExtArgs["result"]["orders"]>
  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | orders$order_itemsArgs<ExtArgs>
    receipts?: boolean | orders$receiptsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ordersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipts?: boolean | orders$receiptsArgs<ExtArgs>
  }
  export type ordersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receipts?: boolean | orders$receiptsArgs<ExtArgs>
  }

  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      order_items: Prisma.$order_itemsPayload<ExtArgs>[]
      receipts: Prisma.$receiptsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_id: string | null
      clerkId: string | null
      total_price: number
      status: string | null
      created_at: Date | null
      receipt_id: number | null
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }

  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ordersFindUniqueArgs>(args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(args: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ordersFindFirstArgs>(args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ordersFindManyArgs>(args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
     */
    create<T extends ordersCreateArgs>(args: SelectSubset<T, ordersCreateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ordersCreateManyArgs>(args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {ordersCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const ordersWithIdOnly = await prisma.orders.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ordersCreateManyAndReturnArgs>(args?: SelectSubset<T, ordersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
     */
    delete<T extends ordersDeleteArgs>(args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ordersUpdateArgs>(args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ordersDeleteManyArgs>(args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ordersUpdateManyArgs>(args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {ordersUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const ordersWithIdOnly = await prisma.orders.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ordersUpdateManyAndReturnArgs>(args: SelectSubset<T, ordersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
     */
    upsert<T extends ordersUpsertArgs>(args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order_items<T extends orders$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, orders$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receipts<T extends orders$receiptsArgs<ExtArgs> = {}>(args?: Subset<T, orders$receiptsArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orders model
   */
  interface ordersFieldRefs {
    readonly id: FieldRef<"orders", 'Int'>
    readonly order_id: FieldRef<"orders", 'String'>
    readonly clerkId: FieldRef<"orders", 'String'>
    readonly total_price: FieldRef<"orders", 'Int'>
    readonly status: FieldRef<"orders", 'String'>
    readonly created_at: FieldRef<"orders", 'DateTime'>
    readonly receipt_id: FieldRef<"orders", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders createManyAndReturn
   */
  export type ordersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
    /**
     * Limit how many orders to update.
     */
    limit?: number
  }

  /**
   * orders updateManyAndReturn
   */
  export type ordersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
    /**
     * Limit how many orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
    /**
     * Limit how many orders to delete.
     */
    limit?: number
  }

  /**
   * orders.order_items
   */
  export type orders$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    where?: order_itemsWhereInput
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    cursor?: order_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * orders.receipts
   */
  export type orders$receiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    where?: receiptsWhereInput
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model product_reviews
   */

  export type AggregateProduct_reviews = {
    _count: Product_reviewsCountAggregateOutputType | null
    _avg: Product_reviewsAvgAggregateOutputType | null
    _sum: Product_reviewsSumAggregateOutputType | null
    _min: Product_reviewsMinAggregateOutputType | null
    _max: Product_reviewsMaxAggregateOutputType | null
  }

  export type Product_reviewsAvgAggregateOutputType = {
    id: number | null
    rating: number | null
  }

  export type Product_reviewsSumAggregateOutputType = {
    id: number | null
    rating: number | null
  }

  export type Product_reviewsMinAggregateOutputType = {
    id: number | null
    clerkId: string | null
    user_name: string | null
    product_id: string | null
    rating: number | null
    review_text: string | null
    created_at: Date | null
  }

  export type Product_reviewsMaxAggregateOutputType = {
    id: number | null
    clerkId: string | null
    user_name: string | null
    product_id: string | null
    rating: number | null
    review_text: string | null
    created_at: Date | null
  }

  export type Product_reviewsCountAggregateOutputType = {
    id: number
    clerkId: number
    user_name: number
    product_id: number
    rating: number
    review_text: number
    created_at: number
    _all: number
  }


  export type Product_reviewsAvgAggregateInputType = {
    id?: true
    rating?: true
  }

  export type Product_reviewsSumAggregateInputType = {
    id?: true
    rating?: true
  }

  export type Product_reviewsMinAggregateInputType = {
    id?: true
    clerkId?: true
    user_name?: true
    product_id?: true
    rating?: true
    review_text?: true
    created_at?: true
  }

  export type Product_reviewsMaxAggregateInputType = {
    id?: true
    clerkId?: true
    user_name?: true
    product_id?: true
    rating?: true
    review_text?: true
    created_at?: true
  }

  export type Product_reviewsCountAggregateInputType = {
    id?: true
    clerkId?: true
    user_name?: true
    product_id?: true
    rating?: true
    review_text?: true
    created_at?: true
    _all?: true
  }

  export type Product_reviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_reviews to aggregate.
     */
    where?: product_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: product_reviewsOrderByWithRelationInput | product_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_reviews
    **/
    _count?: true | Product_reviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_reviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_reviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_reviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_reviewsMaxAggregateInputType
  }

  export type GetProduct_reviewsAggregateType<T extends Product_reviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_reviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_reviews[P]>
      : GetScalarType<T[P], AggregateProduct_reviews[P]>
  }




  export type product_reviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_reviewsWhereInput
    orderBy?: product_reviewsOrderByWithAggregationInput | product_reviewsOrderByWithAggregationInput[]
    by: Product_reviewsScalarFieldEnum[] | Product_reviewsScalarFieldEnum
    having?: product_reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_reviewsCountAggregateInputType | true
    _avg?: Product_reviewsAvgAggregateInputType
    _sum?: Product_reviewsSumAggregateInputType
    _min?: Product_reviewsMinAggregateInputType
    _max?: Product_reviewsMaxAggregateInputType
  }

  export type Product_reviewsGroupByOutputType = {
    id: number
    clerkId: string
    user_name: string
    product_id: string
    rating: number
    review_text: string | null
    created_at: Date | null
    _count: Product_reviewsCountAggregateOutputType | null
    _avg: Product_reviewsAvgAggregateOutputType | null
    _sum: Product_reviewsSumAggregateOutputType | null
    _min: Product_reviewsMinAggregateOutputType | null
    _max: Product_reviewsMaxAggregateOutputType | null
  }

  type GetProduct_reviewsGroupByPayload<T extends product_reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_reviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_reviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_reviewsGroupByOutputType[P]>
            : GetScalarType<T[P], Product_reviewsGroupByOutputType[P]>
        }
      >
    >


  export type product_reviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    user_name?: boolean
    product_id?: boolean
    rating?: boolean
    review_text?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_reviews"]>

  export type product_reviewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    user_name?: boolean
    product_id?: boolean
    rating?: boolean
    review_text?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_reviews"]>

  export type product_reviewsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    user_name?: boolean
    product_id?: boolean
    rating?: boolean
    review_text?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_reviews"]>

  export type product_reviewsSelectScalar = {
    id?: boolean
    clerkId?: boolean
    user_name?: boolean
    product_id?: boolean
    rating?: boolean
    review_text?: boolean
    created_at?: boolean
  }

  export type product_reviewsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "user_name" | "product_id" | "rating" | "review_text" | "created_at", ExtArgs["result"]["product_reviews"]>
  export type product_reviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type product_reviewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type product_reviewsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $product_reviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_reviews"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clerkId: string
      user_name: string
      product_id: string
      rating: number
      review_text: string | null
      created_at: Date | null
    }, ExtArgs["result"]["product_reviews"]>
    composites: {}
  }

  type product_reviewsGetPayload<S extends boolean | null | undefined | product_reviewsDefaultArgs> = $Result.GetResult<Prisma.$product_reviewsPayload, S>

  type product_reviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<product_reviewsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Product_reviewsCountAggregateInputType | true
    }

  export interface product_reviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_reviews'], meta: { name: 'product_reviews' } }
    /**
     * Find zero or one Product_reviews that matches the filter.
     * @param {product_reviewsFindUniqueArgs} args - Arguments to find a Product_reviews
     * @example
     * // Get one Product_reviews
     * const product_reviews = await prisma.product_reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends product_reviewsFindUniqueArgs>(args: SelectSubset<T, product_reviewsFindUniqueArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product_reviews that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {product_reviewsFindUniqueOrThrowArgs} args - Arguments to find a Product_reviews
     * @example
     * // Get one Product_reviews
     * const product_reviews = await prisma.product_reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends product_reviewsFindUniqueOrThrowArgs>(args: SelectSubset<T, product_reviewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewsFindFirstArgs} args - Arguments to find a Product_reviews
     * @example
     * // Get one Product_reviews
     * const product_reviews = await prisma.product_reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends product_reviewsFindFirstArgs>(args?: SelectSubset<T, product_reviewsFindFirstArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product_reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewsFindFirstOrThrowArgs} args - Arguments to find a Product_reviews
     * @example
     * // Get one Product_reviews
     * const product_reviews = await prisma.product_reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends product_reviewsFindFirstOrThrowArgs>(args?: SelectSubset<T, product_reviewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Product_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_reviews
     * const product_reviews = await prisma.product_reviews.findMany()
     * 
     * // Get first 10 Product_reviews
     * const product_reviews = await prisma.product_reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_reviewsWithIdOnly = await prisma.product_reviews.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends product_reviewsFindManyArgs>(args?: SelectSubset<T, product_reviewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product_reviews.
     * @param {product_reviewsCreateArgs} args - Arguments to create a Product_reviews.
     * @example
     * // Create one Product_reviews
     * const Product_reviews = await prisma.product_reviews.create({
     *   data: {
     *     // ... data to create a Product_reviews
     *   }
     * })
     * 
     */
    create<T extends product_reviewsCreateArgs>(args: SelectSubset<T, product_reviewsCreateArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Product_reviews.
     * @param {product_reviewsCreateManyArgs} args - Arguments to create many Product_reviews.
     * @example
     * // Create many Product_reviews
     * const product_reviews = await prisma.product_reviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends product_reviewsCreateManyArgs>(args?: SelectSubset<T, product_reviewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Product_reviews and returns the data saved in the database.
     * @param {product_reviewsCreateManyAndReturnArgs} args - Arguments to create many Product_reviews.
     * @example
     * // Create many Product_reviews
     * const product_reviews = await prisma.product_reviews.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Product_reviews and only return the `id`
     * const product_reviewsWithIdOnly = await prisma.product_reviews.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends product_reviewsCreateManyAndReturnArgs>(args?: SelectSubset<T, product_reviewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product_reviews.
     * @param {product_reviewsDeleteArgs} args - Arguments to delete one Product_reviews.
     * @example
     * // Delete one Product_reviews
     * const Product_reviews = await prisma.product_reviews.delete({
     *   where: {
     *     // ... filter to delete one Product_reviews
     *   }
     * })
     * 
     */
    delete<T extends product_reviewsDeleteArgs>(args: SelectSubset<T, product_reviewsDeleteArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product_reviews.
     * @param {product_reviewsUpdateArgs} args - Arguments to update one Product_reviews.
     * @example
     * // Update one Product_reviews
     * const product_reviews = await prisma.product_reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends product_reviewsUpdateArgs>(args: SelectSubset<T, product_reviewsUpdateArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Product_reviews.
     * @param {product_reviewsDeleteManyArgs} args - Arguments to filter Product_reviews to delete.
     * @example
     * // Delete a few Product_reviews
     * const { count } = await prisma.product_reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends product_reviewsDeleteManyArgs>(args?: SelectSubset<T, product_reviewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_reviews
     * const product_reviews = await prisma.product_reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends product_reviewsUpdateManyArgs>(args: SelectSubset<T, product_reviewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_reviews and returns the data updated in the database.
     * @param {product_reviewsUpdateManyAndReturnArgs} args - Arguments to update many Product_reviews.
     * @example
     * // Update many Product_reviews
     * const product_reviews = await prisma.product_reviews.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Product_reviews and only return the `id`
     * const product_reviewsWithIdOnly = await prisma.product_reviews.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends product_reviewsUpdateManyAndReturnArgs>(args: SelectSubset<T, product_reviewsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product_reviews.
     * @param {product_reviewsUpsertArgs} args - Arguments to update or create a Product_reviews.
     * @example
     * // Update or create a Product_reviews
     * const product_reviews = await prisma.product_reviews.upsert({
     *   create: {
     *     // ... data to create a Product_reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_reviews we want to update
     *   }
     * })
     */
    upsert<T extends product_reviewsUpsertArgs>(args: SelectSubset<T, product_reviewsUpsertArgs<ExtArgs>>): Prisma__product_reviewsClient<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Product_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewsCountArgs} args - Arguments to filter Product_reviews to count.
     * @example
     * // Count the number of Product_reviews
     * const count = await prisma.product_reviews.count({
     *   where: {
     *     // ... the filter for the Product_reviews we want to count
     *   }
     * })
    **/
    count<T extends product_reviewsCountArgs>(
      args?: Subset<T, product_reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_reviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_reviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_reviewsAggregateArgs>(args: Subset<T, Product_reviewsAggregateArgs>): Prisma.PrismaPromise<GetProduct_reviewsAggregateType<T>>

    /**
     * Group by Product_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_reviewsGroupByArgs['orderBy'] }
        : { orderBy?: product_reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_reviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_reviews model
   */
  readonly fields: product_reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_reviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product_reviews model
   */
  interface product_reviewsFieldRefs {
    readonly id: FieldRef<"product_reviews", 'Int'>
    readonly clerkId: FieldRef<"product_reviews", 'String'>
    readonly user_name: FieldRef<"product_reviews", 'String'>
    readonly product_id: FieldRef<"product_reviews", 'String'>
    readonly rating: FieldRef<"product_reviews", 'Int'>
    readonly review_text: FieldRef<"product_reviews", 'String'>
    readonly created_at: FieldRef<"product_reviews", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * product_reviews findUnique
   */
  export type product_reviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which product_reviews to fetch.
     */
    where: product_reviewsWhereUniqueInput
  }

  /**
   * product_reviews findUniqueOrThrow
   */
  export type product_reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which product_reviews to fetch.
     */
    where: product_reviewsWhereUniqueInput
  }

  /**
   * product_reviews findFirst
   */
  export type product_reviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which product_reviews to fetch.
     */
    where?: product_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: product_reviewsOrderByWithRelationInput | product_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_reviews.
     */
    cursor?: product_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_reviews.
     */
    distinct?: Product_reviewsScalarFieldEnum | Product_reviewsScalarFieldEnum[]
  }

  /**
   * product_reviews findFirstOrThrow
   */
  export type product_reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which product_reviews to fetch.
     */
    where?: product_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: product_reviewsOrderByWithRelationInput | product_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_reviews.
     */
    cursor?: product_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_reviews.
     */
    distinct?: Product_reviewsScalarFieldEnum | Product_reviewsScalarFieldEnum[]
  }

  /**
   * product_reviews findMany
   */
  export type product_reviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which product_reviews to fetch.
     */
    where?: product_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_reviews to fetch.
     */
    orderBy?: product_reviewsOrderByWithRelationInput | product_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_reviews.
     */
    cursor?: product_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_reviews.
     */
    skip?: number
    distinct?: Product_reviewsScalarFieldEnum | Product_reviewsScalarFieldEnum[]
  }

  /**
   * product_reviews create
   */
  export type product_reviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a product_reviews.
     */
    data: XOR<product_reviewsCreateInput, product_reviewsUncheckedCreateInput>
  }

  /**
   * product_reviews createMany
   */
  export type product_reviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_reviews.
     */
    data: product_reviewsCreateManyInput | product_reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_reviews createManyAndReturn
   */
  export type product_reviewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * The data used to create many product_reviews.
     */
    data: product_reviewsCreateManyInput | product_reviewsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * product_reviews update
   */
  export type product_reviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a product_reviews.
     */
    data: XOR<product_reviewsUpdateInput, product_reviewsUncheckedUpdateInput>
    /**
     * Choose, which product_reviews to update.
     */
    where: product_reviewsWhereUniqueInput
  }

  /**
   * product_reviews updateMany
   */
  export type product_reviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_reviews.
     */
    data: XOR<product_reviewsUpdateManyMutationInput, product_reviewsUncheckedUpdateManyInput>
    /**
     * Filter which product_reviews to update
     */
    where?: product_reviewsWhereInput
    /**
     * Limit how many product_reviews to update.
     */
    limit?: number
  }

  /**
   * product_reviews updateManyAndReturn
   */
  export type product_reviewsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * The data used to update product_reviews.
     */
    data: XOR<product_reviewsUpdateManyMutationInput, product_reviewsUncheckedUpdateManyInput>
    /**
     * Filter which product_reviews to update
     */
    where?: product_reviewsWhereInput
    /**
     * Limit how many product_reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * product_reviews upsert
   */
  export type product_reviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the product_reviews to update in case it exists.
     */
    where: product_reviewsWhereUniqueInput
    /**
     * In case the product_reviews found by the `where` argument doesn't exist, create a new product_reviews with this data.
     */
    create: XOR<product_reviewsCreateInput, product_reviewsUncheckedCreateInput>
    /**
     * In case the product_reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_reviewsUpdateInput, product_reviewsUncheckedUpdateInput>
  }

  /**
   * product_reviews delete
   */
  export type product_reviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    /**
     * Filter which product_reviews to delete.
     */
    where: product_reviewsWhereUniqueInput
  }

  /**
   * product_reviews deleteMany
   */
  export type product_reviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_reviews to delete
     */
    where?: product_reviewsWhereInput
    /**
     * Limit how many product_reviews to delete.
     */
    limit?: number
  }

  /**
   * product_reviews without action
   */
  export type product_reviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
  }


  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    price: number | null
    category_id: number | null
    average_rating: number | null
    weight: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    price: number | null
    category_id: number | null
    average_rating: number | null
    weight: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    main_image_url: string | null
    name: string | null
    price: number | null
    category_id: number | null
    description: string | null
    status: $Enums.productstatus | null
    average_rating: number | null
    created_at: Date | null
    weight: number | null
    material: string | null
    standard_delivery_time: string | null
    express_delivery_time: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    main_image_url: string | null
    name: string | null
    price: number | null
    category_id: number | null
    description: string | null
    status: $Enums.productstatus | null
    average_rating: number | null
    created_at: Date | null
    weight: number | null
    material: string | null
    standard_delivery_time: string | null
    express_delivery_time: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    product_id: number
    main_image_url: number
    side_images_url: number
    name: number
    price: number
    category_id: number
    description: number
    customization_options: number
    status: number
    average_rating: number
    created_at: number
    bulk_prices: number
    dimensions: number
    weight: number
    material: number
    standard_delivery_time: number
    express_delivery_time: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    price?: true
    category_id?: true
    average_rating?: true
    weight?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    price?: true
    category_id?: true
    average_rating?: true
    weight?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    product_id?: true
    main_image_url?: true
    name?: true
    price?: true
    category_id?: true
    description?: true
    status?: true
    average_rating?: true
    created_at?: true
    weight?: true
    material?: true
    standard_delivery_time?: true
    express_delivery_time?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    product_id?: true
    main_image_url?: true
    name?: true
    price?: true
    category_id?: true
    description?: true
    status?: true
    average_rating?: true
    created_at?: true
    weight?: true
    material?: true
    standard_delivery_time?: true
    express_delivery_time?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    product_id?: true
    main_image_url?: true
    side_images_url?: true
    name?: true
    price?: true
    category_id?: true
    description?: true
    customization_options?: true
    status?: true
    average_rating?: true
    created_at?: true
    bulk_prices?: true
    dimensions?: true
    weight?: true
    material?: true
    standard_delivery_time?: true
    express_delivery_time?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: number
    product_id: string
    main_image_url: string
    side_images_url: JsonValue | null
    name: string
    price: number
    category_id: number
    description: string | null
    customization_options: JsonValue | null
    status: $Enums.productstatus
    average_rating: number | null
    created_at: Date | null
    bulk_prices: JsonValue | null
    dimensions: JsonValue | null
    weight: number | null
    material: string | null
    standard_delivery_time: string | null
    express_delivery_time: string | null
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    main_image_url?: boolean
    side_images_url?: boolean
    name?: boolean
    price?: boolean
    category_id?: boolean
    description?: boolean
    customization_options?: boolean
    status?: boolean
    average_rating?: boolean
    created_at?: boolean
    bulk_prices?: boolean
    dimensions?: boolean
    weight?: boolean
    material?: boolean
    standard_delivery_time?: boolean
    express_delivery_time?: boolean
    bestselling?: boolean | products$bestsellingArgs<ExtArgs>
    new_arrivals?: boolean | products$new_arrivalsArgs<ExtArgs>
    on_sale?: boolean | products$on_saleArgs<ExtArgs>
    order_items?: boolean | products$order_itemsArgs<ExtArgs>
    product_reviews?: boolean | products$product_reviewsArgs<ExtArgs>
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
    shop_by_need?: boolean | products$shop_by_needArgs<ExtArgs>
    trending?: boolean | products$trendingArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    main_image_url?: boolean
    side_images_url?: boolean
    name?: boolean
    price?: boolean
    category_id?: boolean
    description?: boolean
    customization_options?: boolean
    status?: boolean
    average_rating?: boolean
    created_at?: boolean
    bulk_prices?: boolean
    dimensions?: boolean
    weight?: boolean
    material?: boolean
    standard_delivery_time?: boolean
    express_delivery_time?: boolean
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    main_image_url?: boolean
    side_images_url?: boolean
    name?: boolean
    price?: boolean
    category_id?: boolean
    description?: boolean
    customization_options?: boolean
    status?: boolean
    average_rating?: boolean
    created_at?: boolean
    bulk_prices?: boolean
    dimensions?: boolean
    weight?: boolean
    material?: boolean
    standard_delivery_time?: boolean
    express_delivery_time?: boolean
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    id?: boolean
    product_id?: boolean
    main_image_url?: boolean
    side_images_url?: boolean
    name?: boolean
    price?: boolean
    category_id?: boolean
    description?: boolean
    customization_options?: boolean
    status?: boolean
    average_rating?: boolean
    created_at?: boolean
    bulk_prices?: boolean
    dimensions?: boolean
    weight?: boolean
    material?: boolean
    standard_delivery_time?: boolean
    express_delivery_time?: boolean
  }

  export type productsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "main_image_url" | "side_images_url" | "name" | "price" | "category_id" | "description" | "customization_options" | "status" | "average_rating" | "created_at" | "bulk_prices" | "dimensions" | "weight" | "material" | "standard_delivery_time" | "express_delivery_time", ExtArgs["result"]["products"]>
  export type productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bestselling?: boolean | products$bestsellingArgs<ExtArgs>
    new_arrivals?: boolean | products$new_arrivalsArgs<ExtArgs>
    on_sale?: boolean | products$on_saleArgs<ExtArgs>
    order_items?: boolean | products$order_itemsArgs<ExtArgs>
    product_reviews?: boolean | products$product_reviewsArgs<ExtArgs>
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
    shop_by_need?: boolean | products$shop_by_needArgs<ExtArgs>
    trending?: boolean | products$trendingArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type productsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
  }
  export type productsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | categoriesDefaultArgs<ExtArgs>
  }

  export type $productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      bestselling: Prisma.$bestsellingPayload<ExtArgs> | null
      new_arrivals: Prisma.$new_arrivalsPayload<ExtArgs> | null
      on_sale: Prisma.$on_salePayload<ExtArgs> | null
      order_items: Prisma.$order_itemsPayload<ExtArgs>[]
      product_reviews: Prisma.$product_reviewsPayload<ExtArgs>[]
      categories: Prisma.$categoriesPayload<ExtArgs>
      shop_by_need: Prisma.$shop_by_needPayload<ExtArgs>[]
      trending: Prisma.$trendingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      main_image_url: string
      side_images_url: Prisma.JsonValue | null
      name: string
      price: number
      category_id: number
      description: string | null
      customization_options: Prisma.JsonValue | null
      status: $Enums.productstatus
      average_rating: number | null
      created_at: Date | null
      bulk_prices: Prisma.JsonValue | null
      dimensions: Prisma.JsonValue | null
      weight: number | null
      material: string | null
      standard_delivery_time: string | null
      express_delivery_time: string | null
    }, ExtArgs["result"]["products"]>
    composites: {}
  }

  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productsFindUniqueArgs>(args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Products that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs>(args: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productsFindFirstArgs>(args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs>(args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productsFindManyArgs>(args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
     */
    create<T extends productsCreateArgs>(args: SelectSubset<T, productsCreateArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {productsCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productsCreateManyArgs>(args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {productsCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productsWithIdOnly = await prisma.products.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends productsCreateManyAndReturnArgs>(args?: SelectSubset<T, productsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
     */
    delete<T extends productsDeleteArgs>(args: SelectSubset<T, productsDeleteArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productsUpdateArgs>(args: SelectSubset<T, productsUpdateArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productsDeleteManyArgs>(args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productsUpdateManyArgs>(args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {productsUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productsWithIdOnly = await prisma.products.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends productsUpdateManyAndReturnArgs>(args: SelectSubset<T, productsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
     */
    upsert<T extends productsUpsertArgs>(args: SelectSubset<T, productsUpsertArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bestselling<T extends products$bestsellingArgs<ExtArgs> = {}>(args?: Subset<T, products$bestsellingArgs<ExtArgs>>): Prisma__bestsellingClient<$Result.GetResult<Prisma.$bestsellingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    new_arrivals<T extends products$new_arrivalsArgs<ExtArgs> = {}>(args?: Subset<T, products$new_arrivalsArgs<ExtArgs>>): Prisma__new_arrivalsClient<$Result.GetResult<Prisma.$new_arrivalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    on_sale<T extends products$on_saleArgs<ExtArgs> = {}>(args?: Subset<T, products$on_saleArgs<ExtArgs>>): Prisma__on_saleClient<$Result.GetResult<Prisma.$on_salePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    order_items<T extends products$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, products$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    product_reviews<T extends products$product_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, products$product_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesDefaultArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shop_by_need<T extends products$shop_by_needArgs<ExtArgs> = {}>(args?: Subset<T, products$shop_by_needArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trending<T extends products$trendingArgs<ExtArgs> = {}>(args?: Subset<T, products$trendingArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the products model
   */
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'Int'>
    readonly product_id: FieldRef<"products", 'String'>
    readonly main_image_url: FieldRef<"products", 'String'>
    readonly side_images_url: FieldRef<"products", 'Json'>
    readonly name: FieldRef<"products", 'String'>
    readonly price: FieldRef<"products", 'Int'>
    readonly category_id: FieldRef<"products", 'Int'>
    readonly description: FieldRef<"products", 'String'>
    readonly customization_options: FieldRef<"products", 'Json'>
    readonly status: FieldRef<"products", 'productstatus'>
    readonly average_rating: FieldRef<"products", 'Float'>
    readonly created_at: FieldRef<"products", 'DateTime'>
    readonly bulk_prices: FieldRef<"products", 'Json'>
    readonly dimensions: FieldRef<"products", 'Json'>
    readonly weight: FieldRef<"products", 'Int'>
    readonly material: FieldRef<"products", 'String'>
    readonly standard_delivery_time: FieldRef<"products", 'String'>
    readonly express_delivery_time: FieldRef<"products", 'String'>
  }
    

  // Custom InputTypes
  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }

  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * products createManyAndReturn
   */
  export type productsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
    /**
     * Limit how many products to update.
     */
    limit?: number
  }

  /**
   * products updateManyAndReturn
   */
  export type productsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
    /**
     * Limit how many products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }

  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
    /**
     * Limit how many products to delete.
     */
    limit?: number
  }

  /**
   * products.bestselling
   */
  export type products$bestsellingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the bestselling
     */
    select?: bestsellingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the bestselling
     */
    omit?: bestsellingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: bestsellingInclude<ExtArgs> | null
    where?: bestsellingWhereInput
  }

  /**
   * products.new_arrivals
   */
  export type products$new_arrivalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the new_arrivals
     */
    select?: new_arrivalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the new_arrivals
     */
    omit?: new_arrivalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: new_arrivalsInclude<ExtArgs> | null
    where?: new_arrivalsWhereInput
  }

  /**
   * products.on_sale
   */
  export type products$on_saleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the on_sale
     */
    select?: on_saleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the on_sale
     */
    omit?: on_saleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: on_saleInclude<ExtArgs> | null
    where?: on_saleWhereInput
  }

  /**
   * products.order_items
   */
  export type products$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order_items
     */
    omit?: order_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    where?: order_itemsWhereInput
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    cursor?: order_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * products.product_reviews
   */
  export type products$product_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_reviews
     */
    select?: product_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product_reviews
     */
    omit?: product_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_reviewsInclude<ExtArgs> | null
    where?: product_reviewsWhereInput
    orderBy?: product_reviewsOrderByWithRelationInput | product_reviewsOrderByWithRelationInput[]
    cursor?: product_reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_reviewsScalarFieldEnum | Product_reviewsScalarFieldEnum[]
  }

  /**
   * products.shop_by_need
   */
  export type products$shop_by_needArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    where?: shop_by_needWhereInput
    orderBy?: shop_by_needOrderByWithRelationInput | shop_by_needOrderByWithRelationInput[]
    cursor?: shop_by_needWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Shop_by_needScalarFieldEnum | Shop_by_needScalarFieldEnum[]
  }

  /**
   * products.trending
   */
  export type products$trendingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    where?: trendingWhereInput
  }

  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the products
     */
    omit?: productsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
  }


  /**
   * Model receipts
   */

  export type AggregateReceipts = {
    _count: ReceiptsCountAggregateOutputType | null
    _avg: ReceiptsAvgAggregateOutputType | null
    _sum: ReceiptsSumAggregateOutputType | null
    _min: ReceiptsMinAggregateOutputType | null
    _max: ReceiptsMaxAggregateOutputType | null
  }

  export type ReceiptsAvgAggregateOutputType = {
    id: number | null
    amount_paid: number | null
  }

  export type ReceiptsSumAggregateOutputType = {
    id: number | null
    amount_paid: number | null
  }

  export type ReceiptsMinAggregateOutputType = {
    id: number | null
    payment_reference: string | null
    amount_paid: number | null
    created_at: Date | null
  }

  export type ReceiptsMaxAggregateOutputType = {
    id: number | null
    payment_reference: string | null
    amount_paid: number | null
    created_at: Date | null
  }

  export type ReceiptsCountAggregateOutputType = {
    id: number
    payment_reference: number
    amount_paid: number
    created_at: number
    _all: number
  }


  export type ReceiptsAvgAggregateInputType = {
    id?: true
    amount_paid?: true
  }

  export type ReceiptsSumAggregateInputType = {
    id?: true
    amount_paid?: true
  }

  export type ReceiptsMinAggregateInputType = {
    id?: true
    payment_reference?: true
    amount_paid?: true
    created_at?: true
  }

  export type ReceiptsMaxAggregateInputType = {
    id?: true
    payment_reference?: true
    amount_paid?: true
    created_at?: true
  }

  export type ReceiptsCountAggregateInputType = {
    id?: true
    payment_reference?: true
    amount_paid?: true
    created_at?: true
    _all?: true
  }

  export type ReceiptsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which receipts to aggregate.
     */
    where?: receiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receipts to fetch.
     */
    orderBy?: receiptsOrderByWithRelationInput | receiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: receiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned receipts
    **/
    _count?: true | ReceiptsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptsMaxAggregateInputType
  }

  export type GetReceiptsAggregateType<T extends ReceiptsAggregateArgs> = {
        [P in keyof T & keyof AggregateReceipts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceipts[P]>
      : GetScalarType<T[P], AggregateReceipts[P]>
  }




  export type receiptsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: receiptsWhereInput
    orderBy?: receiptsOrderByWithAggregationInput | receiptsOrderByWithAggregationInput[]
    by: ReceiptsScalarFieldEnum[] | ReceiptsScalarFieldEnum
    having?: receiptsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptsCountAggregateInputType | true
    _avg?: ReceiptsAvgAggregateInputType
    _sum?: ReceiptsSumAggregateInputType
    _min?: ReceiptsMinAggregateInputType
    _max?: ReceiptsMaxAggregateInputType
  }

  export type ReceiptsGroupByOutputType = {
    id: number
    payment_reference: string | null
    amount_paid: number | null
    created_at: Date | null
    _count: ReceiptsCountAggregateOutputType | null
    _avg: ReceiptsAvgAggregateOutputType | null
    _sum: ReceiptsSumAggregateOutputType | null
    _min: ReceiptsMinAggregateOutputType | null
    _max: ReceiptsMaxAggregateOutputType | null
  }

  type GetReceiptsGroupByPayload<T extends receiptsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptsGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptsGroupByOutputType[P]>
        }
      >
    >


  export type receiptsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payment_reference?: boolean
    amount_paid?: boolean
    created_at?: boolean
    orders?: boolean | receipts$ordersArgs<ExtArgs>
    _count?: boolean | ReceiptsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receipts"]>

  export type receiptsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payment_reference?: boolean
    amount_paid?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["receipts"]>

  export type receiptsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payment_reference?: boolean
    amount_paid?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["receipts"]>

  export type receiptsSelectScalar = {
    id?: boolean
    payment_reference?: boolean
    amount_paid?: boolean
    created_at?: boolean
  }

  export type receiptsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "payment_reference" | "amount_paid" | "created_at", ExtArgs["result"]["receipts"]>
  export type receiptsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | receipts$ordersArgs<ExtArgs>
    _count?: boolean | ReceiptsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type receiptsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type receiptsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $receiptsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "receipts"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      payment_reference: string | null
      amount_paid: number | null
      created_at: Date | null
    }, ExtArgs["result"]["receipts"]>
    composites: {}
  }

  type receiptsGetPayload<S extends boolean | null | undefined | receiptsDefaultArgs> = $Result.GetResult<Prisma.$receiptsPayload, S>

  type receiptsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<receiptsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptsCountAggregateInputType | true
    }

  export interface receiptsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['receipts'], meta: { name: 'receipts' } }
    /**
     * Find zero or one Receipts that matches the filter.
     * @param {receiptsFindUniqueArgs} args - Arguments to find a Receipts
     * @example
     * // Get one Receipts
     * const receipts = await prisma.receipts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends receiptsFindUniqueArgs>(args: SelectSubset<T, receiptsFindUniqueArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Receipts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {receiptsFindUniqueOrThrowArgs} args - Arguments to find a Receipts
     * @example
     * // Get one Receipts
     * const receipts = await prisma.receipts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends receiptsFindUniqueOrThrowArgs>(args: SelectSubset<T, receiptsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiptsFindFirstArgs} args - Arguments to find a Receipts
     * @example
     * // Get one Receipts
     * const receipts = await prisma.receipts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends receiptsFindFirstArgs>(args?: SelectSubset<T, receiptsFindFirstArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Receipts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiptsFindFirstOrThrowArgs} args - Arguments to find a Receipts
     * @example
     * // Get one Receipts
     * const receipts = await prisma.receipts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends receiptsFindFirstOrThrowArgs>(args?: SelectSubset<T, receiptsFindFirstOrThrowArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Receipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiptsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receipts
     * const receipts = await prisma.receipts.findMany()
     * 
     * // Get first 10 Receipts
     * const receipts = await prisma.receipts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptsWithIdOnly = await prisma.receipts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends receiptsFindManyArgs>(args?: SelectSubset<T, receiptsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Receipts.
     * @param {receiptsCreateArgs} args - Arguments to create a Receipts.
     * @example
     * // Create one Receipts
     * const Receipts = await prisma.receipts.create({
     *   data: {
     *     // ... data to create a Receipts
     *   }
     * })
     * 
     */
    create<T extends receiptsCreateArgs>(args: SelectSubset<T, receiptsCreateArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Receipts.
     * @param {receiptsCreateManyArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipts = await prisma.receipts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends receiptsCreateManyArgs>(args?: SelectSubset<T, receiptsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Receipts and returns the data saved in the database.
     * @param {receiptsCreateManyAndReturnArgs} args - Arguments to create many Receipts.
     * @example
     * // Create many Receipts
     * const receipts = await prisma.receipts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Receipts and only return the `id`
     * const receiptsWithIdOnly = await prisma.receipts.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends receiptsCreateManyAndReturnArgs>(args?: SelectSubset<T, receiptsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Receipts.
     * @param {receiptsDeleteArgs} args - Arguments to delete one Receipts.
     * @example
     * // Delete one Receipts
     * const Receipts = await prisma.receipts.delete({
     *   where: {
     *     // ... filter to delete one Receipts
     *   }
     * })
     * 
     */
    delete<T extends receiptsDeleteArgs>(args: SelectSubset<T, receiptsDeleteArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Receipts.
     * @param {receiptsUpdateArgs} args - Arguments to update one Receipts.
     * @example
     * // Update one Receipts
     * const receipts = await prisma.receipts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends receiptsUpdateArgs>(args: SelectSubset<T, receiptsUpdateArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Receipts.
     * @param {receiptsDeleteManyArgs} args - Arguments to filter Receipts to delete.
     * @example
     * // Delete a few Receipts
     * const { count } = await prisma.receipts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends receiptsDeleteManyArgs>(args?: SelectSubset<T, receiptsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiptsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receipts
     * const receipts = await prisma.receipts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends receiptsUpdateManyArgs>(args: SelectSubset<T, receiptsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receipts and returns the data updated in the database.
     * @param {receiptsUpdateManyAndReturnArgs} args - Arguments to update many Receipts.
     * @example
     * // Update many Receipts
     * const receipts = await prisma.receipts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Receipts and only return the `id`
     * const receiptsWithIdOnly = await prisma.receipts.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends receiptsUpdateManyAndReturnArgs>(args: SelectSubset<T, receiptsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Receipts.
     * @param {receiptsUpsertArgs} args - Arguments to update or create a Receipts.
     * @example
     * // Update or create a Receipts
     * const receipts = await prisma.receipts.upsert({
     *   create: {
     *     // ... data to create a Receipts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receipts we want to update
     *   }
     * })
     */
    upsert<T extends receiptsUpsertArgs>(args: SelectSubset<T, receiptsUpsertArgs<ExtArgs>>): Prisma__receiptsClient<$Result.GetResult<Prisma.$receiptsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiptsCountArgs} args - Arguments to filter Receipts to count.
     * @example
     * // Count the number of Receipts
     * const count = await prisma.receipts.count({
     *   where: {
     *     // ... the filter for the Receipts we want to count
     *   }
     * })
    **/
    count<T extends receiptsCountArgs>(
      args?: Subset<T, receiptsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptsAggregateArgs>(args: Subset<T, ReceiptsAggregateArgs>): Prisma.PrismaPromise<GetReceiptsAggregateType<T>>

    /**
     * Group by Receipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {receiptsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends receiptsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: receiptsGroupByArgs['orderBy'] }
        : { orderBy?: receiptsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, receiptsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the receipts model
   */
  readonly fields: receiptsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for receipts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__receiptsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends receipts$ordersArgs<ExtArgs> = {}>(args?: Subset<T, receipts$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the receipts model
   */
  interface receiptsFieldRefs {
    readonly id: FieldRef<"receipts", 'Int'>
    readonly payment_reference: FieldRef<"receipts", 'String'>
    readonly amount_paid: FieldRef<"receipts", 'Int'>
    readonly created_at: FieldRef<"receipts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * receipts findUnique
   */
  export type receiptsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * Filter, which receipts to fetch.
     */
    where: receiptsWhereUniqueInput
  }

  /**
   * receipts findUniqueOrThrow
   */
  export type receiptsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * Filter, which receipts to fetch.
     */
    where: receiptsWhereUniqueInput
  }

  /**
   * receipts findFirst
   */
  export type receiptsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * Filter, which receipts to fetch.
     */
    where?: receiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receipts to fetch.
     */
    orderBy?: receiptsOrderByWithRelationInput | receiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for receipts.
     */
    cursor?: receiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of receipts.
     */
    distinct?: ReceiptsScalarFieldEnum | ReceiptsScalarFieldEnum[]
  }

  /**
   * receipts findFirstOrThrow
   */
  export type receiptsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * Filter, which receipts to fetch.
     */
    where?: receiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receipts to fetch.
     */
    orderBy?: receiptsOrderByWithRelationInput | receiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for receipts.
     */
    cursor?: receiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of receipts.
     */
    distinct?: ReceiptsScalarFieldEnum | ReceiptsScalarFieldEnum[]
  }

  /**
   * receipts findMany
   */
  export type receiptsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * Filter, which receipts to fetch.
     */
    where?: receiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of receipts to fetch.
     */
    orderBy?: receiptsOrderByWithRelationInput | receiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing receipts.
     */
    cursor?: receiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` receipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` receipts.
     */
    skip?: number
    distinct?: ReceiptsScalarFieldEnum | ReceiptsScalarFieldEnum[]
  }

  /**
   * receipts create
   */
  export type receiptsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * The data needed to create a receipts.
     */
    data?: XOR<receiptsCreateInput, receiptsUncheckedCreateInput>
  }

  /**
   * receipts createMany
   */
  export type receiptsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many receipts.
     */
    data: receiptsCreateManyInput | receiptsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * receipts createManyAndReturn
   */
  export type receiptsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * The data used to create many receipts.
     */
    data: receiptsCreateManyInput | receiptsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * receipts update
   */
  export type receiptsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * The data needed to update a receipts.
     */
    data: XOR<receiptsUpdateInput, receiptsUncheckedUpdateInput>
    /**
     * Choose, which receipts to update.
     */
    where: receiptsWhereUniqueInput
  }

  /**
   * receipts updateMany
   */
  export type receiptsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update receipts.
     */
    data: XOR<receiptsUpdateManyMutationInput, receiptsUncheckedUpdateManyInput>
    /**
     * Filter which receipts to update
     */
    where?: receiptsWhereInput
    /**
     * Limit how many receipts to update.
     */
    limit?: number
  }

  /**
   * receipts updateManyAndReturn
   */
  export type receiptsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * The data used to update receipts.
     */
    data: XOR<receiptsUpdateManyMutationInput, receiptsUncheckedUpdateManyInput>
    /**
     * Filter which receipts to update
     */
    where?: receiptsWhereInput
    /**
     * Limit how many receipts to update.
     */
    limit?: number
  }

  /**
   * receipts upsert
   */
  export type receiptsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * The filter to search for the receipts to update in case it exists.
     */
    where: receiptsWhereUniqueInput
    /**
     * In case the receipts found by the `where` argument doesn't exist, create a new receipts with this data.
     */
    create: XOR<receiptsCreateInput, receiptsUncheckedCreateInput>
    /**
     * In case the receipts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<receiptsUpdateInput, receiptsUncheckedUpdateInput>
  }

  /**
   * receipts delete
   */
  export type receiptsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
    /**
     * Filter which receipts to delete.
     */
    where: receiptsWhereUniqueInput
  }

  /**
   * receipts deleteMany
   */
  export type receiptsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which receipts to delete
     */
    where?: receiptsWhereInput
    /**
     * Limit how many receipts to delete.
     */
    limit?: number
  }

  /**
   * receipts.orders
   */
  export type receipts$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orders
     */
    omit?: ordersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * receipts without action
   */
  export type receiptsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the receipts
     */
    select?: receiptsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the receipts
     */
    omit?: receiptsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: receiptsInclude<ExtArgs> | null
  }


  /**
   * Model shop_by_need
   */

  export type AggregateShop_by_need = {
    _count: Shop_by_needCountAggregateOutputType | null
    _avg: Shop_by_needAvgAggregateOutputType | null
    _sum: Shop_by_needSumAggregateOutputType | null
    _min: Shop_by_needMinAggregateOutputType | null
    _max: Shop_by_needMaxAggregateOutputType | null
  }

  export type Shop_by_needAvgAggregateOutputType = {
    id: number | null
  }

  export type Shop_by_needSumAggregateOutputType = {
    id: number | null
  }

  export type Shop_by_needMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    need: string | null
    created_at: Date | null
  }

  export type Shop_by_needMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    need: string | null
    created_at: Date | null
  }

  export type Shop_by_needCountAggregateOutputType = {
    id: number
    product_id: number
    need: number
    created_at: number
    _all: number
  }


  export type Shop_by_needAvgAggregateInputType = {
    id?: true
  }

  export type Shop_by_needSumAggregateInputType = {
    id?: true
  }

  export type Shop_by_needMinAggregateInputType = {
    id?: true
    product_id?: true
    need?: true
    created_at?: true
  }

  export type Shop_by_needMaxAggregateInputType = {
    id?: true
    product_id?: true
    need?: true
    created_at?: true
  }

  export type Shop_by_needCountAggregateInputType = {
    id?: true
    product_id?: true
    need?: true
    created_at?: true
    _all?: true
  }

  export type Shop_by_needAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shop_by_need to aggregate.
     */
    where?: shop_by_needWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shop_by_needs to fetch.
     */
    orderBy?: shop_by_needOrderByWithRelationInput | shop_by_needOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: shop_by_needWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shop_by_needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shop_by_needs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shop_by_needs
    **/
    _count?: true | Shop_by_needCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Shop_by_needAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Shop_by_needSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Shop_by_needMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Shop_by_needMaxAggregateInputType
  }

  export type GetShop_by_needAggregateType<T extends Shop_by_needAggregateArgs> = {
        [P in keyof T & keyof AggregateShop_by_need]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop_by_need[P]>
      : GetScalarType<T[P], AggregateShop_by_need[P]>
  }




  export type shop_by_needGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: shop_by_needWhereInput
    orderBy?: shop_by_needOrderByWithAggregationInput | shop_by_needOrderByWithAggregationInput[]
    by: Shop_by_needScalarFieldEnum[] | Shop_by_needScalarFieldEnum
    having?: shop_by_needScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Shop_by_needCountAggregateInputType | true
    _avg?: Shop_by_needAvgAggregateInputType
    _sum?: Shop_by_needSumAggregateInputType
    _min?: Shop_by_needMinAggregateInputType
    _max?: Shop_by_needMaxAggregateInputType
  }

  export type Shop_by_needGroupByOutputType = {
    id: number
    product_id: string
    need: string
    created_at: Date | null
    _count: Shop_by_needCountAggregateOutputType | null
    _avg: Shop_by_needAvgAggregateOutputType | null
    _sum: Shop_by_needSumAggregateOutputType | null
    _min: Shop_by_needMinAggregateOutputType | null
    _max: Shop_by_needMaxAggregateOutputType | null
  }

  type GetShop_by_needGroupByPayload<T extends shop_by_needGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Shop_by_needGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Shop_by_needGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Shop_by_needGroupByOutputType[P]>
            : GetScalarType<T[P], Shop_by_needGroupByOutputType[P]>
        }
      >
    >


  export type shop_by_needSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    need?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop_by_need"]>

  export type shop_by_needSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    need?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop_by_need"]>

  export type shop_by_needSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    need?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shop_by_need"]>

  export type shop_by_needSelectScalar = {
    id?: boolean
    product_id?: boolean
    need?: boolean
    created_at?: boolean
  }

  export type shop_by_needOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "need" | "created_at", ExtArgs["result"]["shop_by_need"]>
  export type shop_by_needInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type shop_by_needIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type shop_by_needIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $shop_by_needPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "shop_by_need"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      need: string
      created_at: Date | null
    }, ExtArgs["result"]["shop_by_need"]>
    composites: {}
  }

  type shop_by_needGetPayload<S extends boolean | null | undefined | shop_by_needDefaultArgs> = $Result.GetResult<Prisma.$shop_by_needPayload, S>

  type shop_by_needCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<shop_by_needFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Shop_by_needCountAggregateInputType | true
    }

  export interface shop_by_needDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['shop_by_need'], meta: { name: 'shop_by_need' } }
    /**
     * Find zero or one Shop_by_need that matches the filter.
     * @param {shop_by_needFindUniqueArgs} args - Arguments to find a Shop_by_need
     * @example
     * // Get one Shop_by_need
     * const shop_by_need = await prisma.shop_by_need.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends shop_by_needFindUniqueArgs>(args: SelectSubset<T, shop_by_needFindUniqueArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Shop_by_need that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {shop_by_needFindUniqueOrThrowArgs} args - Arguments to find a Shop_by_need
     * @example
     * // Get one Shop_by_need
     * const shop_by_need = await prisma.shop_by_need.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends shop_by_needFindUniqueOrThrowArgs>(args: SelectSubset<T, shop_by_needFindUniqueOrThrowArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shop_by_need that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shop_by_needFindFirstArgs} args - Arguments to find a Shop_by_need
     * @example
     * // Get one Shop_by_need
     * const shop_by_need = await prisma.shop_by_need.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends shop_by_needFindFirstArgs>(args?: SelectSubset<T, shop_by_needFindFirstArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Shop_by_need that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shop_by_needFindFirstOrThrowArgs} args - Arguments to find a Shop_by_need
     * @example
     * // Get one Shop_by_need
     * const shop_by_need = await prisma.shop_by_need.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends shop_by_needFindFirstOrThrowArgs>(args?: SelectSubset<T, shop_by_needFindFirstOrThrowArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Shop_by_needs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shop_by_needFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shop_by_needs
     * const shop_by_needs = await prisma.shop_by_need.findMany()
     * 
     * // Get first 10 Shop_by_needs
     * const shop_by_needs = await prisma.shop_by_need.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shop_by_needWithIdOnly = await prisma.shop_by_need.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends shop_by_needFindManyArgs>(args?: SelectSubset<T, shop_by_needFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Shop_by_need.
     * @param {shop_by_needCreateArgs} args - Arguments to create a Shop_by_need.
     * @example
     * // Create one Shop_by_need
     * const Shop_by_need = await prisma.shop_by_need.create({
     *   data: {
     *     // ... data to create a Shop_by_need
     *   }
     * })
     * 
     */
    create<T extends shop_by_needCreateArgs>(args: SelectSubset<T, shop_by_needCreateArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Shop_by_needs.
     * @param {shop_by_needCreateManyArgs} args - Arguments to create many Shop_by_needs.
     * @example
     * // Create many Shop_by_needs
     * const shop_by_need = await prisma.shop_by_need.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends shop_by_needCreateManyArgs>(args?: SelectSubset<T, shop_by_needCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shop_by_needs and returns the data saved in the database.
     * @param {shop_by_needCreateManyAndReturnArgs} args - Arguments to create many Shop_by_needs.
     * @example
     * // Create many Shop_by_needs
     * const shop_by_need = await prisma.shop_by_need.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shop_by_needs and only return the `id`
     * const shop_by_needWithIdOnly = await prisma.shop_by_need.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends shop_by_needCreateManyAndReturnArgs>(args?: SelectSubset<T, shop_by_needCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Shop_by_need.
     * @param {shop_by_needDeleteArgs} args - Arguments to delete one Shop_by_need.
     * @example
     * // Delete one Shop_by_need
     * const Shop_by_need = await prisma.shop_by_need.delete({
     *   where: {
     *     // ... filter to delete one Shop_by_need
     *   }
     * })
     * 
     */
    delete<T extends shop_by_needDeleteArgs>(args: SelectSubset<T, shop_by_needDeleteArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Shop_by_need.
     * @param {shop_by_needUpdateArgs} args - Arguments to update one Shop_by_need.
     * @example
     * // Update one Shop_by_need
     * const shop_by_need = await prisma.shop_by_need.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends shop_by_needUpdateArgs>(args: SelectSubset<T, shop_by_needUpdateArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Shop_by_needs.
     * @param {shop_by_needDeleteManyArgs} args - Arguments to filter Shop_by_needs to delete.
     * @example
     * // Delete a few Shop_by_needs
     * const { count } = await prisma.shop_by_need.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends shop_by_needDeleteManyArgs>(args?: SelectSubset<T, shop_by_needDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shop_by_needs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shop_by_needUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shop_by_needs
     * const shop_by_need = await prisma.shop_by_need.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends shop_by_needUpdateManyArgs>(args: SelectSubset<T, shop_by_needUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shop_by_needs and returns the data updated in the database.
     * @param {shop_by_needUpdateManyAndReturnArgs} args - Arguments to update many Shop_by_needs.
     * @example
     * // Update many Shop_by_needs
     * const shop_by_need = await prisma.shop_by_need.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Shop_by_needs and only return the `id`
     * const shop_by_needWithIdOnly = await prisma.shop_by_need.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends shop_by_needUpdateManyAndReturnArgs>(args: SelectSubset<T, shop_by_needUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Shop_by_need.
     * @param {shop_by_needUpsertArgs} args - Arguments to update or create a Shop_by_need.
     * @example
     * // Update or create a Shop_by_need
     * const shop_by_need = await prisma.shop_by_need.upsert({
     *   create: {
     *     // ... data to create a Shop_by_need
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop_by_need we want to update
     *   }
     * })
     */
    upsert<T extends shop_by_needUpsertArgs>(args: SelectSubset<T, shop_by_needUpsertArgs<ExtArgs>>): Prisma__shop_by_needClient<$Result.GetResult<Prisma.$shop_by_needPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Shop_by_needs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shop_by_needCountArgs} args - Arguments to filter Shop_by_needs to count.
     * @example
     * // Count the number of Shop_by_needs
     * const count = await prisma.shop_by_need.count({
     *   where: {
     *     // ... the filter for the Shop_by_needs we want to count
     *   }
     * })
    **/
    count<T extends shop_by_needCountArgs>(
      args?: Subset<T, shop_by_needCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Shop_by_needCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop_by_need.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Shop_by_needAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Shop_by_needAggregateArgs>(args: Subset<T, Shop_by_needAggregateArgs>): Prisma.PrismaPromise<GetShop_by_needAggregateType<T>>

    /**
     * Group by Shop_by_need.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shop_by_needGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends shop_by_needGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: shop_by_needGroupByArgs['orderBy'] }
        : { orderBy?: shop_by_needGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, shop_by_needGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShop_by_needGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the shop_by_need model
   */
  readonly fields: shop_by_needFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for shop_by_need.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__shop_by_needClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the shop_by_need model
   */
  interface shop_by_needFieldRefs {
    readonly id: FieldRef<"shop_by_need", 'Int'>
    readonly product_id: FieldRef<"shop_by_need", 'String'>
    readonly need: FieldRef<"shop_by_need", 'String'>
    readonly created_at: FieldRef<"shop_by_need", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * shop_by_need findUnique
   */
  export type shop_by_needFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * Filter, which shop_by_need to fetch.
     */
    where: shop_by_needWhereUniqueInput
  }

  /**
   * shop_by_need findUniqueOrThrow
   */
  export type shop_by_needFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * Filter, which shop_by_need to fetch.
     */
    where: shop_by_needWhereUniqueInput
  }

  /**
   * shop_by_need findFirst
   */
  export type shop_by_needFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * Filter, which shop_by_need to fetch.
     */
    where?: shop_by_needWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shop_by_needs to fetch.
     */
    orderBy?: shop_by_needOrderByWithRelationInput | shop_by_needOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shop_by_needs.
     */
    cursor?: shop_by_needWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shop_by_needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shop_by_needs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shop_by_needs.
     */
    distinct?: Shop_by_needScalarFieldEnum | Shop_by_needScalarFieldEnum[]
  }

  /**
   * shop_by_need findFirstOrThrow
   */
  export type shop_by_needFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * Filter, which shop_by_need to fetch.
     */
    where?: shop_by_needWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shop_by_needs to fetch.
     */
    orderBy?: shop_by_needOrderByWithRelationInput | shop_by_needOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shop_by_needs.
     */
    cursor?: shop_by_needWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shop_by_needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shop_by_needs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shop_by_needs.
     */
    distinct?: Shop_by_needScalarFieldEnum | Shop_by_needScalarFieldEnum[]
  }

  /**
   * shop_by_need findMany
   */
  export type shop_by_needFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * Filter, which shop_by_needs to fetch.
     */
    where?: shop_by_needWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shop_by_needs to fetch.
     */
    orderBy?: shop_by_needOrderByWithRelationInput | shop_by_needOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shop_by_needs.
     */
    cursor?: shop_by_needWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shop_by_needs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shop_by_needs.
     */
    skip?: number
    distinct?: Shop_by_needScalarFieldEnum | Shop_by_needScalarFieldEnum[]
  }

  /**
   * shop_by_need create
   */
  export type shop_by_needCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * The data needed to create a shop_by_need.
     */
    data: XOR<shop_by_needCreateInput, shop_by_needUncheckedCreateInput>
  }

  /**
   * shop_by_need createMany
   */
  export type shop_by_needCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many shop_by_needs.
     */
    data: shop_by_needCreateManyInput | shop_by_needCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * shop_by_need createManyAndReturn
   */
  export type shop_by_needCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * The data used to create many shop_by_needs.
     */
    data: shop_by_needCreateManyInput | shop_by_needCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * shop_by_need update
   */
  export type shop_by_needUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * The data needed to update a shop_by_need.
     */
    data: XOR<shop_by_needUpdateInput, shop_by_needUncheckedUpdateInput>
    /**
     * Choose, which shop_by_need to update.
     */
    where: shop_by_needWhereUniqueInput
  }

  /**
   * shop_by_need updateMany
   */
  export type shop_by_needUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update shop_by_needs.
     */
    data: XOR<shop_by_needUpdateManyMutationInput, shop_by_needUncheckedUpdateManyInput>
    /**
     * Filter which shop_by_needs to update
     */
    where?: shop_by_needWhereInput
    /**
     * Limit how many shop_by_needs to update.
     */
    limit?: number
  }

  /**
   * shop_by_need updateManyAndReturn
   */
  export type shop_by_needUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * The data used to update shop_by_needs.
     */
    data: XOR<shop_by_needUpdateManyMutationInput, shop_by_needUncheckedUpdateManyInput>
    /**
     * Filter which shop_by_needs to update
     */
    where?: shop_by_needWhereInput
    /**
     * Limit how many shop_by_needs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * shop_by_need upsert
   */
  export type shop_by_needUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * The filter to search for the shop_by_need to update in case it exists.
     */
    where: shop_by_needWhereUniqueInput
    /**
     * In case the shop_by_need found by the `where` argument doesn't exist, create a new shop_by_need with this data.
     */
    create: XOR<shop_by_needCreateInput, shop_by_needUncheckedCreateInput>
    /**
     * In case the shop_by_need was found with the provided `where` argument, update it with this data.
     */
    update: XOR<shop_by_needUpdateInput, shop_by_needUncheckedUpdateInput>
  }

  /**
   * shop_by_need delete
   */
  export type shop_by_needDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
    /**
     * Filter which shop_by_need to delete.
     */
    where: shop_by_needWhereUniqueInput
  }

  /**
   * shop_by_need deleteMany
   */
  export type shop_by_needDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which shop_by_needs to delete
     */
    where?: shop_by_needWhereInput
    /**
     * Limit how many shop_by_needs to delete.
     */
    limit?: number
  }

  /**
   * shop_by_need without action
   */
  export type shop_by_needDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the shop_by_need
     */
    select?: shop_by_needSelect<ExtArgs> | null
    /**
     * Omit specific fields from the shop_by_need
     */
    omit?: shop_by_needOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: shop_by_needInclude<ExtArgs> | null
  }


  /**
   * Model text_banners
   */

  export type AggregateText_banners = {
    _count: Text_bannersCountAggregateOutputType | null
    _avg: Text_bannersAvgAggregateOutputType | null
    _sum: Text_bannersSumAggregateOutputType | null
    _min: Text_bannersMinAggregateOutputType | null
    _max: Text_bannersMaxAggregateOutputType | null
  }

  export type Text_bannersAvgAggregateOutputType = {
    id: number | null
    display_order: number | null
    active: number | null
  }

  export type Text_bannersSumAggregateOutputType = {
    id: number | null
    display_order: number | null
    active: number | null
  }

  export type Text_bannersMinAggregateOutputType = {
    id: number | null
    text: string | null
    background_color: string | null
    text_color: string | null
    display_order: number | null
    active: number | null
    created_at: Date | null
  }

  export type Text_bannersMaxAggregateOutputType = {
    id: number | null
    text: string | null
    background_color: string | null
    text_color: string | null
    display_order: number | null
    active: number | null
    created_at: Date | null
  }

  export type Text_bannersCountAggregateOutputType = {
    id: number
    text: number
    background_color: number
    text_color: number
    display_order: number
    active: number
    created_at: number
    _all: number
  }


  export type Text_bannersAvgAggregateInputType = {
    id?: true
    display_order?: true
    active?: true
  }

  export type Text_bannersSumAggregateInputType = {
    id?: true
    display_order?: true
    active?: true
  }

  export type Text_bannersMinAggregateInputType = {
    id?: true
    text?: true
    background_color?: true
    text_color?: true
    display_order?: true
    active?: true
    created_at?: true
  }

  export type Text_bannersMaxAggregateInputType = {
    id?: true
    text?: true
    background_color?: true
    text_color?: true
    display_order?: true
    active?: true
    created_at?: true
  }

  export type Text_bannersCountAggregateInputType = {
    id?: true
    text?: true
    background_color?: true
    text_color?: true
    display_order?: true
    active?: true
    created_at?: true
    _all?: true
  }

  export type Text_bannersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which text_banners to aggregate.
     */
    where?: text_bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of text_banners to fetch.
     */
    orderBy?: text_bannersOrderByWithRelationInput | text_bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: text_bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` text_banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` text_banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned text_banners
    **/
    _count?: true | Text_bannersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Text_bannersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Text_bannersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Text_bannersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Text_bannersMaxAggregateInputType
  }

  export type GetText_bannersAggregateType<T extends Text_bannersAggregateArgs> = {
        [P in keyof T & keyof AggregateText_banners]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateText_banners[P]>
      : GetScalarType<T[P], AggregateText_banners[P]>
  }




  export type text_bannersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: text_bannersWhereInput
    orderBy?: text_bannersOrderByWithAggregationInput | text_bannersOrderByWithAggregationInput[]
    by: Text_bannersScalarFieldEnum[] | Text_bannersScalarFieldEnum
    having?: text_bannersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Text_bannersCountAggregateInputType | true
    _avg?: Text_bannersAvgAggregateInputType
    _sum?: Text_bannersSumAggregateInputType
    _min?: Text_bannersMinAggregateInputType
    _max?: Text_bannersMaxAggregateInputType
  }

  export type Text_bannersGroupByOutputType = {
    id: number
    text: string
    background_color: string | null
    text_color: string | null
    display_order: number | null
    active: number | null
    created_at: Date | null
    _count: Text_bannersCountAggregateOutputType | null
    _avg: Text_bannersAvgAggregateOutputType | null
    _sum: Text_bannersSumAggregateOutputType | null
    _min: Text_bannersMinAggregateOutputType | null
    _max: Text_bannersMaxAggregateOutputType | null
  }

  type GetText_bannersGroupByPayload<T extends text_bannersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Text_bannersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Text_bannersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Text_bannersGroupByOutputType[P]>
            : GetScalarType<T[P], Text_bannersGroupByOutputType[P]>
        }
      >
    >


  export type text_bannersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    background_color?: boolean
    text_color?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["text_banners"]>

  export type text_bannersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    background_color?: boolean
    text_color?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["text_banners"]>

  export type text_bannersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    background_color?: boolean
    text_color?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["text_banners"]>

  export type text_bannersSelectScalar = {
    id?: boolean
    text?: boolean
    background_color?: boolean
    text_color?: boolean
    display_order?: boolean
    active?: boolean
    created_at?: boolean
  }

  export type text_bannersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "background_color" | "text_color" | "display_order" | "active" | "created_at", ExtArgs["result"]["text_banners"]>

  export type $text_bannersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "text_banners"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      text: string
      background_color: string | null
      text_color: string | null
      display_order: number | null
      active: number | null
      created_at: Date | null
    }, ExtArgs["result"]["text_banners"]>
    composites: {}
  }

  type text_bannersGetPayload<S extends boolean | null | undefined | text_bannersDefaultArgs> = $Result.GetResult<Prisma.$text_bannersPayload, S>

  type text_bannersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<text_bannersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Text_bannersCountAggregateInputType | true
    }

  export interface text_bannersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['text_banners'], meta: { name: 'text_banners' } }
    /**
     * Find zero or one Text_banners that matches the filter.
     * @param {text_bannersFindUniqueArgs} args - Arguments to find a Text_banners
     * @example
     * // Get one Text_banners
     * const text_banners = await prisma.text_banners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends text_bannersFindUniqueArgs>(args: SelectSubset<T, text_bannersFindUniqueArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Text_banners that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {text_bannersFindUniqueOrThrowArgs} args - Arguments to find a Text_banners
     * @example
     * // Get one Text_banners
     * const text_banners = await prisma.text_banners.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends text_bannersFindUniqueOrThrowArgs>(args: SelectSubset<T, text_bannersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Text_banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {text_bannersFindFirstArgs} args - Arguments to find a Text_banners
     * @example
     * // Get one Text_banners
     * const text_banners = await prisma.text_banners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends text_bannersFindFirstArgs>(args?: SelectSubset<T, text_bannersFindFirstArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Text_banners that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {text_bannersFindFirstOrThrowArgs} args - Arguments to find a Text_banners
     * @example
     * // Get one Text_banners
     * const text_banners = await prisma.text_banners.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends text_bannersFindFirstOrThrowArgs>(args?: SelectSubset<T, text_bannersFindFirstOrThrowArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Text_banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {text_bannersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Text_banners
     * const text_banners = await prisma.text_banners.findMany()
     * 
     * // Get first 10 Text_banners
     * const text_banners = await prisma.text_banners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const text_bannersWithIdOnly = await prisma.text_banners.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends text_bannersFindManyArgs>(args?: SelectSubset<T, text_bannersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Text_banners.
     * @param {text_bannersCreateArgs} args - Arguments to create a Text_banners.
     * @example
     * // Create one Text_banners
     * const Text_banners = await prisma.text_banners.create({
     *   data: {
     *     // ... data to create a Text_banners
     *   }
     * })
     * 
     */
    create<T extends text_bannersCreateArgs>(args: SelectSubset<T, text_bannersCreateArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Text_banners.
     * @param {text_bannersCreateManyArgs} args - Arguments to create many Text_banners.
     * @example
     * // Create many Text_banners
     * const text_banners = await prisma.text_banners.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends text_bannersCreateManyArgs>(args?: SelectSubset<T, text_bannersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Text_banners and returns the data saved in the database.
     * @param {text_bannersCreateManyAndReturnArgs} args - Arguments to create many Text_banners.
     * @example
     * // Create many Text_banners
     * const text_banners = await prisma.text_banners.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Text_banners and only return the `id`
     * const text_bannersWithIdOnly = await prisma.text_banners.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends text_bannersCreateManyAndReturnArgs>(args?: SelectSubset<T, text_bannersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Text_banners.
     * @param {text_bannersDeleteArgs} args - Arguments to delete one Text_banners.
     * @example
     * // Delete one Text_banners
     * const Text_banners = await prisma.text_banners.delete({
     *   where: {
     *     // ... filter to delete one Text_banners
     *   }
     * })
     * 
     */
    delete<T extends text_bannersDeleteArgs>(args: SelectSubset<T, text_bannersDeleteArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Text_banners.
     * @param {text_bannersUpdateArgs} args - Arguments to update one Text_banners.
     * @example
     * // Update one Text_banners
     * const text_banners = await prisma.text_banners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends text_bannersUpdateArgs>(args: SelectSubset<T, text_bannersUpdateArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Text_banners.
     * @param {text_bannersDeleteManyArgs} args - Arguments to filter Text_banners to delete.
     * @example
     * // Delete a few Text_banners
     * const { count } = await prisma.text_banners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends text_bannersDeleteManyArgs>(args?: SelectSubset<T, text_bannersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Text_banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {text_bannersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Text_banners
     * const text_banners = await prisma.text_banners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends text_bannersUpdateManyArgs>(args: SelectSubset<T, text_bannersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Text_banners and returns the data updated in the database.
     * @param {text_bannersUpdateManyAndReturnArgs} args - Arguments to update many Text_banners.
     * @example
     * // Update many Text_banners
     * const text_banners = await prisma.text_banners.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Text_banners and only return the `id`
     * const text_bannersWithIdOnly = await prisma.text_banners.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends text_bannersUpdateManyAndReturnArgs>(args: SelectSubset<T, text_bannersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Text_banners.
     * @param {text_bannersUpsertArgs} args - Arguments to update or create a Text_banners.
     * @example
     * // Update or create a Text_banners
     * const text_banners = await prisma.text_banners.upsert({
     *   create: {
     *     // ... data to create a Text_banners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Text_banners we want to update
     *   }
     * })
     */
    upsert<T extends text_bannersUpsertArgs>(args: SelectSubset<T, text_bannersUpsertArgs<ExtArgs>>): Prisma__text_bannersClient<$Result.GetResult<Prisma.$text_bannersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Text_banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {text_bannersCountArgs} args - Arguments to filter Text_banners to count.
     * @example
     * // Count the number of Text_banners
     * const count = await prisma.text_banners.count({
     *   where: {
     *     // ... the filter for the Text_banners we want to count
     *   }
     * })
    **/
    count<T extends text_bannersCountArgs>(
      args?: Subset<T, text_bannersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Text_bannersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Text_banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Text_bannersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Text_bannersAggregateArgs>(args: Subset<T, Text_bannersAggregateArgs>): Prisma.PrismaPromise<GetText_bannersAggregateType<T>>

    /**
     * Group by Text_banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {text_bannersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends text_bannersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: text_bannersGroupByArgs['orderBy'] }
        : { orderBy?: text_bannersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, text_bannersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetText_bannersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the text_banners model
   */
  readonly fields: text_bannersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for text_banners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__text_bannersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the text_banners model
   */
  interface text_bannersFieldRefs {
    readonly id: FieldRef<"text_banners", 'Int'>
    readonly text: FieldRef<"text_banners", 'String'>
    readonly background_color: FieldRef<"text_banners", 'String'>
    readonly text_color: FieldRef<"text_banners", 'String'>
    readonly display_order: FieldRef<"text_banners", 'Int'>
    readonly active: FieldRef<"text_banners", 'Int'>
    readonly created_at: FieldRef<"text_banners", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * text_banners findUnique
   */
  export type text_bannersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * Filter, which text_banners to fetch.
     */
    where: text_bannersWhereUniqueInput
  }

  /**
   * text_banners findUniqueOrThrow
   */
  export type text_bannersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * Filter, which text_banners to fetch.
     */
    where: text_bannersWhereUniqueInput
  }

  /**
   * text_banners findFirst
   */
  export type text_bannersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * Filter, which text_banners to fetch.
     */
    where?: text_bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of text_banners to fetch.
     */
    orderBy?: text_bannersOrderByWithRelationInput | text_bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for text_banners.
     */
    cursor?: text_bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` text_banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` text_banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of text_banners.
     */
    distinct?: Text_bannersScalarFieldEnum | Text_bannersScalarFieldEnum[]
  }

  /**
   * text_banners findFirstOrThrow
   */
  export type text_bannersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * Filter, which text_banners to fetch.
     */
    where?: text_bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of text_banners to fetch.
     */
    orderBy?: text_bannersOrderByWithRelationInput | text_bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for text_banners.
     */
    cursor?: text_bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` text_banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` text_banners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of text_banners.
     */
    distinct?: Text_bannersScalarFieldEnum | Text_bannersScalarFieldEnum[]
  }

  /**
   * text_banners findMany
   */
  export type text_bannersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * Filter, which text_banners to fetch.
     */
    where?: text_bannersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of text_banners to fetch.
     */
    orderBy?: text_bannersOrderByWithRelationInput | text_bannersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing text_banners.
     */
    cursor?: text_bannersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` text_banners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` text_banners.
     */
    skip?: number
    distinct?: Text_bannersScalarFieldEnum | Text_bannersScalarFieldEnum[]
  }

  /**
   * text_banners create
   */
  export type text_bannersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * The data needed to create a text_banners.
     */
    data: XOR<text_bannersCreateInput, text_bannersUncheckedCreateInput>
  }

  /**
   * text_banners createMany
   */
  export type text_bannersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many text_banners.
     */
    data: text_bannersCreateManyInput | text_bannersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * text_banners createManyAndReturn
   */
  export type text_bannersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * The data used to create many text_banners.
     */
    data: text_bannersCreateManyInput | text_bannersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * text_banners update
   */
  export type text_bannersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * The data needed to update a text_banners.
     */
    data: XOR<text_bannersUpdateInput, text_bannersUncheckedUpdateInput>
    /**
     * Choose, which text_banners to update.
     */
    where: text_bannersWhereUniqueInput
  }

  /**
   * text_banners updateMany
   */
  export type text_bannersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update text_banners.
     */
    data: XOR<text_bannersUpdateManyMutationInput, text_bannersUncheckedUpdateManyInput>
    /**
     * Filter which text_banners to update
     */
    where?: text_bannersWhereInput
    /**
     * Limit how many text_banners to update.
     */
    limit?: number
  }

  /**
   * text_banners updateManyAndReturn
   */
  export type text_bannersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * The data used to update text_banners.
     */
    data: XOR<text_bannersUpdateManyMutationInput, text_bannersUncheckedUpdateManyInput>
    /**
     * Filter which text_banners to update
     */
    where?: text_bannersWhereInput
    /**
     * Limit how many text_banners to update.
     */
    limit?: number
  }

  /**
   * text_banners upsert
   */
  export type text_bannersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * The filter to search for the text_banners to update in case it exists.
     */
    where: text_bannersWhereUniqueInput
    /**
     * In case the text_banners found by the `where` argument doesn't exist, create a new text_banners with this data.
     */
    create: XOR<text_bannersCreateInput, text_bannersUncheckedCreateInput>
    /**
     * In case the text_banners was found with the provided `where` argument, update it with this data.
     */
    update: XOR<text_bannersUpdateInput, text_bannersUncheckedUpdateInput>
  }

  /**
   * text_banners delete
   */
  export type text_bannersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
    /**
     * Filter which text_banners to delete.
     */
    where: text_bannersWhereUniqueInput
  }

  /**
   * text_banners deleteMany
   */
  export type text_bannersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which text_banners to delete
     */
    where?: text_bannersWhereInput
    /**
     * Limit how many text_banners to delete.
     */
    limit?: number
  }

  /**
   * text_banners without action
   */
  export type text_bannersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the text_banners
     */
    select?: text_bannersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the text_banners
     */
    omit?: text_bannersOmit<ExtArgs> | null
  }


  /**
   * Model trending
   */

  export type AggregateTrending = {
    _count: TrendingCountAggregateOutputType | null
    _avg: TrendingAvgAggregateOutputType | null
    _sum: TrendingSumAggregateOutputType | null
    _min: TrendingMinAggregateOutputType | null
    _max: TrendingMaxAggregateOutputType | null
  }

  export type TrendingAvgAggregateOutputType = {
    id: number | null
  }

  export type TrendingSumAggregateOutputType = {
    id: number | null
  }

  export type TrendingMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type TrendingMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    created_at: Date | null
  }

  export type TrendingCountAggregateOutputType = {
    id: number
    product_id: number
    created_at: number
    _all: number
  }


  export type TrendingAvgAggregateInputType = {
    id?: true
  }

  export type TrendingSumAggregateInputType = {
    id?: true
  }

  export type TrendingMinAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type TrendingMaxAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
  }

  export type TrendingCountAggregateInputType = {
    id?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type TrendingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trending to aggregate.
     */
    where?: trendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendings to fetch.
     */
    orderBy?: trendingOrderByWithRelationInput | trendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trendings
    **/
    _count?: true | TrendingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrendingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrendingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrendingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrendingMaxAggregateInputType
  }

  export type GetTrendingAggregateType<T extends TrendingAggregateArgs> = {
        [P in keyof T & keyof AggregateTrending]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrending[P]>
      : GetScalarType<T[P], AggregateTrending[P]>
  }




  export type trendingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trendingWhereInput
    orderBy?: trendingOrderByWithAggregationInput | trendingOrderByWithAggregationInput[]
    by: TrendingScalarFieldEnum[] | TrendingScalarFieldEnum
    having?: trendingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrendingCountAggregateInputType | true
    _avg?: TrendingAvgAggregateInputType
    _sum?: TrendingSumAggregateInputType
    _min?: TrendingMinAggregateInputType
    _max?: TrendingMaxAggregateInputType
  }

  export type TrendingGroupByOutputType = {
    id: number
    product_id: string
    created_at: Date | null
    _count: TrendingCountAggregateOutputType | null
    _avg: TrendingAvgAggregateOutputType | null
    _sum: TrendingSumAggregateOutputType | null
    _min: TrendingMinAggregateOutputType | null
    _max: TrendingMaxAggregateOutputType | null
  }

  type GetTrendingGroupByPayload<T extends trendingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrendingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrendingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrendingGroupByOutputType[P]>
            : GetScalarType<T[P], TrendingGroupByOutputType[P]>
        }
      >
    >


  export type trendingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trending"]>

  export type trendingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trending"]>

  export type trendingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trending"]>

  export type trendingSelectScalar = {
    id?: boolean
    product_id?: boolean
    created_at?: boolean
  }

  export type trendingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "created_at", ExtArgs["result"]["trending"]>
  export type trendingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type trendingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }
  export type trendingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $trendingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trending"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      created_at: Date | null
    }, ExtArgs["result"]["trending"]>
    composites: {}
  }

  type trendingGetPayload<S extends boolean | null | undefined | trendingDefaultArgs> = $Result.GetResult<Prisma.$trendingPayload, S>

  type trendingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<trendingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrendingCountAggregateInputType | true
    }

  export interface trendingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trending'], meta: { name: 'trending' } }
    /**
     * Find zero or one Trending that matches the filter.
     * @param {trendingFindUniqueArgs} args - Arguments to find a Trending
     * @example
     * // Get one Trending
     * const trending = await prisma.trending.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trendingFindUniqueArgs>(args: SelectSubset<T, trendingFindUniqueArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trending that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {trendingFindUniqueOrThrowArgs} args - Arguments to find a Trending
     * @example
     * // Get one Trending
     * const trending = await prisma.trending.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trendingFindUniqueOrThrowArgs>(args: SelectSubset<T, trendingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trending that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingFindFirstArgs} args - Arguments to find a Trending
     * @example
     * // Get one Trending
     * const trending = await prisma.trending.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trendingFindFirstArgs>(args?: SelectSubset<T, trendingFindFirstArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trending that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingFindFirstOrThrowArgs} args - Arguments to find a Trending
     * @example
     * // Get one Trending
     * const trending = await prisma.trending.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trendingFindFirstOrThrowArgs>(args?: SelectSubset<T, trendingFindFirstOrThrowArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trendings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trendings
     * const trendings = await prisma.trending.findMany()
     * 
     * // Get first 10 Trendings
     * const trendings = await prisma.trending.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trendingWithIdOnly = await prisma.trending.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trendingFindManyArgs>(args?: SelectSubset<T, trendingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trending.
     * @param {trendingCreateArgs} args - Arguments to create a Trending.
     * @example
     * // Create one Trending
     * const Trending = await prisma.trending.create({
     *   data: {
     *     // ... data to create a Trending
     *   }
     * })
     * 
     */
    create<T extends trendingCreateArgs>(args: SelectSubset<T, trendingCreateArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trendings.
     * @param {trendingCreateManyArgs} args - Arguments to create many Trendings.
     * @example
     * // Create many Trendings
     * const trending = await prisma.trending.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trendingCreateManyArgs>(args?: SelectSubset<T, trendingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trendings and returns the data saved in the database.
     * @param {trendingCreateManyAndReturnArgs} args - Arguments to create many Trendings.
     * @example
     * // Create many Trendings
     * const trending = await prisma.trending.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trendings and only return the `id`
     * const trendingWithIdOnly = await prisma.trending.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends trendingCreateManyAndReturnArgs>(args?: SelectSubset<T, trendingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Trending.
     * @param {trendingDeleteArgs} args - Arguments to delete one Trending.
     * @example
     * // Delete one Trending
     * const Trending = await prisma.trending.delete({
     *   where: {
     *     // ... filter to delete one Trending
     *   }
     * })
     * 
     */
    delete<T extends trendingDeleteArgs>(args: SelectSubset<T, trendingDeleteArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trending.
     * @param {trendingUpdateArgs} args - Arguments to update one Trending.
     * @example
     * // Update one Trending
     * const trending = await prisma.trending.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trendingUpdateArgs>(args: SelectSubset<T, trendingUpdateArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trendings.
     * @param {trendingDeleteManyArgs} args - Arguments to filter Trendings to delete.
     * @example
     * // Delete a few Trendings
     * const { count } = await prisma.trending.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trendingDeleteManyArgs>(args?: SelectSubset<T, trendingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trendings
     * const trending = await prisma.trending.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trendingUpdateManyArgs>(args: SelectSubset<T, trendingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trendings and returns the data updated in the database.
     * @param {trendingUpdateManyAndReturnArgs} args - Arguments to update many Trendings.
     * @example
     * // Update many Trendings
     * const trending = await prisma.trending.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trendings and only return the `id`
     * const trendingWithIdOnly = await prisma.trending.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends trendingUpdateManyAndReturnArgs>(args: SelectSubset<T, trendingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Trending.
     * @param {trendingUpsertArgs} args - Arguments to update or create a Trending.
     * @example
     * // Update or create a Trending
     * const trending = await prisma.trending.upsert({
     *   create: {
     *     // ... data to create a Trending
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trending we want to update
     *   }
     * })
     */
    upsert<T extends trendingUpsertArgs>(args: SelectSubset<T, trendingUpsertArgs<ExtArgs>>): Prisma__trendingClient<$Result.GetResult<Prisma.$trendingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trendings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingCountArgs} args - Arguments to filter Trendings to count.
     * @example
     * // Count the number of Trendings
     * const count = await prisma.trending.count({
     *   where: {
     *     // ... the filter for the Trendings we want to count
     *   }
     * })
    **/
    count<T extends trendingCountArgs>(
      args?: Subset<T, trendingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrendingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrendingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrendingAggregateArgs>(args: Subset<T, TrendingAggregateArgs>): Prisma.PrismaPromise<GetTrendingAggregateType<T>>

    /**
     * Group by Trending.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trendingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trendingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trendingGroupByArgs['orderBy'] }
        : { orderBy?: trendingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trendingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrendingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trending model
   */
  readonly fields: trendingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trending.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trendingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trending model
   */
  interface trendingFieldRefs {
    readonly id: FieldRef<"trending", 'Int'>
    readonly product_id: FieldRef<"trending", 'String'>
    readonly created_at: FieldRef<"trending", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * trending findUnique
   */
  export type trendingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * Filter, which trending to fetch.
     */
    where: trendingWhereUniqueInput
  }

  /**
   * trending findUniqueOrThrow
   */
  export type trendingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * Filter, which trending to fetch.
     */
    where: trendingWhereUniqueInput
  }

  /**
   * trending findFirst
   */
  export type trendingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * Filter, which trending to fetch.
     */
    where?: trendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendings to fetch.
     */
    orderBy?: trendingOrderByWithRelationInput | trendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trendings.
     */
    cursor?: trendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trendings.
     */
    distinct?: TrendingScalarFieldEnum | TrendingScalarFieldEnum[]
  }

  /**
   * trending findFirstOrThrow
   */
  export type trendingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * Filter, which trending to fetch.
     */
    where?: trendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendings to fetch.
     */
    orderBy?: trendingOrderByWithRelationInput | trendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trendings.
     */
    cursor?: trendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trendings.
     */
    distinct?: TrendingScalarFieldEnum | TrendingScalarFieldEnum[]
  }

  /**
   * trending findMany
   */
  export type trendingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * Filter, which trendings to fetch.
     */
    where?: trendingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trendings to fetch.
     */
    orderBy?: trendingOrderByWithRelationInput | trendingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trendings.
     */
    cursor?: trendingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trendings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trendings.
     */
    skip?: number
    distinct?: TrendingScalarFieldEnum | TrendingScalarFieldEnum[]
  }

  /**
   * trending create
   */
  export type trendingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * The data needed to create a trending.
     */
    data: XOR<trendingCreateInput, trendingUncheckedCreateInput>
  }

  /**
   * trending createMany
   */
  export type trendingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trendings.
     */
    data: trendingCreateManyInput | trendingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * trending createManyAndReturn
   */
  export type trendingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * The data used to create many trendings.
     */
    data: trendingCreateManyInput | trendingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * trending update
   */
  export type trendingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * The data needed to update a trending.
     */
    data: XOR<trendingUpdateInput, trendingUncheckedUpdateInput>
    /**
     * Choose, which trending to update.
     */
    where: trendingWhereUniqueInput
  }

  /**
   * trending updateMany
   */
  export type trendingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trendings.
     */
    data: XOR<trendingUpdateManyMutationInput, trendingUncheckedUpdateManyInput>
    /**
     * Filter which trendings to update
     */
    where?: trendingWhereInput
    /**
     * Limit how many trendings to update.
     */
    limit?: number
  }

  /**
   * trending updateManyAndReturn
   */
  export type trendingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * The data used to update trendings.
     */
    data: XOR<trendingUpdateManyMutationInput, trendingUncheckedUpdateManyInput>
    /**
     * Filter which trendings to update
     */
    where?: trendingWhereInput
    /**
     * Limit how many trendings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * trending upsert
   */
  export type trendingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * The filter to search for the trending to update in case it exists.
     */
    where: trendingWhereUniqueInput
    /**
     * In case the trending found by the `where` argument doesn't exist, create a new trending with this data.
     */
    create: XOR<trendingCreateInput, trendingUncheckedCreateInput>
    /**
     * In case the trending was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trendingUpdateInput, trendingUncheckedUpdateInput>
  }

  /**
   * trending delete
   */
  export type trendingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
    /**
     * Filter which trending to delete.
     */
    where: trendingWhereUniqueInput
  }

  /**
   * trending deleteMany
   */
  export type trendingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trendings to delete
     */
    where?: trendingWhereInput
    /**
     * Limit how many trendings to delete.
     */
    limit?: number
  }

  /**
   * trending without action
   */
  export type trendingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trending
     */
    select?: trendingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trending
     */
    omit?: trendingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trendingInclude<ExtArgs> | null
  }


  /**
   * Model user_details
   */

  export type AggregateUser_details = {
    _count: User_detailsCountAggregateOutputType | null
    _avg: User_detailsAvgAggregateOutputType | null
    _sum: User_detailsSumAggregateOutputType | null
    _min: User_detailsMinAggregateOutputType | null
    _max: User_detailsMaxAggregateOutputType | null
  }

  export type User_detailsAvgAggregateOutputType = {
    id: number | null
  }

  export type User_detailsSumAggregateOutputType = {
    id: number | null
  }

  export type User_detailsMinAggregateOutputType = {
    id: number | null
    clerkId: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    pin_code: string | null
  }

  export type User_detailsMaxAggregateOutputType = {
    id: number | null
    clerkId: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    pin_code: string | null
  }

  export type User_detailsCountAggregateOutputType = {
    id: number
    clerkId: number
    address: number
    city: number
    state: number
    country: number
    pin_code: number
    _all: number
  }


  export type User_detailsAvgAggregateInputType = {
    id?: true
  }

  export type User_detailsSumAggregateInputType = {
    id?: true
  }

  export type User_detailsMinAggregateInputType = {
    id?: true
    clerkId?: true
    address?: true
    city?: true
    state?: true
    country?: true
    pin_code?: true
  }

  export type User_detailsMaxAggregateInputType = {
    id?: true
    clerkId?: true
    address?: true
    city?: true
    state?: true
    country?: true
    pin_code?: true
  }

  export type User_detailsCountAggregateInputType = {
    id?: true
    clerkId?: true
    address?: true
    city?: true
    state?: true
    country?: true
    pin_code?: true
    _all?: true
  }

  export type User_detailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_details to aggregate.
     */
    where?: user_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
     */
    orderBy?: user_detailsOrderByWithRelationInput | user_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_details
    **/
    _count?: true | User_detailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_detailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_detailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_detailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_detailsMaxAggregateInputType
  }

  export type GetUser_detailsAggregateType<T extends User_detailsAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_details]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_details[P]>
      : GetScalarType<T[P], AggregateUser_details[P]>
  }




  export type user_detailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_detailsWhereInput
    orderBy?: user_detailsOrderByWithAggregationInput | user_detailsOrderByWithAggregationInput[]
    by: User_detailsScalarFieldEnum[] | User_detailsScalarFieldEnum
    having?: user_detailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_detailsCountAggregateInputType | true
    _avg?: User_detailsAvgAggregateInputType
    _sum?: User_detailsSumAggregateInputType
    _min?: User_detailsMinAggregateInputType
    _max?: User_detailsMaxAggregateInputType
  }

  export type User_detailsGroupByOutputType = {
    id: number
    clerkId: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    pin_code: string | null
    _count: User_detailsCountAggregateOutputType | null
    _avg: User_detailsAvgAggregateOutputType | null
    _sum: User_detailsSumAggregateOutputType | null
    _min: User_detailsMinAggregateOutputType | null
    _max: User_detailsMaxAggregateOutputType | null
  }

  type GetUser_detailsGroupByPayload<T extends user_detailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_detailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_detailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_detailsGroupByOutputType[P]>
            : GetScalarType<T[P], User_detailsGroupByOutputType[P]>
        }
      >
    >


  export type user_detailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    pin_code?: boolean
    users?: boolean | user_details$usersArgs<ExtArgs>
  }, ExtArgs["result"]["user_details"]>

  export type user_detailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    pin_code?: boolean
    users?: boolean | user_details$usersArgs<ExtArgs>
  }, ExtArgs["result"]["user_details"]>

  export type user_detailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    pin_code?: boolean
    users?: boolean | user_details$usersArgs<ExtArgs>
  }, ExtArgs["result"]["user_details"]>

  export type user_detailsSelectScalar = {
    id?: boolean
    clerkId?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    pin_code?: boolean
  }

  export type user_detailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "address" | "city" | "state" | "country" | "pin_code", ExtArgs["result"]["user_details"]>
  export type user_detailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | user_details$usersArgs<ExtArgs>
  }
  export type user_detailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | user_details$usersArgs<ExtArgs>
  }
  export type user_detailsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | user_details$usersArgs<ExtArgs>
  }

  export type $user_detailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_details"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clerkId: string | null
      address: string | null
      city: string | null
      state: string | null
      country: string | null
      pin_code: string | null
    }, ExtArgs["result"]["user_details"]>
    composites: {}
  }

  type user_detailsGetPayload<S extends boolean | null | undefined | user_detailsDefaultArgs> = $Result.GetResult<Prisma.$user_detailsPayload, S>

  type user_detailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_detailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_detailsCountAggregateInputType | true
    }

  export interface user_detailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_details'], meta: { name: 'user_details' } }
    /**
     * Find zero or one User_details that matches the filter.
     * @param {user_detailsFindUniqueArgs} args - Arguments to find a User_details
     * @example
     * // Get one User_details
     * const user_details = await prisma.user_details.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_detailsFindUniqueArgs>(args: SelectSubset<T, user_detailsFindUniqueArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User_details that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_detailsFindUniqueOrThrowArgs} args - Arguments to find a User_details
     * @example
     * // Get one User_details
     * const user_details = await prisma.user_details.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_detailsFindUniqueOrThrowArgs>(args: SelectSubset<T, user_detailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailsFindFirstArgs} args - Arguments to find a User_details
     * @example
     * // Get one User_details
     * const user_details = await prisma.user_details.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_detailsFindFirstArgs>(args?: SelectSubset<T, user_detailsFindFirstArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_details that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailsFindFirstOrThrowArgs} args - Arguments to find a User_details
     * @example
     * // Get one User_details
     * const user_details = await prisma.user_details.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_detailsFindFirstOrThrowArgs>(args?: SelectSubset<T, user_detailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more User_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_details
     * const user_details = await prisma.user_details.findMany()
     * 
     * // Get first 10 User_details
     * const user_details = await prisma.user_details.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_detailsWithIdOnly = await prisma.user_details.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_detailsFindManyArgs>(args?: SelectSubset<T, user_detailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User_details.
     * @param {user_detailsCreateArgs} args - Arguments to create a User_details.
     * @example
     * // Create one User_details
     * const User_details = await prisma.user_details.create({
     *   data: {
     *     // ... data to create a User_details
     *   }
     * })
     * 
     */
    create<T extends user_detailsCreateArgs>(args: SelectSubset<T, user_detailsCreateArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many User_details.
     * @param {user_detailsCreateManyArgs} args - Arguments to create many User_details.
     * @example
     * // Create many User_details
     * const user_details = await prisma.user_details.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_detailsCreateManyArgs>(args?: SelectSubset<T, user_detailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_details and returns the data saved in the database.
     * @param {user_detailsCreateManyAndReturnArgs} args - Arguments to create many User_details.
     * @example
     * // Create many User_details
     * const user_details = await prisma.user_details.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_details and only return the `id`
     * const user_detailsWithIdOnly = await prisma.user_details.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_detailsCreateManyAndReturnArgs>(args?: SelectSubset<T, user_detailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User_details.
     * @param {user_detailsDeleteArgs} args - Arguments to delete one User_details.
     * @example
     * // Delete one User_details
     * const User_details = await prisma.user_details.delete({
     *   where: {
     *     // ... filter to delete one User_details
     *   }
     * })
     * 
     */
    delete<T extends user_detailsDeleteArgs>(args: SelectSubset<T, user_detailsDeleteArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User_details.
     * @param {user_detailsUpdateArgs} args - Arguments to update one User_details.
     * @example
     * // Update one User_details
     * const user_details = await prisma.user_details.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_detailsUpdateArgs>(args: SelectSubset<T, user_detailsUpdateArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more User_details.
     * @param {user_detailsDeleteManyArgs} args - Arguments to filter User_details to delete.
     * @example
     * // Delete a few User_details
     * const { count } = await prisma.user_details.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_detailsDeleteManyArgs>(args?: SelectSubset<T, user_detailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_details
     * const user_details = await prisma.user_details.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_detailsUpdateManyArgs>(args: SelectSubset<T, user_detailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_details and returns the data updated in the database.
     * @param {user_detailsUpdateManyAndReturnArgs} args - Arguments to update many User_details.
     * @example
     * // Update many User_details
     * const user_details = await prisma.user_details.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_details and only return the `id`
     * const user_detailsWithIdOnly = await prisma.user_details.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_detailsUpdateManyAndReturnArgs>(args: SelectSubset<T, user_detailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User_details.
     * @param {user_detailsUpsertArgs} args - Arguments to update or create a User_details.
     * @example
     * // Update or create a User_details
     * const user_details = await prisma.user_details.upsert({
     *   create: {
     *     // ... data to create a User_details
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_details we want to update
     *   }
     * })
     */
    upsert<T extends user_detailsUpsertArgs>(args: SelectSubset<T, user_detailsUpsertArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of User_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailsCountArgs} args - Arguments to filter User_details to count.
     * @example
     * // Count the number of User_details
     * const count = await prisma.user_details.count({
     *   where: {
     *     // ... the filter for the User_details we want to count
     *   }
     * })
    **/
    count<T extends user_detailsCountArgs>(
      args?: Subset<T, user_detailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_detailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_detailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_detailsAggregateArgs>(args: Subset<T, User_detailsAggregateArgs>): Prisma.PrismaPromise<GetUser_detailsAggregateType<T>>

    /**
     * Group by User_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_detailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_detailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_detailsGroupByArgs['orderBy'] }
        : { orderBy?: user_detailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_detailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_detailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_details model
   */
  readonly fields: user_detailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_details.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_detailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends user_details$usersArgs<ExtArgs> = {}>(args?: Subset<T, user_details$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_details model
   */
  interface user_detailsFieldRefs {
    readonly id: FieldRef<"user_details", 'Int'>
    readonly clerkId: FieldRef<"user_details", 'String'>
    readonly address: FieldRef<"user_details", 'String'>
    readonly city: FieldRef<"user_details", 'String'>
    readonly state: FieldRef<"user_details", 'String'>
    readonly country: FieldRef<"user_details", 'String'>
    readonly pin_code: FieldRef<"user_details", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_details findUnique
   */
  export type user_detailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * Filter, which user_details to fetch.
     */
    where: user_detailsWhereUniqueInput
  }

  /**
   * user_details findUniqueOrThrow
   */
  export type user_detailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * Filter, which user_details to fetch.
     */
    where: user_detailsWhereUniqueInput
  }

  /**
   * user_details findFirst
   */
  export type user_detailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * Filter, which user_details to fetch.
     */
    where?: user_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
     */
    orderBy?: user_detailsOrderByWithRelationInput | user_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_details.
     */
    cursor?: user_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_details.
     */
    distinct?: User_detailsScalarFieldEnum | User_detailsScalarFieldEnum[]
  }

  /**
   * user_details findFirstOrThrow
   */
  export type user_detailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * Filter, which user_details to fetch.
     */
    where?: user_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
     */
    orderBy?: user_detailsOrderByWithRelationInput | user_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_details.
     */
    cursor?: user_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_details.
     */
    distinct?: User_detailsScalarFieldEnum | User_detailsScalarFieldEnum[]
  }

  /**
   * user_details findMany
   */
  export type user_detailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * Filter, which user_details to fetch.
     */
    where?: user_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_details to fetch.
     */
    orderBy?: user_detailsOrderByWithRelationInput | user_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_details.
     */
    cursor?: user_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_details.
     */
    skip?: number
    distinct?: User_detailsScalarFieldEnum | User_detailsScalarFieldEnum[]
  }

  /**
   * user_details create
   */
  export type user_detailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * The data needed to create a user_details.
     */
    data?: XOR<user_detailsCreateInput, user_detailsUncheckedCreateInput>
  }

  /**
   * user_details createMany
   */
  export type user_detailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_details.
     */
    data: user_detailsCreateManyInput | user_detailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_details createManyAndReturn
   */
  export type user_detailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * The data used to create many user_details.
     */
    data: user_detailsCreateManyInput | user_detailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_details update
   */
  export type user_detailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * The data needed to update a user_details.
     */
    data: XOR<user_detailsUpdateInput, user_detailsUncheckedUpdateInput>
    /**
     * Choose, which user_details to update.
     */
    where: user_detailsWhereUniqueInput
  }

  /**
   * user_details updateMany
   */
  export type user_detailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_details.
     */
    data: XOR<user_detailsUpdateManyMutationInput, user_detailsUncheckedUpdateManyInput>
    /**
     * Filter which user_details to update
     */
    where?: user_detailsWhereInput
    /**
     * Limit how many user_details to update.
     */
    limit?: number
  }

  /**
   * user_details updateManyAndReturn
   */
  export type user_detailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * The data used to update user_details.
     */
    data: XOR<user_detailsUpdateManyMutationInput, user_detailsUncheckedUpdateManyInput>
    /**
     * Filter which user_details to update
     */
    where?: user_detailsWhereInput
    /**
     * Limit how many user_details to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_details upsert
   */
  export type user_detailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * The filter to search for the user_details to update in case it exists.
     */
    where: user_detailsWhereUniqueInput
    /**
     * In case the user_details found by the `where` argument doesn't exist, create a new user_details with this data.
     */
    create: XOR<user_detailsCreateInput, user_detailsUncheckedCreateInput>
    /**
     * In case the user_details was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_detailsUpdateInput, user_detailsUncheckedUpdateInput>
  }

  /**
   * user_details delete
   */
  export type user_detailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    /**
     * Filter which user_details to delete.
     */
    where: user_detailsWhereUniqueInput
  }

  /**
   * user_details deleteMany
   */
  export type user_detailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_details to delete
     */
    where?: user_detailsWhereInput
    /**
     * Limit how many user_details to delete.
     */
    limit?: number
  }

  /**
   * user_details.users
   */
  export type user_details$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * user_details without action
   */
  export type user_detailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    clerkId: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone_number: string | null
    role: $Enums.userrole | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    clerkId: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone_number: string | null
    role: $Enums.userrole | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    clerkId: number
    first_name: number
    last_name: number
    email: number
    phone_number: number
    role: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    clerkId?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    role?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    clerkId?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    role?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    clerkId?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    role?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    clerkId: string
    first_name: string
    last_name: string
    email: string
    phone_number: string
    role: $Enums.userrole
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    role?: boolean
    user_details?: boolean | users$user_detailsArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    role?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    role?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    clerkId?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    role?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "first_name" | "last_name" | "email" | "phone_number" | "role", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_details?: boolean | users$user_detailsArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      user_details: Prisma.$user_detailsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clerkId: string
      first_name: string
      last_name: string
      email: string
      phone_number: string
      role: $Enums.userrole
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_details<T extends users$user_detailsArgs<ExtArgs> = {}>(args?: Subset<T, users$user_detailsArgs<ExtArgs>>): Prisma__user_detailsClient<$Result.GetResult<Prisma.$user_detailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly clerkId: FieldRef<"users", 'String'>
    readonly first_name: FieldRef<"users", 'String'>
    readonly last_name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly phone_number: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'userrole'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.user_details
   */
  export type users$user_detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_details
     */
    select?: user_detailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_details
     */
    omit?: user_detailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_detailsInclude<ExtArgs> | null
    where?: user_detailsWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Alembic_versionScalarFieldEnum: {
    version_num: 'version_num'
  };

  export type Alembic_versionScalarFieldEnum = (typeof Alembic_versionScalarFieldEnum)[keyof typeof Alembic_versionScalarFieldEnum]


  export const BannersScalarFieldEnum: {
    id: 'id',
    image_url: 'image_url',
    display_order: 'display_order',
    active: 'active',
    created_at: 'created_at'
  };

  export type BannersScalarFieldEnum = (typeof BannersScalarFieldEnum)[keyof typeof BannersScalarFieldEnum]


  export const BestsellingScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type BestsellingScalarFieldEnum = (typeof BestsellingScalarFieldEnum)[keyof typeof BestsellingScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    allowed_customizations: 'allowed_customizations',
    created_at: 'created_at',
    image_url: 'image_url'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const CouponsScalarFieldEnum: {
    id: 'id',
    code: 'code',
    discount_percentage: 'discount_percentage',
    applicable_categories: 'applicable_categories',
    applicable_products: 'applicable_products',
    active: 'active',
    created_at: 'created_at',
    expires_at: 'expires_at'
  };

  export type CouponsScalarFieldEnum = (typeof CouponsScalarFieldEnum)[keyof typeof CouponsScalarFieldEnum]


  export const New_arrivalsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type New_arrivalsScalarFieldEnum = (typeof New_arrivalsScalarFieldEnum)[keyof typeof New_arrivalsScalarFieldEnum]


  export const On_saleScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type On_saleScalarFieldEnum = (typeof On_saleScalarFieldEnum)[keyof typeof On_saleScalarFieldEnum]


  export const Order_counterScalarFieldEnum: {
    id: 'id',
    current_number: 'current_number'
  };

  export type Order_counterScalarFieldEnum = (typeof Order_counterScalarFieldEnum)[keyof typeof Order_counterScalarFieldEnum]


  export const Order_itemsScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    product_id: 'product_id',
    quantity: 'quantity',
    selected_customizations: 'selected_customizations',
    user_customization_type: 'user_customization_type',
    user_customization_value: 'user_customization_value',
    individual_price: 'individual_price'
  };

  export type Order_itemsScalarFieldEnum = (typeof Order_itemsScalarFieldEnum)[keyof typeof Order_itemsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    clerkId: 'clerkId',
    total_price: 'total_price',
    status: 'status',
    created_at: 'created_at',
    receipt_id: 'receipt_id'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const Product_reviewsScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    user_name: 'user_name',
    product_id: 'product_id',
    rating: 'rating',
    review_text: 'review_text',
    created_at: 'created_at'
  };

  export type Product_reviewsScalarFieldEnum = (typeof Product_reviewsScalarFieldEnum)[keyof typeof Product_reviewsScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    main_image_url: 'main_image_url',
    side_images_url: 'side_images_url',
    name: 'name',
    price: 'price',
    category_id: 'category_id',
    description: 'description',
    customization_options: 'customization_options',
    status: 'status',
    average_rating: 'average_rating',
    created_at: 'created_at',
    bulk_prices: 'bulk_prices',
    dimensions: 'dimensions',
    weight: 'weight',
    material: 'material',
    standard_delivery_time: 'standard_delivery_time',
    express_delivery_time: 'express_delivery_time'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ReceiptsScalarFieldEnum: {
    id: 'id',
    payment_reference: 'payment_reference',
    amount_paid: 'amount_paid',
    created_at: 'created_at'
  };

  export type ReceiptsScalarFieldEnum = (typeof ReceiptsScalarFieldEnum)[keyof typeof ReceiptsScalarFieldEnum]


  export const Shop_by_needScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    need: 'need',
    created_at: 'created_at'
  };

  export type Shop_by_needScalarFieldEnum = (typeof Shop_by_needScalarFieldEnum)[keyof typeof Shop_by_needScalarFieldEnum]


  export const Text_bannersScalarFieldEnum: {
    id: 'id',
    text: 'text',
    background_color: 'background_color',
    text_color: 'text_color',
    display_order: 'display_order',
    active: 'active',
    created_at: 'created_at'
  };

  export type Text_bannersScalarFieldEnum = (typeof Text_bannersScalarFieldEnum)[keyof typeof Text_bannersScalarFieldEnum]


  export const TrendingScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type TrendingScalarFieldEnum = (typeof TrendingScalarFieldEnum)[keyof typeof TrendingScalarFieldEnum]


  export const User_detailsScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    address: 'address',
    city: 'city',
    state: 'state',
    country: 'country',
    pin_code: 'pin_code'
  };

  export type User_detailsScalarFieldEnum = (typeof User_detailsScalarFieldEnum)[keyof typeof User_detailsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    phone_number: 'phone_number',
    role: 'role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'productstatus'
   */
  export type EnumproductstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'productstatus'>
    


  /**
   * Reference to a field of type 'productstatus[]'
   */
  export type ListEnumproductstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'productstatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'userrole'
   */
  export type EnumuserroleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userrole'>
    


  /**
   * Reference to a field of type 'userrole[]'
   */
  export type ListEnumuserroleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userrole[]'>
    
  /**
   * Deep Input Types
   */


  export type alembic_versionWhereInput = {
    AND?: alembic_versionWhereInput | alembic_versionWhereInput[]
    OR?: alembic_versionWhereInput[]
    NOT?: alembic_versionWhereInput | alembic_versionWhereInput[]
    version_num?: StringFilter<"alembic_version"> | string
  }

  export type alembic_versionOrderByWithRelationInput = {
    version_num?: SortOrder
  }

  export type alembic_versionWhereUniqueInput = Prisma.AtLeast<{
    version_num?: string
    AND?: alembic_versionWhereInput | alembic_versionWhereInput[]
    OR?: alembic_versionWhereInput[]
    NOT?: alembic_versionWhereInput | alembic_versionWhereInput[]
  }, "version_num">

  export type alembic_versionOrderByWithAggregationInput = {
    version_num?: SortOrder
    _count?: alembic_versionCountOrderByAggregateInput
    _max?: alembic_versionMaxOrderByAggregateInput
    _min?: alembic_versionMinOrderByAggregateInput
  }

  export type alembic_versionScalarWhereWithAggregatesInput = {
    AND?: alembic_versionScalarWhereWithAggregatesInput | alembic_versionScalarWhereWithAggregatesInput[]
    OR?: alembic_versionScalarWhereWithAggregatesInput[]
    NOT?: alembic_versionScalarWhereWithAggregatesInput | alembic_versionScalarWhereWithAggregatesInput[]
    version_num?: StringWithAggregatesFilter<"alembic_version"> | string
  }

  export type bannersWhereInput = {
    AND?: bannersWhereInput | bannersWhereInput[]
    OR?: bannersWhereInput[]
    NOT?: bannersWhereInput | bannersWhereInput[]
    id?: IntFilter<"banners"> | number
    image_url?: StringFilter<"banners"> | string
    display_order?: IntNullableFilter<"banners"> | number | null
    active?: IntNullableFilter<"banners"> | number | null
    created_at?: DateTimeNullableFilter<"banners"> | Date | string | null
  }

  export type bannersOrderByWithRelationInput = {
    id?: SortOrder
    image_url?: SortOrder
    display_order?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
  }

  export type bannersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: bannersWhereInput | bannersWhereInput[]
    OR?: bannersWhereInput[]
    NOT?: bannersWhereInput | bannersWhereInput[]
    image_url?: StringFilter<"banners"> | string
    display_order?: IntNullableFilter<"banners"> | number | null
    active?: IntNullableFilter<"banners"> | number | null
    created_at?: DateTimeNullableFilter<"banners"> | Date | string | null
  }, "id">

  export type bannersOrderByWithAggregationInput = {
    id?: SortOrder
    image_url?: SortOrder
    display_order?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: bannersCountOrderByAggregateInput
    _avg?: bannersAvgOrderByAggregateInput
    _max?: bannersMaxOrderByAggregateInput
    _min?: bannersMinOrderByAggregateInput
    _sum?: bannersSumOrderByAggregateInput
  }

  export type bannersScalarWhereWithAggregatesInput = {
    AND?: bannersScalarWhereWithAggregatesInput | bannersScalarWhereWithAggregatesInput[]
    OR?: bannersScalarWhereWithAggregatesInput[]
    NOT?: bannersScalarWhereWithAggregatesInput | bannersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"banners"> | number
    image_url?: StringWithAggregatesFilter<"banners"> | string
    display_order?: IntNullableWithAggregatesFilter<"banners"> | number | null
    active?: IntNullableWithAggregatesFilter<"banners"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"banners"> | Date | string | null
  }

  export type bestsellingWhereInput = {
    AND?: bestsellingWhereInput | bestsellingWhereInput[]
    OR?: bestsellingWhereInput[]
    NOT?: bestsellingWhereInput | bestsellingWhereInput[]
    id?: IntFilter<"bestselling"> | number
    product_id?: StringFilter<"bestselling"> | string
    created_at?: DateTimeNullableFilter<"bestselling"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type bestsellingOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type bestsellingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: bestsellingWhereInput | bestsellingWhereInput[]
    OR?: bestsellingWhereInput[]
    NOT?: bestsellingWhereInput | bestsellingWhereInput[]
    created_at?: DateTimeNullableFilter<"bestselling"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id" | "product_id">

  export type bestsellingOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: bestsellingCountOrderByAggregateInput
    _avg?: bestsellingAvgOrderByAggregateInput
    _max?: bestsellingMaxOrderByAggregateInput
    _min?: bestsellingMinOrderByAggregateInput
    _sum?: bestsellingSumOrderByAggregateInput
  }

  export type bestsellingScalarWhereWithAggregatesInput = {
    AND?: bestsellingScalarWhereWithAggregatesInput | bestsellingScalarWhereWithAggregatesInput[]
    OR?: bestsellingScalarWhereWithAggregatesInput[]
    NOT?: bestsellingScalarWhereWithAggregatesInput | bestsellingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"bestselling"> | number
    product_id?: StringWithAggregatesFilter<"bestselling"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"bestselling"> | Date | string | null
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    id?: IntFilter<"categories"> | number
    name?: StringFilter<"categories"> | string
    allowed_customizations?: JsonNullableFilter<"categories">
    created_at?: DateTimeNullableFilter<"categories"> | Date | string | null
    image_url?: StringNullableFilter<"categories"> | string | null
    products?: ProductsListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    allowed_customizations?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    allowed_customizations?: JsonNullableFilter<"categories">
    created_at?: DateTimeNullableFilter<"categories"> | Date | string | null
    image_url?: StringNullableFilter<"categories"> | string | null
    products?: ProductsListRelationFilter
  }, "id" | "name">

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    allowed_customizations?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categories"> | number
    name?: StringWithAggregatesFilter<"categories"> | string
    allowed_customizations?: JsonNullableWithAggregatesFilter<"categories">
    created_at?: DateTimeNullableWithAggregatesFilter<"categories"> | Date | string | null
    image_url?: StringNullableWithAggregatesFilter<"categories"> | string | null
  }

  export type couponsWhereInput = {
    AND?: couponsWhereInput | couponsWhereInput[]
    OR?: couponsWhereInput[]
    NOT?: couponsWhereInput | couponsWhereInput[]
    id?: IntFilter<"coupons"> | number
    code?: StringFilter<"coupons"> | string
    discount_percentage?: IntFilter<"coupons"> | number
    applicable_categories?: IntNullableListFilter<"coupons">
    applicable_products?: StringNullableListFilter<"coupons">
    active?: IntNullableFilter<"coupons"> | number | null
    created_at?: DateTimeNullableFilter<"coupons"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"coupons"> | Date | string | null
  }

  export type couponsOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    discount_percentage?: SortOrder
    applicable_categories?: SortOrder
    applicable_products?: SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
  }

  export type couponsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: couponsWhereInput | couponsWhereInput[]
    OR?: couponsWhereInput[]
    NOT?: couponsWhereInput | couponsWhereInput[]
    discount_percentage?: IntFilter<"coupons"> | number
    applicable_categories?: IntNullableListFilter<"coupons">
    applicable_products?: StringNullableListFilter<"coupons">
    active?: IntNullableFilter<"coupons"> | number | null
    created_at?: DateTimeNullableFilter<"coupons"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"coupons"> | Date | string | null
  }, "id" | "code">

  export type couponsOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    discount_percentage?: SortOrder
    applicable_categories?: SortOrder
    applicable_products?: SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    _count?: couponsCountOrderByAggregateInput
    _avg?: couponsAvgOrderByAggregateInput
    _max?: couponsMaxOrderByAggregateInput
    _min?: couponsMinOrderByAggregateInput
    _sum?: couponsSumOrderByAggregateInput
  }

  export type couponsScalarWhereWithAggregatesInput = {
    AND?: couponsScalarWhereWithAggregatesInput | couponsScalarWhereWithAggregatesInput[]
    OR?: couponsScalarWhereWithAggregatesInput[]
    NOT?: couponsScalarWhereWithAggregatesInput | couponsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"coupons"> | number
    code?: StringWithAggregatesFilter<"coupons"> | string
    discount_percentage?: IntWithAggregatesFilter<"coupons"> | number
    applicable_categories?: IntNullableListFilter<"coupons">
    applicable_products?: StringNullableListFilter<"coupons">
    active?: IntNullableWithAggregatesFilter<"coupons"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"coupons"> | Date | string | null
    expires_at?: DateTimeNullableWithAggregatesFilter<"coupons"> | Date | string | null
  }

  export type new_arrivalsWhereInput = {
    AND?: new_arrivalsWhereInput | new_arrivalsWhereInput[]
    OR?: new_arrivalsWhereInput[]
    NOT?: new_arrivalsWhereInput | new_arrivalsWhereInput[]
    id?: IntFilter<"new_arrivals"> | number
    product_id?: StringFilter<"new_arrivals"> | string
    created_at?: DateTimeNullableFilter<"new_arrivals"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type new_arrivalsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type new_arrivalsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: new_arrivalsWhereInput | new_arrivalsWhereInput[]
    OR?: new_arrivalsWhereInput[]
    NOT?: new_arrivalsWhereInput | new_arrivalsWhereInput[]
    created_at?: DateTimeNullableFilter<"new_arrivals"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id" | "product_id">

  export type new_arrivalsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: new_arrivalsCountOrderByAggregateInput
    _avg?: new_arrivalsAvgOrderByAggregateInput
    _max?: new_arrivalsMaxOrderByAggregateInput
    _min?: new_arrivalsMinOrderByAggregateInput
    _sum?: new_arrivalsSumOrderByAggregateInput
  }

  export type new_arrivalsScalarWhereWithAggregatesInput = {
    AND?: new_arrivalsScalarWhereWithAggregatesInput | new_arrivalsScalarWhereWithAggregatesInput[]
    OR?: new_arrivalsScalarWhereWithAggregatesInput[]
    NOT?: new_arrivalsScalarWhereWithAggregatesInput | new_arrivalsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"new_arrivals"> | number
    product_id?: StringWithAggregatesFilter<"new_arrivals"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"new_arrivals"> | Date | string | null
  }

  export type on_saleWhereInput = {
    AND?: on_saleWhereInput | on_saleWhereInput[]
    OR?: on_saleWhereInput[]
    NOT?: on_saleWhereInput | on_saleWhereInput[]
    id?: IntFilter<"on_sale"> | number
    product_id?: StringFilter<"on_sale"> | string
    created_at?: DateTimeNullableFilter<"on_sale"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type on_saleOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type on_saleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: on_saleWhereInput | on_saleWhereInput[]
    OR?: on_saleWhereInput[]
    NOT?: on_saleWhereInput | on_saleWhereInput[]
    created_at?: DateTimeNullableFilter<"on_sale"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id" | "product_id">

  export type on_saleOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: on_saleCountOrderByAggregateInput
    _avg?: on_saleAvgOrderByAggregateInput
    _max?: on_saleMaxOrderByAggregateInput
    _min?: on_saleMinOrderByAggregateInput
    _sum?: on_saleSumOrderByAggregateInput
  }

  export type on_saleScalarWhereWithAggregatesInput = {
    AND?: on_saleScalarWhereWithAggregatesInput | on_saleScalarWhereWithAggregatesInput[]
    OR?: on_saleScalarWhereWithAggregatesInput[]
    NOT?: on_saleScalarWhereWithAggregatesInput | on_saleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"on_sale"> | number
    product_id?: StringWithAggregatesFilter<"on_sale"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"on_sale"> | Date | string | null
  }

  export type order_counterWhereInput = {
    AND?: order_counterWhereInput | order_counterWhereInput[]
    OR?: order_counterWhereInput[]
    NOT?: order_counterWhereInput | order_counterWhereInput[]
    id?: IntFilter<"order_counter"> | number
    current_number?: IntNullableFilter<"order_counter"> | number | null
  }

  export type order_counterOrderByWithRelationInput = {
    id?: SortOrder
    current_number?: SortOrderInput | SortOrder
  }

  export type order_counterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: order_counterWhereInput | order_counterWhereInput[]
    OR?: order_counterWhereInput[]
    NOT?: order_counterWhereInput | order_counterWhereInput[]
    current_number?: IntNullableFilter<"order_counter"> | number | null
  }, "id">

  export type order_counterOrderByWithAggregationInput = {
    id?: SortOrder
    current_number?: SortOrderInput | SortOrder
    _count?: order_counterCountOrderByAggregateInput
    _avg?: order_counterAvgOrderByAggregateInput
    _max?: order_counterMaxOrderByAggregateInput
    _min?: order_counterMinOrderByAggregateInput
    _sum?: order_counterSumOrderByAggregateInput
  }

  export type order_counterScalarWhereWithAggregatesInput = {
    AND?: order_counterScalarWhereWithAggregatesInput | order_counterScalarWhereWithAggregatesInput[]
    OR?: order_counterScalarWhereWithAggregatesInput[]
    NOT?: order_counterScalarWhereWithAggregatesInput | order_counterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"order_counter"> | number
    current_number?: IntNullableWithAggregatesFilter<"order_counter"> | number | null
  }

  export type order_itemsWhereInput = {
    AND?: order_itemsWhereInput | order_itemsWhereInput[]
    OR?: order_itemsWhereInput[]
    NOT?: order_itemsWhereInput | order_itemsWhereInput[]
    id?: IntFilter<"order_items"> | number
    order_id?: IntNullableFilter<"order_items"> | number | null
    product_id?: StringFilter<"order_items"> | string
    quantity?: IntFilter<"order_items"> | number
    selected_customizations?: JsonNullableFilter<"order_items">
    user_customization_type?: StringNullableFilter<"order_items"> | string | null
    user_customization_value?: StringNullableFilter<"order_items"> | string | null
    individual_price?: IntFilter<"order_items"> | number
    orders?: XOR<OrdersNullableScalarRelationFilter, ordersWhereInput> | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type order_itemsOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrderInput | SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    selected_customizations?: SortOrderInput | SortOrder
    user_customization_type?: SortOrderInput | SortOrder
    user_customization_value?: SortOrderInput | SortOrder
    individual_price?: SortOrder
    orders?: ordersOrderByWithRelationInput
    products?: productsOrderByWithRelationInput
  }

  export type order_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: order_itemsWhereInput | order_itemsWhereInput[]
    OR?: order_itemsWhereInput[]
    NOT?: order_itemsWhereInput | order_itemsWhereInput[]
    order_id?: IntNullableFilter<"order_items"> | number | null
    product_id?: StringFilter<"order_items"> | string
    quantity?: IntFilter<"order_items"> | number
    selected_customizations?: JsonNullableFilter<"order_items">
    user_customization_type?: StringNullableFilter<"order_items"> | string | null
    user_customization_value?: StringNullableFilter<"order_items"> | string | null
    individual_price?: IntFilter<"order_items"> | number
    orders?: XOR<OrdersNullableScalarRelationFilter, ordersWhereInput> | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id">

  export type order_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrderInput | SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    selected_customizations?: SortOrderInput | SortOrder
    user_customization_type?: SortOrderInput | SortOrder
    user_customization_value?: SortOrderInput | SortOrder
    individual_price?: SortOrder
    _count?: order_itemsCountOrderByAggregateInput
    _avg?: order_itemsAvgOrderByAggregateInput
    _max?: order_itemsMaxOrderByAggregateInput
    _min?: order_itemsMinOrderByAggregateInput
    _sum?: order_itemsSumOrderByAggregateInput
  }

  export type order_itemsScalarWhereWithAggregatesInput = {
    AND?: order_itemsScalarWhereWithAggregatesInput | order_itemsScalarWhereWithAggregatesInput[]
    OR?: order_itemsScalarWhereWithAggregatesInput[]
    NOT?: order_itemsScalarWhereWithAggregatesInput | order_itemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"order_items"> | number
    order_id?: IntNullableWithAggregatesFilter<"order_items"> | number | null
    product_id?: StringWithAggregatesFilter<"order_items"> | string
    quantity?: IntWithAggregatesFilter<"order_items"> | number
    selected_customizations?: JsonNullableWithAggregatesFilter<"order_items">
    user_customization_type?: StringNullableWithAggregatesFilter<"order_items"> | string | null
    user_customization_value?: StringNullableWithAggregatesFilter<"order_items"> | string | null
    individual_price?: IntWithAggregatesFilter<"order_items"> | number
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    id?: IntFilter<"orders"> | number
    order_id?: StringNullableFilter<"orders"> | string | null
    clerkId?: StringNullableFilter<"orders"> | string | null
    total_price?: IntFilter<"orders"> | number
    status?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    receipt_id?: IntNullableFilter<"orders"> | number | null
    order_items?: Order_itemsListRelationFilter
    receipts?: XOR<ReceiptsNullableScalarRelationFilter, receiptsWhereInput> | null
  }

  export type ordersOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrderInput | SortOrder
    clerkId?: SortOrderInput | SortOrder
    total_price?: SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    receipt_id?: SortOrderInput | SortOrder
    order_items?: order_itemsOrderByRelationAggregateInput
    receipts?: receiptsOrderByWithRelationInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    order_id?: string
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    clerkId?: StringNullableFilter<"orders"> | string | null
    total_price?: IntFilter<"orders"> | number
    status?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    receipt_id?: IntNullableFilter<"orders"> | number | null
    order_items?: Order_itemsListRelationFilter
    receipts?: XOR<ReceiptsNullableScalarRelationFilter, receiptsWhereInput> | null
  }, "id" | "order_id">

  export type ordersOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrderInput | SortOrder
    clerkId?: SortOrderInput | SortOrder
    total_price?: SortOrder
    status?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    receipt_id?: SortOrderInput | SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orders"> | number
    order_id?: StringNullableWithAggregatesFilter<"orders"> | string | null
    clerkId?: StringNullableWithAggregatesFilter<"orders"> | string | null
    total_price?: IntWithAggregatesFilter<"orders"> | number
    status?: StringNullableWithAggregatesFilter<"orders"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"orders"> | Date | string | null
    receipt_id?: IntNullableWithAggregatesFilter<"orders"> | number | null
  }

  export type product_reviewsWhereInput = {
    AND?: product_reviewsWhereInput | product_reviewsWhereInput[]
    OR?: product_reviewsWhereInput[]
    NOT?: product_reviewsWhereInput | product_reviewsWhereInput[]
    id?: IntFilter<"product_reviews"> | number
    clerkId?: StringFilter<"product_reviews"> | string
    user_name?: StringFilter<"product_reviews"> | string
    product_id?: StringFilter<"product_reviews"> | string
    rating?: IntFilter<"product_reviews"> | number
    review_text?: StringNullableFilter<"product_reviews"> | string | null
    created_at?: DateTimeNullableFilter<"product_reviews"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type product_reviewsOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    user_name?: SortOrder
    product_id?: SortOrder
    rating?: SortOrder
    review_text?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type product_reviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    clerkId_product_id?: product_reviewsClerkIdProduct_idCompoundUniqueInput
    AND?: product_reviewsWhereInput | product_reviewsWhereInput[]
    OR?: product_reviewsWhereInput[]
    NOT?: product_reviewsWhereInput | product_reviewsWhereInput[]
    clerkId?: StringFilter<"product_reviews"> | string
    user_name?: StringFilter<"product_reviews"> | string
    product_id?: StringFilter<"product_reviews"> | string
    rating?: IntFilter<"product_reviews"> | number
    review_text?: StringNullableFilter<"product_reviews"> | string | null
    created_at?: DateTimeNullableFilter<"product_reviews"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id" | "clerkId_product_id">

  export type product_reviewsOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    user_name?: SortOrder
    product_id?: SortOrder
    rating?: SortOrder
    review_text?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: product_reviewsCountOrderByAggregateInput
    _avg?: product_reviewsAvgOrderByAggregateInput
    _max?: product_reviewsMaxOrderByAggregateInput
    _min?: product_reviewsMinOrderByAggregateInput
    _sum?: product_reviewsSumOrderByAggregateInput
  }

  export type product_reviewsScalarWhereWithAggregatesInput = {
    AND?: product_reviewsScalarWhereWithAggregatesInput | product_reviewsScalarWhereWithAggregatesInput[]
    OR?: product_reviewsScalarWhereWithAggregatesInput[]
    NOT?: product_reviewsScalarWhereWithAggregatesInput | product_reviewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_reviews"> | number
    clerkId?: StringWithAggregatesFilter<"product_reviews"> | string
    user_name?: StringWithAggregatesFilter<"product_reviews"> | string
    product_id?: StringWithAggregatesFilter<"product_reviews"> | string
    rating?: IntWithAggregatesFilter<"product_reviews"> | number
    review_text?: StringNullableWithAggregatesFilter<"product_reviews"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"product_reviews"> | Date | string | null
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: IntFilter<"products"> | number
    product_id?: StringFilter<"products"> | string
    main_image_url?: StringFilter<"products"> | string
    side_images_url?: JsonNullableFilter<"products">
    name?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    category_id?: IntFilter<"products"> | number
    description?: StringNullableFilter<"products"> | string | null
    customization_options?: JsonNullableFilter<"products">
    status?: EnumproductstatusFilter<"products"> | $Enums.productstatus
    average_rating?: FloatNullableFilter<"products"> | number | null
    created_at?: DateTimeNullableFilter<"products"> | Date | string | null
    bulk_prices?: JsonNullableFilter<"products">
    dimensions?: JsonNullableFilter<"products">
    weight?: IntNullableFilter<"products"> | number | null
    material?: StringNullableFilter<"products"> | string | null
    standard_delivery_time?: StringNullableFilter<"products"> | string | null
    express_delivery_time?: StringNullableFilter<"products"> | string | null
    bestselling?: XOR<BestsellingNullableScalarRelationFilter, bestsellingWhereInput> | null
    new_arrivals?: XOR<New_arrivalsNullableScalarRelationFilter, new_arrivalsWhereInput> | null
    on_sale?: XOR<On_saleNullableScalarRelationFilter, on_saleWhereInput> | null
    order_items?: Order_itemsListRelationFilter
    product_reviews?: Product_reviewsListRelationFilter
    categories?: XOR<CategoriesScalarRelationFilter, categoriesWhereInput>
    shop_by_need?: Shop_by_needListRelationFilter
    trending?: XOR<TrendingNullableScalarRelationFilter, trendingWhereInput> | null
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    main_image_url?: SortOrder
    side_images_url?: SortOrderInput | SortOrder
    name?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    description?: SortOrderInput | SortOrder
    customization_options?: SortOrderInput | SortOrder
    status?: SortOrder
    average_rating?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    bulk_prices?: SortOrderInput | SortOrder
    dimensions?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    material?: SortOrderInput | SortOrder
    standard_delivery_time?: SortOrderInput | SortOrder
    express_delivery_time?: SortOrderInput | SortOrder
    bestselling?: bestsellingOrderByWithRelationInput
    new_arrivals?: new_arrivalsOrderByWithRelationInput
    on_sale?: on_saleOrderByWithRelationInput
    order_items?: order_itemsOrderByRelationAggregateInput
    product_reviews?: product_reviewsOrderByRelationAggregateInput
    categories?: categoriesOrderByWithRelationInput
    shop_by_need?: shop_by_needOrderByRelationAggregateInput
    trending?: trendingOrderByWithRelationInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    main_image_url?: StringFilter<"products"> | string
    side_images_url?: JsonNullableFilter<"products">
    name?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    category_id?: IntFilter<"products"> | number
    description?: StringNullableFilter<"products"> | string | null
    customization_options?: JsonNullableFilter<"products">
    status?: EnumproductstatusFilter<"products"> | $Enums.productstatus
    average_rating?: FloatNullableFilter<"products"> | number | null
    created_at?: DateTimeNullableFilter<"products"> | Date | string | null
    bulk_prices?: JsonNullableFilter<"products">
    dimensions?: JsonNullableFilter<"products">
    weight?: IntNullableFilter<"products"> | number | null
    material?: StringNullableFilter<"products"> | string | null
    standard_delivery_time?: StringNullableFilter<"products"> | string | null
    express_delivery_time?: StringNullableFilter<"products"> | string | null
    bestselling?: XOR<BestsellingNullableScalarRelationFilter, bestsellingWhereInput> | null
    new_arrivals?: XOR<New_arrivalsNullableScalarRelationFilter, new_arrivalsWhereInput> | null
    on_sale?: XOR<On_saleNullableScalarRelationFilter, on_saleWhereInput> | null
    order_items?: Order_itemsListRelationFilter
    product_reviews?: Product_reviewsListRelationFilter
    categories?: XOR<CategoriesScalarRelationFilter, categoriesWhereInput>
    shop_by_need?: Shop_by_needListRelationFilter
    trending?: XOR<TrendingNullableScalarRelationFilter, trendingWhereInput> | null
  }, "id" | "product_id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    main_image_url?: SortOrder
    side_images_url?: SortOrderInput | SortOrder
    name?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    description?: SortOrderInput | SortOrder
    customization_options?: SortOrderInput | SortOrder
    status?: SortOrder
    average_rating?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    bulk_prices?: SortOrderInput | SortOrder
    dimensions?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    material?: SortOrderInput | SortOrder
    standard_delivery_time?: SortOrderInput | SortOrder
    express_delivery_time?: SortOrderInput | SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"products"> | number
    product_id?: StringWithAggregatesFilter<"products"> | string
    main_image_url?: StringWithAggregatesFilter<"products"> | string
    side_images_url?: JsonNullableWithAggregatesFilter<"products">
    name?: StringWithAggregatesFilter<"products"> | string
    price?: IntWithAggregatesFilter<"products"> | number
    category_id?: IntWithAggregatesFilter<"products"> | number
    description?: StringNullableWithAggregatesFilter<"products"> | string | null
    customization_options?: JsonNullableWithAggregatesFilter<"products">
    status?: EnumproductstatusWithAggregatesFilter<"products"> | $Enums.productstatus
    average_rating?: FloatNullableWithAggregatesFilter<"products"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"products"> | Date | string | null
    bulk_prices?: JsonNullableWithAggregatesFilter<"products">
    dimensions?: JsonNullableWithAggregatesFilter<"products">
    weight?: IntNullableWithAggregatesFilter<"products"> | number | null
    material?: StringNullableWithAggregatesFilter<"products"> | string | null
    standard_delivery_time?: StringNullableWithAggregatesFilter<"products"> | string | null
    express_delivery_time?: StringNullableWithAggregatesFilter<"products"> | string | null
  }

  export type receiptsWhereInput = {
    AND?: receiptsWhereInput | receiptsWhereInput[]
    OR?: receiptsWhereInput[]
    NOT?: receiptsWhereInput | receiptsWhereInput[]
    id?: IntFilter<"receipts"> | number
    payment_reference?: StringNullableFilter<"receipts"> | string | null
    amount_paid?: IntNullableFilter<"receipts"> | number | null
    created_at?: DateTimeNullableFilter<"receipts"> | Date | string | null
    orders?: OrdersListRelationFilter
  }

  export type receiptsOrderByWithRelationInput = {
    id?: SortOrder
    payment_reference?: SortOrderInput | SortOrder
    amount_paid?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    orders?: ordersOrderByRelationAggregateInput
  }

  export type receiptsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    payment_reference?: string
    AND?: receiptsWhereInput | receiptsWhereInput[]
    OR?: receiptsWhereInput[]
    NOT?: receiptsWhereInput | receiptsWhereInput[]
    amount_paid?: IntNullableFilter<"receipts"> | number | null
    created_at?: DateTimeNullableFilter<"receipts"> | Date | string | null
    orders?: OrdersListRelationFilter
  }, "id" | "payment_reference">

  export type receiptsOrderByWithAggregationInput = {
    id?: SortOrder
    payment_reference?: SortOrderInput | SortOrder
    amount_paid?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: receiptsCountOrderByAggregateInput
    _avg?: receiptsAvgOrderByAggregateInput
    _max?: receiptsMaxOrderByAggregateInput
    _min?: receiptsMinOrderByAggregateInput
    _sum?: receiptsSumOrderByAggregateInput
  }

  export type receiptsScalarWhereWithAggregatesInput = {
    AND?: receiptsScalarWhereWithAggregatesInput | receiptsScalarWhereWithAggregatesInput[]
    OR?: receiptsScalarWhereWithAggregatesInput[]
    NOT?: receiptsScalarWhereWithAggregatesInput | receiptsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"receipts"> | number
    payment_reference?: StringNullableWithAggregatesFilter<"receipts"> | string | null
    amount_paid?: IntNullableWithAggregatesFilter<"receipts"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"receipts"> | Date | string | null
  }

  export type shop_by_needWhereInput = {
    AND?: shop_by_needWhereInput | shop_by_needWhereInput[]
    OR?: shop_by_needWhereInput[]
    NOT?: shop_by_needWhereInput | shop_by_needWhereInput[]
    id?: IntFilter<"shop_by_need"> | number
    product_id?: StringFilter<"shop_by_need"> | string
    need?: StringFilter<"shop_by_need"> | string
    created_at?: DateTimeNullableFilter<"shop_by_need"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type shop_by_needOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    need?: SortOrder
    created_at?: SortOrderInput | SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type shop_by_needWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id_need?: shop_by_needProduct_idNeedCompoundUniqueInput
    AND?: shop_by_needWhereInput | shop_by_needWhereInput[]
    OR?: shop_by_needWhereInput[]
    NOT?: shop_by_needWhereInput | shop_by_needWhereInput[]
    product_id?: StringFilter<"shop_by_need"> | string
    need?: StringFilter<"shop_by_need"> | string
    created_at?: DateTimeNullableFilter<"shop_by_need"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id" | "product_id_need">

  export type shop_by_needOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    need?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: shop_by_needCountOrderByAggregateInput
    _avg?: shop_by_needAvgOrderByAggregateInput
    _max?: shop_by_needMaxOrderByAggregateInput
    _min?: shop_by_needMinOrderByAggregateInput
    _sum?: shop_by_needSumOrderByAggregateInput
  }

  export type shop_by_needScalarWhereWithAggregatesInput = {
    AND?: shop_by_needScalarWhereWithAggregatesInput | shop_by_needScalarWhereWithAggregatesInput[]
    OR?: shop_by_needScalarWhereWithAggregatesInput[]
    NOT?: shop_by_needScalarWhereWithAggregatesInput | shop_by_needScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"shop_by_need"> | number
    product_id?: StringWithAggregatesFilter<"shop_by_need"> | string
    need?: StringWithAggregatesFilter<"shop_by_need"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"shop_by_need"> | Date | string | null
  }

  export type text_bannersWhereInput = {
    AND?: text_bannersWhereInput | text_bannersWhereInput[]
    OR?: text_bannersWhereInput[]
    NOT?: text_bannersWhereInput | text_bannersWhereInput[]
    id?: IntFilter<"text_banners"> | number
    text?: StringFilter<"text_banners"> | string
    background_color?: StringNullableFilter<"text_banners"> | string | null
    text_color?: StringNullableFilter<"text_banners"> | string | null
    display_order?: IntNullableFilter<"text_banners"> | number | null
    active?: IntNullableFilter<"text_banners"> | number | null
    created_at?: DateTimeNullableFilter<"text_banners"> | Date | string | null
  }

  export type text_bannersOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    background_color?: SortOrderInput | SortOrder
    text_color?: SortOrderInput | SortOrder
    display_order?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
  }

  export type text_bannersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: text_bannersWhereInput | text_bannersWhereInput[]
    OR?: text_bannersWhereInput[]
    NOT?: text_bannersWhereInput | text_bannersWhereInput[]
    text?: StringFilter<"text_banners"> | string
    background_color?: StringNullableFilter<"text_banners"> | string | null
    text_color?: StringNullableFilter<"text_banners"> | string | null
    display_order?: IntNullableFilter<"text_banners"> | number | null
    active?: IntNullableFilter<"text_banners"> | number | null
    created_at?: DateTimeNullableFilter<"text_banners"> | Date | string | null
  }, "id">

  export type text_bannersOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    background_color?: SortOrderInput | SortOrder
    text_color?: SortOrderInput | SortOrder
    display_order?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: text_bannersCountOrderByAggregateInput
    _avg?: text_bannersAvgOrderByAggregateInput
    _max?: text_bannersMaxOrderByAggregateInput
    _min?: text_bannersMinOrderByAggregateInput
    _sum?: text_bannersSumOrderByAggregateInput
  }

  export type text_bannersScalarWhereWithAggregatesInput = {
    AND?: text_bannersScalarWhereWithAggregatesInput | text_bannersScalarWhereWithAggregatesInput[]
    OR?: text_bannersScalarWhereWithAggregatesInput[]
    NOT?: text_bannersScalarWhereWithAggregatesInput | text_bannersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"text_banners"> | number
    text?: StringWithAggregatesFilter<"text_banners"> | string
    background_color?: StringNullableWithAggregatesFilter<"text_banners"> | string | null
    text_color?: StringNullableWithAggregatesFilter<"text_banners"> | string | null
    display_order?: IntNullableWithAggregatesFilter<"text_banners"> | number | null
    active?: IntNullableWithAggregatesFilter<"text_banners"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"text_banners"> | Date | string | null
  }

  export type trendingWhereInput = {
    AND?: trendingWhereInput | trendingWhereInput[]
    OR?: trendingWhereInput[]
    NOT?: trendingWhereInput | trendingWhereInput[]
    id?: IntFilter<"trending"> | number
    product_id?: StringFilter<"trending"> | string
    created_at?: DateTimeNullableFilter<"trending"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }

  export type trendingOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type trendingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: trendingWhereInput | trendingWhereInput[]
    OR?: trendingWhereInput[]
    NOT?: trendingWhereInput | trendingWhereInput[]
    created_at?: DateTimeNullableFilter<"trending"> | Date | string | null
    products?: XOR<ProductsScalarRelationFilter, productsWhereInput>
  }, "id" | "product_id">

  export type trendingOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: trendingCountOrderByAggregateInput
    _avg?: trendingAvgOrderByAggregateInput
    _max?: trendingMaxOrderByAggregateInput
    _min?: trendingMinOrderByAggregateInput
    _sum?: trendingSumOrderByAggregateInput
  }

  export type trendingScalarWhereWithAggregatesInput = {
    AND?: trendingScalarWhereWithAggregatesInput | trendingScalarWhereWithAggregatesInput[]
    OR?: trendingScalarWhereWithAggregatesInput[]
    NOT?: trendingScalarWhereWithAggregatesInput | trendingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trending"> | number
    product_id?: StringWithAggregatesFilter<"trending"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"trending"> | Date | string | null
  }

  export type user_detailsWhereInput = {
    AND?: user_detailsWhereInput | user_detailsWhereInput[]
    OR?: user_detailsWhereInput[]
    NOT?: user_detailsWhereInput | user_detailsWhereInput[]
    id?: IntFilter<"user_details"> | number
    clerkId?: StringNullableFilter<"user_details"> | string | null
    address?: StringNullableFilter<"user_details"> | string | null
    city?: StringNullableFilter<"user_details"> | string | null
    state?: StringNullableFilter<"user_details"> | string | null
    country?: StringNullableFilter<"user_details"> | string | null
    pin_code?: StringNullableFilter<"user_details"> | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type user_detailsOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    pin_code?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type user_detailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    clerkId?: string
    AND?: user_detailsWhereInput | user_detailsWhereInput[]
    OR?: user_detailsWhereInput[]
    NOT?: user_detailsWhereInput | user_detailsWhereInput[]
    address?: StringNullableFilter<"user_details"> | string | null
    city?: StringNullableFilter<"user_details"> | string | null
    state?: StringNullableFilter<"user_details"> | string | null
    country?: StringNullableFilter<"user_details"> | string | null
    pin_code?: StringNullableFilter<"user_details"> | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id" | "clerkId">

  export type user_detailsOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    pin_code?: SortOrderInput | SortOrder
    _count?: user_detailsCountOrderByAggregateInput
    _avg?: user_detailsAvgOrderByAggregateInput
    _max?: user_detailsMaxOrderByAggregateInput
    _min?: user_detailsMinOrderByAggregateInput
    _sum?: user_detailsSumOrderByAggregateInput
  }

  export type user_detailsScalarWhereWithAggregatesInput = {
    AND?: user_detailsScalarWhereWithAggregatesInput | user_detailsScalarWhereWithAggregatesInput[]
    OR?: user_detailsScalarWhereWithAggregatesInput[]
    NOT?: user_detailsScalarWhereWithAggregatesInput | user_detailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_details"> | number
    clerkId?: StringNullableWithAggregatesFilter<"user_details"> | string | null
    address?: StringNullableWithAggregatesFilter<"user_details"> | string | null
    city?: StringNullableWithAggregatesFilter<"user_details"> | string | null
    state?: StringNullableWithAggregatesFilter<"user_details"> | string | null
    country?: StringNullableWithAggregatesFilter<"user_details"> | string | null
    pin_code?: StringNullableWithAggregatesFilter<"user_details"> | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    clerkId?: StringFilter<"users"> | string
    first_name?: StringFilter<"users"> | string
    last_name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    phone_number?: StringFilter<"users"> | string
    role?: EnumuserroleFilter<"users"> | $Enums.userrole
    user_details?: XOR<User_detailsNullableScalarRelationFilter, user_detailsWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    role?: SortOrder
    user_details?: user_detailsOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    clerkId?: string
    email?: string
    phone_number?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    first_name?: StringFilter<"users"> | string
    last_name?: StringFilter<"users"> | string
    role?: EnumuserroleFilter<"users"> | $Enums.userrole
    user_details?: XOR<User_detailsNullableScalarRelationFilter, user_detailsWhereInput> | null
  }, "id" | "clerkId" | "email" | "phone_number">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    clerkId?: StringWithAggregatesFilter<"users"> | string
    first_name?: StringWithAggregatesFilter<"users"> | string
    last_name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    phone_number?: StringWithAggregatesFilter<"users"> | string
    role?: EnumuserroleWithAggregatesFilter<"users"> | $Enums.userrole
  }

  export type alembic_versionCreateInput = {
    version_num: string
  }

  export type alembic_versionUncheckedCreateInput = {
    version_num: string
  }

  export type alembic_versionUpdateInput = {
    version_num?: StringFieldUpdateOperationsInput | string
  }

  export type alembic_versionUncheckedUpdateInput = {
    version_num?: StringFieldUpdateOperationsInput | string
  }

  export type alembic_versionCreateManyInput = {
    version_num: string
  }

  export type alembic_versionUpdateManyMutationInput = {
    version_num?: StringFieldUpdateOperationsInput | string
  }

  export type alembic_versionUncheckedUpdateManyInput = {
    version_num?: StringFieldUpdateOperationsInput | string
  }

  export type bannersCreateInput = {
    image_url: string
    display_order?: number | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type bannersUncheckedCreateInput = {
    id?: number
    image_url: string
    display_order?: number | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type bannersUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bannersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bannersCreateManyInput = {
    id?: number
    image_url: string
    display_order?: number | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type bannersUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bannersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bestsellingCreateInput = {
    created_at?: Date | string | null
    products: productsCreateNestedOneWithoutBestsellingInput
  }

  export type bestsellingUncheckedCreateInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type bestsellingUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateOneRequiredWithoutBestsellingNestedInput
  }

  export type bestsellingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bestsellingCreateManyInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type bestsellingUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bestsellingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesCreateInput = {
    name: string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    image_url?: string | null
    products?: productsCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    name: string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    image_url?: string | null
    products?: productsUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    products?: productsUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    products?: productsUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    name: string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    image_url?: string | null
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type couponsCreateInput = {
    code: string
    discount_percentage: number
    applicable_categories?: couponsCreateapplicable_categoriesInput | number[]
    applicable_products?: couponsCreateapplicable_productsInput | string[]
    active?: number | null
    created_at?: Date | string | null
    expires_at?: Date | string | null
  }

  export type couponsUncheckedCreateInput = {
    id?: number
    code: string
    discount_percentage: number
    applicable_categories?: couponsCreateapplicable_categoriesInput | number[]
    applicable_products?: couponsCreateapplicable_productsInput | string[]
    active?: number | null
    created_at?: Date | string | null
    expires_at?: Date | string | null
  }

  export type couponsUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    discount_percentage?: IntFieldUpdateOperationsInput | number
    applicable_categories?: couponsUpdateapplicable_categoriesInput | number[]
    applicable_products?: couponsUpdateapplicable_productsInput | string[]
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type couponsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    discount_percentage?: IntFieldUpdateOperationsInput | number
    applicable_categories?: couponsUpdateapplicable_categoriesInput | number[]
    applicable_products?: couponsUpdateapplicable_productsInput | string[]
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type couponsCreateManyInput = {
    id?: number
    code: string
    discount_percentage: number
    applicable_categories?: couponsCreateapplicable_categoriesInput | number[]
    applicable_products?: couponsCreateapplicable_productsInput | string[]
    active?: number | null
    created_at?: Date | string | null
    expires_at?: Date | string | null
  }

  export type couponsUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    discount_percentage?: IntFieldUpdateOperationsInput | number
    applicable_categories?: couponsUpdateapplicable_categoriesInput | number[]
    applicable_products?: couponsUpdateapplicable_productsInput | string[]
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type couponsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    discount_percentage?: IntFieldUpdateOperationsInput | number
    applicable_categories?: couponsUpdateapplicable_categoriesInput | number[]
    applicable_products?: couponsUpdateapplicable_productsInput | string[]
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_arrivalsCreateInput = {
    created_at?: Date | string | null
    products: productsCreateNestedOneWithoutNew_arrivalsInput
  }

  export type new_arrivalsUncheckedCreateInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type new_arrivalsUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateOneRequiredWithoutNew_arrivalsNestedInput
  }

  export type new_arrivalsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_arrivalsCreateManyInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type new_arrivalsUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_arrivalsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type on_saleCreateInput = {
    created_at?: Date | string | null
    products: productsCreateNestedOneWithoutOn_saleInput
  }

  export type on_saleUncheckedCreateInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type on_saleUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateOneRequiredWithoutOn_saleNestedInput
  }

  export type on_saleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type on_saleCreateManyInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type on_saleUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type on_saleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type order_counterCreateInput = {
    current_number?: number | null
  }

  export type order_counterUncheckedCreateInput = {
    id?: number
    current_number?: number | null
  }

  export type order_counterUpdateInput = {
    current_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_counterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    current_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_counterCreateManyInput = {
    id?: number
    current_number?: number | null
  }

  export type order_counterUpdateManyMutationInput = {
    current_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_counterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    current_number?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type order_itemsCreateInput = {
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
    orders?: ordersCreateNestedOneWithoutOrder_itemsInput
    products: productsCreateNestedOneWithoutOrder_itemsInput
  }

  export type order_itemsUncheckedCreateInput = {
    id?: number
    order_id?: number | null
    product_id: string
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
  }

  export type order_itemsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
    orders?: ordersUpdateOneWithoutOrder_itemsNestedInput
    products?: productsUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type order_itemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsCreateManyInput = {
    id?: number
    order_id?: number | null
    product_id: string
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
  }

  export type order_itemsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type ordersCreateInput = {
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    order_items?: order_itemsCreateNestedManyWithoutOrdersInput
    receipts?: receiptsCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    id?: number
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    receipt_id?: number | null
    order_items?: order_itemsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_items?: order_itemsUpdateManyWithoutOrdersNestedInput
    receipts?: receiptsUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receipt_id?: NullableIntFieldUpdateOperationsInput | number | null
    order_items?: order_itemsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    id?: number
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    receipt_id?: number | null
  }

  export type ordersUpdateManyMutationInput = {
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receipt_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_reviewsCreateInput = {
    clerkId: string
    user_name: string
    rating: number
    review_text?: string | null
    created_at?: Date | string | null
    products: productsCreateNestedOneWithoutProduct_reviewsInput
  }

  export type product_reviewsUncheckedCreateInput = {
    id?: number
    clerkId: string
    user_name: string
    product_id: string
    rating: number
    review_text?: string | null
    created_at?: Date | string | null
  }

  export type product_reviewsUpdateInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateOneRequiredWithoutProduct_reviewsNestedInput
  }

  export type product_reviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_reviewsCreateManyInput = {
    id?: number
    clerkId: string
    user_name: string
    product_id: string
    rating: number
    review_text?: string | null
    created_at?: Date | string | null
  }

  export type product_reviewsUpdateManyMutationInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_reviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productsCreateInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsUpdateInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type productsCreateManyInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
  }

  export type productsUpdateManyMutationInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type receiptsCreateInput = {
    payment_reference?: string | null
    amount_paid?: number | null
    created_at?: Date | string | null
    orders?: ordersCreateNestedManyWithoutReceiptsInput
  }

  export type receiptsUncheckedCreateInput = {
    id?: number
    payment_reference?: string | null
    amount_paid?: number | null
    created_at?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutReceiptsInput
  }

  export type receiptsUpdateInput = {
    payment_reference?: NullableStringFieldUpdateOperationsInput | string | null
    amount_paid?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutReceiptsNestedInput
  }

  export type receiptsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    payment_reference?: NullableStringFieldUpdateOperationsInput | string | null
    amount_paid?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutReceiptsNestedInput
  }

  export type receiptsCreateManyInput = {
    id?: number
    payment_reference?: string | null
    amount_paid?: number | null
    created_at?: Date | string | null
  }

  export type receiptsUpdateManyMutationInput = {
    payment_reference?: NullableStringFieldUpdateOperationsInput | string | null
    amount_paid?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type receiptsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    payment_reference?: NullableStringFieldUpdateOperationsInput | string | null
    amount_paid?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shop_by_needCreateInput = {
    need: string
    created_at?: Date | string | null
    products: productsCreateNestedOneWithoutShop_by_needInput
  }

  export type shop_by_needUncheckedCreateInput = {
    id?: number
    product_id: string
    need: string
    created_at?: Date | string | null
  }

  export type shop_by_needUpdateInput = {
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateOneRequiredWithoutShop_by_needNestedInput
  }

  export type shop_by_needUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shop_by_needCreateManyInput = {
    id?: number
    product_id: string
    need: string
    created_at?: Date | string | null
  }

  export type shop_by_needUpdateManyMutationInput = {
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shop_by_needUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type text_bannersCreateInput = {
    text: string
    background_color?: string | null
    text_color?: string | null
    display_order?: number | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type text_bannersUncheckedCreateInput = {
    id?: number
    text: string
    background_color?: string | null
    text_color?: string | null
    display_order?: number | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type text_bannersUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type text_bannersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type text_bannersCreateManyInput = {
    id?: number
    text: string
    background_color?: string | null
    text_color?: string | null
    display_order?: number | null
    active?: number | null
    created_at?: Date | string | null
  }

  export type text_bannersUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type text_bannersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    background_color?: NullableStringFieldUpdateOperationsInput | string | null
    text_color?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type trendingCreateInput = {
    created_at?: Date | string | null
    products: productsCreateNestedOneWithoutTrendingInput
  }

  export type trendingUncheckedCreateInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type trendingUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateOneRequiredWithoutTrendingNestedInput
  }

  export type trendingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type trendingCreateManyInput = {
    id?: number
    product_id: string
    created_at?: Date | string | null
  }

  export type trendingUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type trendingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_detailsCreateInput = {
    address?: string | null
    city?: string | null
    state?: string | null
    country?: string | null
    pin_code?: string | null
    users?: usersCreateNestedOneWithoutUser_detailsInput
  }

  export type user_detailsUncheckedCreateInput = {
    id?: number
    clerkId?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    country?: string | null
    pin_code?: string | null
  }

  export type user_detailsUpdateInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    pin_code?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutUser_detailsNestedInput
  }

  export type user_detailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    pin_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_detailsCreateManyInput = {
    id?: number
    clerkId?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    country?: string | null
    pin_code?: string | null
  }

  export type user_detailsUpdateManyMutationInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    pin_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_detailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    pin_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    clerkId: string
    first_name: string
    last_name: string
    email: string
    phone_number: string
    role: $Enums.userrole
    user_details?: user_detailsCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    clerkId: string
    first_name: string
    last_name: string
    email: string
    phone_number: string
    role: $Enums.userrole
    user_details?: user_detailsUncheckedCreateNestedOneWithoutUsersInput
  }

  export type usersUpdateInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    role?: EnumuserroleFieldUpdateOperationsInput | $Enums.userrole
    user_details?: user_detailsUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    role?: EnumuserroleFieldUpdateOperationsInput | $Enums.userrole
    user_details?: user_detailsUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    clerkId: string
    first_name: string
    last_name: string
    email: string
    phone_number: string
    role: $Enums.userrole
  }

  export type usersUpdateManyMutationInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    role?: EnumuserroleFieldUpdateOperationsInput | $Enums.userrole
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    role?: EnumuserroleFieldUpdateOperationsInput | $Enums.userrole
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type alembic_versionCountOrderByAggregateInput = {
    version_num?: SortOrder
  }

  export type alembic_versionMaxOrderByAggregateInput = {
    version_num?: SortOrder
  }

  export type alembic_versionMinOrderByAggregateInput = {
    version_num?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type bannersCountOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type bannersAvgOrderByAggregateInput = {
    id?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
  }

  export type bannersMaxOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type bannersMinOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type bannersSumOrderByAggregateInput = {
    id?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProductsScalarRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type bestsellingCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type bestsellingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type bestsellingMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type bestsellingMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type bestsellingSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    allowed_customizations?: SortOrder
    created_at?: SortOrder
    image_url?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    image_url?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    image_url?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type couponsCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    discount_percentage?: SortOrder
    applicable_categories?: SortOrder
    applicable_products?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
  }

  export type couponsAvgOrderByAggregateInput = {
    id?: SortOrder
    discount_percentage?: SortOrder
    applicable_categories?: SortOrder
    active?: SortOrder
  }

  export type couponsMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    discount_percentage?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
  }

  export type couponsMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    discount_percentage?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
  }

  export type couponsSumOrderByAggregateInput = {
    id?: SortOrder
    discount_percentage?: SortOrder
    applicable_categories?: SortOrder
    active?: SortOrder
  }

  export type new_arrivalsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type new_arrivalsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type new_arrivalsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type new_arrivalsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type new_arrivalsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type on_saleCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type on_saleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type on_saleMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type on_saleMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type on_saleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type order_counterCountOrderByAggregateInput = {
    id?: SortOrder
    current_number?: SortOrder
  }

  export type order_counterAvgOrderByAggregateInput = {
    id?: SortOrder
    current_number?: SortOrder
  }

  export type order_counterMaxOrderByAggregateInput = {
    id?: SortOrder
    current_number?: SortOrder
  }

  export type order_counterMinOrderByAggregateInput = {
    id?: SortOrder
    current_number?: SortOrder
  }

  export type order_counterSumOrderByAggregateInput = {
    id?: SortOrder
    current_number?: SortOrder
  }

  export type OrdersNullableScalarRelationFilter = {
    is?: ordersWhereInput | null
    isNot?: ordersWhereInput | null
  }

  export type order_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    selected_customizations?: SortOrder
    user_customization_type?: SortOrder
    user_customization_value?: SortOrder
    individual_price?: SortOrder
  }

  export type order_itemsAvgOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    quantity?: SortOrder
    individual_price?: SortOrder
  }

  export type order_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    user_customization_type?: SortOrder
    user_customization_value?: SortOrder
    individual_price?: SortOrder
  }

  export type order_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    user_customization_type?: SortOrder
    user_customization_value?: SortOrder
    individual_price?: SortOrder
  }

  export type order_itemsSumOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    quantity?: SortOrder
    individual_price?: SortOrder
  }

  export type Order_itemsListRelationFilter = {
    every?: order_itemsWhereInput
    some?: order_itemsWhereInput
    none?: order_itemsWhereInput
  }

  export type ReceiptsNullableScalarRelationFilter = {
    is?: receiptsWhereInput | null
    isNot?: receiptsWhereInput | null
  }

  export type order_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    clerkId?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    receipt_id?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    id?: SortOrder
    total_price?: SortOrder
    receipt_id?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    clerkId?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    receipt_id?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    clerkId?: SortOrder
    total_price?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    receipt_id?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    id?: SortOrder
    total_price?: SortOrder
    receipt_id?: SortOrder
  }

  export type product_reviewsClerkIdProduct_idCompoundUniqueInput = {
    clerkId: string
    product_id: string
  }

  export type product_reviewsCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    user_name?: SortOrder
    product_id?: SortOrder
    rating?: SortOrder
    review_text?: SortOrder
    created_at?: SortOrder
  }

  export type product_reviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
  }

  export type product_reviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    user_name?: SortOrder
    product_id?: SortOrder
    rating?: SortOrder
    review_text?: SortOrder
    created_at?: SortOrder
  }

  export type product_reviewsMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    user_name?: SortOrder
    product_id?: SortOrder
    rating?: SortOrder
    review_text?: SortOrder
    created_at?: SortOrder
  }

  export type product_reviewsSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
  }

  export type EnumproductstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.productstatus | EnumproductstatusFieldRefInput<$PrismaModel>
    in?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumproductstatusFilter<$PrismaModel> | $Enums.productstatus
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BestsellingNullableScalarRelationFilter = {
    is?: bestsellingWhereInput | null
    isNot?: bestsellingWhereInput | null
  }

  export type New_arrivalsNullableScalarRelationFilter = {
    is?: new_arrivalsWhereInput | null
    isNot?: new_arrivalsWhereInput | null
  }

  export type On_saleNullableScalarRelationFilter = {
    is?: on_saleWhereInput | null
    isNot?: on_saleWhereInput | null
  }

  export type Product_reviewsListRelationFilter = {
    every?: product_reviewsWhereInput
    some?: product_reviewsWhereInput
    none?: product_reviewsWhereInput
  }

  export type CategoriesScalarRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type Shop_by_needListRelationFilter = {
    every?: shop_by_needWhereInput
    some?: shop_by_needWhereInput
    none?: shop_by_needWhereInput
  }

  export type TrendingNullableScalarRelationFilter = {
    is?: trendingWhereInput | null
    isNot?: trendingWhereInput | null
  }

  export type product_reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type shop_by_needOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    main_image_url?: SortOrder
    side_images_url?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    description?: SortOrder
    customization_options?: SortOrder
    status?: SortOrder
    average_rating?: SortOrder
    created_at?: SortOrder
    bulk_prices?: SortOrder
    dimensions?: SortOrder
    weight?: SortOrder
    material?: SortOrder
    standard_delivery_time?: SortOrder
    express_delivery_time?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    average_rating?: SortOrder
    weight?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    main_image_url?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    average_rating?: SortOrder
    created_at?: SortOrder
    weight?: SortOrder
    material?: SortOrder
    standard_delivery_time?: SortOrder
    express_delivery_time?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    main_image_url?: SortOrder
    name?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    average_rating?: SortOrder
    created_at?: SortOrder
    weight?: SortOrder
    material?: SortOrder
    standard_delivery_time?: SortOrder
    express_delivery_time?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    category_id?: SortOrder
    average_rating?: SortOrder
    weight?: SortOrder
  }

  export type EnumproductstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.productstatus | EnumproductstatusFieldRefInput<$PrismaModel>
    in?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumproductstatusWithAggregatesFilter<$PrismaModel> | $Enums.productstatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumproductstatusFilter<$PrismaModel>
    _max?: NestedEnumproductstatusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type receiptsCountOrderByAggregateInput = {
    id?: SortOrder
    payment_reference?: SortOrder
    amount_paid?: SortOrder
    created_at?: SortOrder
  }

  export type receiptsAvgOrderByAggregateInput = {
    id?: SortOrder
    amount_paid?: SortOrder
  }

  export type receiptsMaxOrderByAggregateInput = {
    id?: SortOrder
    payment_reference?: SortOrder
    amount_paid?: SortOrder
    created_at?: SortOrder
  }

  export type receiptsMinOrderByAggregateInput = {
    id?: SortOrder
    payment_reference?: SortOrder
    amount_paid?: SortOrder
    created_at?: SortOrder
  }

  export type receiptsSumOrderByAggregateInput = {
    id?: SortOrder
    amount_paid?: SortOrder
  }

  export type shop_by_needProduct_idNeedCompoundUniqueInput = {
    product_id: string
    need: string
  }

  export type shop_by_needCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    need?: SortOrder
    created_at?: SortOrder
  }

  export type shop_by_needAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type shop_by_needMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    need?: SortOrder
    created_at?: SortOrder
  }

  export type shop_by_needMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    need?: SortOrder
    created_at?: SortOrder
  }

  export type shop_by_needSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type text_bannersCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    background_color?: SortOrder
    text_color?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type text_bannersAvgOrderByAggregateInput = {
    id?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
  }

  export type text_bannersMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    background_color?: SortOrder
    text_color?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type text_bannersMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    background_color?: SortOrder
    text_color?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
  }

  export type text_bannersSumOrderByAggregateInput = {
    id?: SortOrder
    display_order?: SortOrder
    active?: SortOrder
  }

  export type trendingCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type trendingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type trendingMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type trendingMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type trendingSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type user_detailsCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    pin_code?: SortOrder
  }

  export type user_detailsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type user_detailsMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    pin_code?: SortOrder
  }

  export type user_detailsMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    pin_code?: SortOrder
  }

  export type user_detailsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumuserroleFilter<$PrismaModel = never> = {
    equals?: $Enums.userrole | EnumuserroleFieldRefInput<$PrismaModel>
    in?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserroleFilter<$PrismaModel> | $Enums.userrole
  }

  export type User_detailsNullableScalarRelationFilter = {
    is?: user_detailsWhereInput | null
    isNot?: user_detailsWhereInput | null
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    role?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    role?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumuserroleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userrole | EnumuserroleFieldRefInput<$PrismaModel>
    in?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserroleWithAggregatesFilter<$PrismaModel> | $Enums.userrole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserroleFilter<$PrismaModel>
    _max?: NestedEnumuserroleFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productsCreateNestedOneWithoutBestsellingInput = {
    create?: XOR<productsCreateWithoutBestsellingInput, productsUncheckedCreateWithoutBestsellingInput>
    connectOrCreate?: productsCreateOrConnectWithoutBestsellingInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutBestsellingNestedInput = {
    create?: XOR<productsCreateWithoutBestsellingInput, productsUncheckedCreateWithoutBestsellingInput>
    connectOrCreate?: productsCreateOrConnectWithoutBestsellingInput
    upsert?: productsUpsertWithoutBestsellingInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutBestsellingInput, productsUpdateWithoutBestsellingInput>, productsUncheckedUpdateWithoutBestsellingInput>
  }

  export type productsCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput> | productsCreateWithoutCategoriesInput[] | productsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoriesInput | productsCreateOrConnectWithoutCategoriesInput[]
    createMany?: productsCreateManyCategoriesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput> | productsCreateWithoutCategoriesInput[] | productsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoriesInput | productsCreateOrConnectWithoutCategoriesInput[]
    createMany?: productsCreateManyCategoriesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type productsUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput> | productsCreateWithoutCategoriesInput[] | productsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoriesInput | productsCreateOrConnectWithoutCategoriesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoriesInput | productsUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: productsCreateManyCategoriesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoriesInput | productsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoriesInput | productsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput> | productsCreateWithoutCategoriesInput[] | productsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoriesInput | productsCreateOrConnectWithoutCategoriesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoriesInput | productsUpsertWithWhereUniqueWithoutCategoriesInput[]
    createMany?: productsCreateManyCategoriesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoriesInput | productsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoriesInput | productsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type couponsCreateapplicable_categoriesInput = {
    set: number[]
  }

  export type couponsCreateapplicable_productsInput = {
    set: string[]
  }

  export type couponsUpdateapplicable_categoriesInput = {
    set?: number[]
    push?: number | number[]
  }

  export type couponsUpdateapplicable_productsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type productsCreateNestedOneWithoutNew_arrivalsInput = {
    create?: XOR<productsCreateWithoutNew_arrivalsInput, productsUncheckedCreateWithoutNew_arrivalsInput>
    connectOrCreate?: productsCreateOrConnectWithoutNew_arrivalsInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutNew_arrivalsNestedInput = {
    create?: XOR<productsCreateWithoutNew_arrivalsInput, productsUncheckedCreateWithoutNew_arrivalsInput>
    connectOrCreate?: productsCreateOrConnectWithoutNew_arrivalsInput
    upsert?: productsUpsertWithoutNew_arrivalsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutNew_arrivalsInput, productsUpdateWithoutNew_arrivalsInput>, productsUncheckedUpdateWithoutNew_arrivalsInput>
  }

  export type productsCreateNestedOneWithoutOn_saleInput = {
    create?: XOR<productsCreateWithoutOn_saleInput, productsUncheckedCreateWithoutOn_saleInput>
    connectOrCreate?: productsCreateOrConnectWithoutOn_saleInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutOn_saleNestedInput = {
    create?: XOR<productsCreateWithoutOn_saleInput, productsUncheckedCreateWithoutOn_saleInput>
    connectOrCreate?: productsCreateOrConnectWithoutOn_saleInput
    upsert?: productsUpsertWithoutOn_saleInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutOn_saleInput, productsUpdateWithoutOn_saleInput>, productsUncheckedUpdateWithoutOn_saleInput>
  }

  export type ordersCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrder_itemsInput
    connect?: ordersWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrder_itemsInput
    connect?: productsWhereUniqueInput
  }

  export type ordersUpdateOneWithoutOrder_itemsNestedInput = {
    create?: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrder_itemsInput
    upsert?: ordersUpsertWithoutOrder_itemsInput
    disconnect?: ordersWhereInput | boolean
    delete?: ordersWhereInput | boolean
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutOrder_itemsInput, ordersUpdateWithoutOrder_itemsInput>, ordersUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type productsUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: productsCreateOrConnectWithoutOrder_itemsInput
    upsert?: productsUpsertWithoutOrder_itemsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutOrder_itemsInput, productsUpdateWithoutOrder_itemsInput>, productsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type order_itemsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
  }

  export type receiptsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<receiptsCreateWithoutOrdersInput, receiptsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: receiptsCreateOrConnectWithoutOrdersInput
    connect?: receiptsWhereUniqueInput
  }

  export type order_itemsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
  }

  export type order_itemsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    upsert?: order_itemsUpsertWithWhereUniqueWithoutOrdersInput | order_itemsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    set?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    disconnect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    delete?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    update?: order_itemsUpdateWithWhereUniqueWithoutOrdersInput | order_itemsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: order_itemsUpdateManyWithWhereWithoutOrdersInput | order_itemsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
  }

  export type receiptsUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<receiptsCreateWithoutOrdersInput, receiptsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: receiptsCreateOrConnectWithoutOrdersInput
    upsert?: receiptsUpsertWithoutOrdersInput
    disconnect?: receiptsWhereInput | boolean
    delete?: receiptsWhereInput | boolean
    connect?: receiptsWhereUniqueInput
    update?: XOR<XOR<receiptsUpdateToOneWithWhereWithoutOrdersInput, receiptsUpdateWithoutOrdersInput>, receiptsUncheckedUpdateWithoutOrdersInput>
  }

  export type order_itemsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    upsert?: order_itemsUpsertWithWhereUniqueWithoutOrdersInput | order_itemsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    set?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    disconnect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    delete?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    update?: order_itemsUpdateWithWhereUniqueWithoutOrdersInput | order_itemsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: order_itemsUpdateManyWithWhereWithoutOrdersInput | order_itemsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutProduct_reviewsInput = {
    create?: XOR<productsCreateWithoutProduct_reviewsInput, productsUncheckedCreateWithoutProduct_reviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_reviewsInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutProduct_reviewsNestedInput = {
    create?: XOR<productsCreateWithoutProduct_reviewsInput, productsUncheckedCreateWithoutProduct_reviewsInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_reviewsInput
    upsert?: productsUpsertWithoutProduct_reviewsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutProduct_reviewsInput, productsUpdateWithoutProduct_reviewsInput>, productsUncheckedUpdateWithoutProduct_reviewsInput>
  }

  export type bestsellingCreateNestedOneWithoutProductsInput = {
    create?: XOR<bestsellingCreateWithoutProductsInput, bestsellingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: bestsellingCreateOrConnectWithoutProductsInput
    connect?: bestsellingWhereUniqueInput
  }

  export type new_arrivalsCreateNestedOneWithoutProductsInput = {
    create?: XOR<new_arrivalsCreateWithoutProductsInput, new_arrivalsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: new_arrivalsCreateOrConnectWithoutProductsInput
    connect?: new_arrivalsWhereUniqueInput
  }

  export type on_saleCreateNestedOneWithoutProductsInput = {
    create?: XOR<on_saleCreateWithoutProductsInput, on_saleUncheckedCreateWithoutProductsInput>
    connectOrCreate?: on_saleCreateOrConnectWithoutProductsInput
    connect?: on_saleWhereUniqueInput
  }

  export type order_itemsCreateNestedManyWithoutProductsInput = {
    create?: XOR<order_itemsCreateWithoutProductsInput, order_itemsUncheckedCreateWithoutProductsInput> | order_itemsCreateWithoutProductsInput[] | order_itemsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutProductsInput | order_itemsCreateOrConnectWithoutProductsInput[]
    createMany?: order_itemsCreateManyProductsInputEnvelope
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
  }

  export type product_reviewsCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_reviewsCreateWithoutProductsInput, product_reviewsUncheckedCreateWithoutProductsInput> | product_reviewsCreateWithoutProductsInput[] | product_reviewsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_reviewsCreateOrConnectWithoutProductsInput | product_reviewsCreateOrConnectWithoutProductsInput[]
    createMany?: product_reviewsCreateManyProductsInputEnvelope
    connect?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
  }

  export type categoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    connect?: categoriesWhereUniqueInput
  }

  export type shop_by_needCreateNestedManyWithoutProductsInput = {
    create?: XOR<shop_by_needCreateWithoutProductsInput, shop_by_needUncheckedCreateWithoutProductsInput> | shop_by_needCreateWithoutProductsInput[] | shop_by_needUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: shop_by_needCreateOrConnectWithoutProductsInput | shop_by_needCreateOrConnectWithoutProductsInput[]
    createMany?: shop_by_needCreateManyProductsInputEnvelope
    connect?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
  }

  export type trendingCreateNestedOneWithoutProductsInput = {
    create?: XOR<trendingCreateWithoutProductsInput, trendingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: trendingCreateOrConnectWithoutProductsInput
    connect?: trendingWhereUniqueInput
  }

  export type bestsellingUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<bestsellingCreateWithoutProductsInput, bestsellingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: bestsellingCreateOrConnectWithoutProductsInput
    connect?: bestsellingWhereUniqueInput
  }

  export type new_arrivalsUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<new_arrivalsCreateWithoutProductsInput, new_arrivalsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: new_arrivalsCreateOrConnectWithoutProductsInput
    connect?: new_arrivalsWhereUniqueInput
  }

  export type on_saleUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<on_saleCreateWithoutProductsInput, on_saleUncheckedCreateWithoutProductsInput>
    connectOrCreate?: on_saleCreateOrConnectWithoutProductsInput
    connect?: on_saleWhereUniqueInput
  }

  export type order_itemsUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<order_itemsCreateWithoutProductsInput, order_itemsUncheckedCreateWithoutProductsInput> | order_itemsCreateWithoutProductsInput[] | order_itemsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutProductsInput | order_itemsCreateOrConnectWithoutProductsInput[]
    createMany?: order_itemsCreateManyProductsInputEnvelope
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
  }

  export type product_reviewsUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_reviewsCreateWithoutProductsInput, product_reviewsUncheckedCreateWithoutProductsInput> | product_reviewsCreateWithoutProductsInput[] | product_reviewsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_reviewsCreateOrConnectWithoutProductsInput | product_reviewsCreateOrConnectWithoutProductsInput[]
    createMany?: product_reviewsCreateManyProductsInputEnvelope
    connect?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
  }

  export type shop_by_needUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<shop_by_needCreateWithoutProductsInput, shop_by_needUncheckedCreateWithoutProductsInput> | shop_by_needCreateWithoutProductsInput[] | shop_by_needUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: shop_by_needCreateOrConnectWithoutProductsInput | shop_by_needCreateOrConnectWithoutProductsInput[]
    createMany?: shop_by_needCreateManyProductsInputEnvelope
    connect?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
  }

  export type trendingUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<trendingCreateWithoutProductsInput, trendingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: trendingCreateOrConnectWithoutProductsInput
    connect?: trendingWhereUniqueInput
  }

  export type EnumproductstatusFieldUpdateOperationsInput = {
    set?: $Enums.productstatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type bestsellingUpdateOneWithoutProductsNestedInput = {
    create?: XOR<bestsellingCreateWithoutProductsInput, bestsellingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: bestsellingCreateOrConnectWithoutProductsInput
    upsert?: bestsellingUpsertWithoutProductsInput
    disconnect?: bestsellingWhereInput | boolean
    delete?: bestsellingWhereInput | boolean
    connect?: bestsellingWhereUniqueInput
    update?: XOR<XOR<bestsellingUpdateToOneWithWhereWithoutProductsInput, bestsellingUpdateWithoutProductsInput>, bestsellingUncheckedUpdateWithoutProductsInput>
  }

  export type new_arrivalsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<new_arrivalsCreateWithoutProductsInput, new_arrivalsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: new_arrivalsCreateOrConnectWithoutProductsInput
    upsert?: new_arrivalsUpsertWithoutProductsInput
    disconnect?: new_arrivalsWhereInput | boolean
    delete?: new_arrivalsWhereInput | boolean
    connect?: new_arrivalsWhereUniqueInput
    update?: XOR<XOR<new_arrivalsUpdateToOneWithWhereWithoutProductsInput, new_arrivalsUpdateWithoutProductsInput>, new_arrivalsUncheckedUpdateWithoutProductsInput>
  }

  export type on_saleUpdateOneWithoutProductsNestedInput = {
    create?: XOR<on_saleCreateWithoutProductsInput, on_saleUncheckedCreateWithoutProductsInput>
    connectOrCreate?: on_saleCreateOrConnectWithoutProductsInput
    upsert?: on_saleUpsertWithoutProductsInput
    disconnect?: on_saleWhereInput | boolean
    delete?: on_saleWhereInput | boolean
    connect?: on_saleWhereUniqueInput
    update?: XOR<XOR<on_saleUpdateToOneWithWhereWithoutProductsInput, on_saleUpdateWithoutProductsInput>, on_saleUncheckedUpdateWithoutProductsInput>
  }

  export type order_itemsUpdateManyWithoutProductsNestedInput = {
    create?: XOR<order_itemsCreateWithoutProductsInput, order_itemsUncheckedCreateWithoutProductsInput> | order_itemsCreateWithoutProductsInput[] | order_itemsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutProductsInput | order_itemsCreateOrConnectWithoutProductsInput[]
    upsert?: order_itemsUpsertWithWhereUniqueWithoutProductsInput | order_itemsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: order_itemsCreateManyProductsInputEnvelope
    set?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    disconnect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    delete?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    update?: order_itemsUpdateWithWhereUniqueWithoutProductsInput | order_itemsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: order_itemsUpdateManyWithWhereWithoutProductsInput | order_itemsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
  }

  export type product_reviewsUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_reviewsCreateWithoutProductsInput, product_reviewsUncheckedCreateWithoutProductsInput> | product_reviewsCreateWithoutProductsInput[] | product_reviewsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_reviewsCreateOrConnectWithoutProductsInput | product_reviewsCreateOrConnectWithoutProductsInput[]
    upsert?: product_reviewsUpsertWithWhereUniqueWithoutProductsInput | product_reviewsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_reviewsCreateManyProductsInputEnvelope
    set?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    disconnect?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    delete?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    connect?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    update?: product_reviewsUpdateWithWhereUniqueWithoutProductsInput | product_reviewsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_reviewsUpdateManyWithWhereWithoutProductsInput | product_reviewsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_reviewsScalarWhereInput | product_reviewsScalarWhereInput[]
  }

  export type categoriesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    upsert?: categoriesUpsertWithoutProductsInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutProductsInput, categoriesUpdateWithoutProductsInput>, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type shop_by_needUpdateManyWithoutProductsNestedInput = {
    create?: XOR<shop_by_needCreateWithoutProductsInput, shop_by_needUncheckedCreateWithoutProductsInput> | shop_by_needCreateWithoutProductsInput[] | shop_by_needUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: shop_by_needCreateOrConnectWithoutProductsInput | shop_by_needCreateOrConnectWithoutProductsInput[]
    upsert?: shop_by_needUpsertWithWhereUniqueWithoutProductsInput | shop_by_needUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: shop_by_needCreateManyProductsInputEnvelope
    set?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    disconnect?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    delete?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    connect?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    update?: shop_by_needUpdateWithWhereUniqueWithoutProductsInput | shop_by_needUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: shop_by_needUpdateManyWithWhereWithoutProductsInput | shop_by_needUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: shop_by_needScalarWhereInput | shop_by_needScalarWhereInput[]
  }

  export type trendingUpdateOneWithoutProductsNestedInput = {
    create?: XOR<trendingCreateWithoutProductsInput, trendingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: trendingCreateOrConnectWithoutProductsInput
    upsert?: trendingUpsertWithoutProductsInput
    disconnect?: trendingWhereInput | boolean
    delete?: trendingWhereInput | boolean
    connect?: trendingWhereUniqueInput
    update?: XOR<XOR<trendingUpdateToOneWithWhereWithoutProductsInput, trendingUpdateWithoutProductsInput>, trendingUncheckedUpdateWithoutProductsInput>
  }

  export type bestsellingUncheckedUpdateOneWithoutProductsNestedInput = {
    create?: XOR<bestsellingCreateWithoutProductsInput, bestsellingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: bestsellingCreateOrConnectWithoutProductsInput
    upsert?: bestsellingUpsertWithoutProductsInput
    disconnect?: bestsellingWhereInput | boolean
    delete?: bestsellingWhereInput | boolean
    connect?: bestsellingWhereUniqueInput
    update?: XOR<XOR<bestsellingUpdateToOneWithWhereWithoutProductsInput, bestsellingUpdateWithoutProductsInput>, bestsellingUncheckedUpdateWithoutProductsInput>
  }

  export type new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput = {
    create?: XOR<new_arrivalsCreateWithoutProductsInput, new_arrivalsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: new_arrivalsCreateOrConnectWithoutProductsInput
    upsert?: new_arrivalsUpsertWithoutProductsInput
    disconnect?: new_arrivalsWhereInput | boolean
    delete?: new_arrivalsWhereInput | boolean
    connect?: new_arrivalsWhereUniqueInput
    update?: XOR<XOR<new_arrivalsUpdateToOneWithWhereWithoutProductsInput, new_arrivalsUpdateWithoutProductsInput>, new_arrivalsUncheckedUpdateWithoutProductsInput>
  }

  export type on_saleUncheckedUpdateOneWithoutProductsNestedInput = {
    create?: XOR<on_saleCreateWithoutProductsInput, on_saleUncheckedCreateWithoutProductsInput>
    connectOrCreate?: on_saleCreateOrConnectWithoutProductsInput
    upsert?: on_saleUpsertWithoutProductsInput
    disconnect?: on_saleWhereInput | boolean
    delete?: on_saleWhereInput | boolean
    connect?: on_saleWhereUniqueInput
    update?: XOR<XOR<on_saleUpdateToOneWithWhereWithoutProductsInput, on_saleUpdateWithoutProductsInput>, on_saleUncheckedUpdateWithoutProductsInput>
  }

  export type order_itemsUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<order_itemsCreateWithoutProductsInput, order_itemsUncheckedCreateWithoutProductsInput> | order_itemsCreateWithoutProductsInput[] | order_itemsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutProductsInput | order_itemsCreateOrConnectWithoutProductsInput[]
    upsert?: order_itemsUpsertWithWhereUniqueWithoutProductsInput | order_itemsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: order_itemsCreateManyProductsInputEnvelope
    set?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    disconnect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    delete?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    update?: order_itemsUpdateWithWhereUniqueWithoutProductsInput | order_itemsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: order_itemsUpdateManyWithWhereWithoutProductsInput | order_itemsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
  }

  export type product_reviewsUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_reviewsCreateWithoutProductsInput, product_reviewsUncheckedCreateWithoutProductsInput> | product_reviewsCreateWithoutProductsInput[] | product_reviewsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_reviewsCreateOrConnectWithoutProductsInput | product_reviewsCreateOrConnectWithoutProductsInput[]
    upsert?: product_reviewsUpsertWithWhereUniqueWithoutProductsInput | product_reviewsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_reviewsCreateManyProductsInputEnvelope
    set?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    disconnect?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    delete?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    connect?: product_reviewsWhereUniqueInput | product_reviewsWhereUniqueInput[]
    update?: product_reviewsUpdateWithWhereUniqueWithoutProductsInput | product_reviewsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_reviewsUpdateManyWithWhereWithoutProductsInput | product_reviewsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_reviewsScalarWhereInput | product_reviewsScalarWhereInput[]
  }

  export type shop_by_needUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<shop_by_needCreateWithoutProductsInput, shop_by_needUncheckedCreateWithoutProductsInput> | shop_by_needCreateWithoutProductsInput[] | shop_by_needUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: shop_by_needCreateOrConnectWithoutProductsInput | shop_by_needCreateOrConnectWithoutProductsInput[]
    upsert?: shop_by_needUpsertWithWhereUniqueWithoutProductsInput | shop_by_needUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: shop_by_needCreateManyProductsInputEnvelope
    set?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    disconnect?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    delete?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    connect?: shop_by_needWhereUniqueInput | shop_by_needWhereUniqueInput[]
    update?: shop_by_needUpdateWithWhereUniqueWithoutProductsInput | shop_by_needUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: shop_by_needUpdateManyWithWhereWithoutProductsInput | shop_by_needUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: shop_by_needScalarWhereInput | shop_by_needScalarWhereInput[]
  }

  export type trendingUncheckedUpdateOneWithoutProductsNestedInput = {
    create?: XOR<trendingCreateWithoutProductsInput, trendingUncheckedCreateWithoutProductsInput>
    connectOrCreate?: trendingCreateOrConnectWithoutProductsInput
    upsert?: trendingUpsertWithoutProductsInput
    disconnect?: trendingWhereInput | boolean
    delete?: trendingWhereInput | boolean
    connect?: trendingWhereUniqueInput
    update?: XOR<XOR<trendingUpdateToOneWithWhereWithoutProductsInput, trendingUpdateWithoutProductsInput>, trendingUncheckedUpdateWithoutProductsInput>
  }

  export type ordersCreateNestedManyWithoutReceiptsInput = {
    create?: XOR<ordersCreateWithoutReceiptsInput, ordersUncheckedCreateWithoutReceiptsInput> | ordersCreateWithoutReceiptsInput[] | ordersUncheckedCreateWithoutReceiptsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutReceiptsInput | ordersCreateOrConnectWithoutReceiptsInput[]
    createMany?: ordersCreateManyReceiptsInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutReceiptsInput = {
    create?: XOR<ordersCreateWithoutReceiptsInput, ordersUncheckedCreateWithoutReceiptsInput> | ordersCreateWithoutReceiptsInput[] | ordersUncheckedCreateWithoutReceiptsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutReceiptsInput | ordersCreateOrConnectWithoutReceiptsInput[]
    createMany?: ordersCreateManyReceiptsInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersUpdateManyWithoutReceiptsNestedInput = {
    create?: XOR<ordersCreateWithoutReceiptsInput, ordersUncheckedCreateWithoutReceiptsInput> | ordersCreateWithoutReceiptsInput[] | ordersUncheckedCreateWithoutReceiptsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutReceiptsInput | ordersCreateOrConnectWithoutReceiptsInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutReceiptsInput | ordersUpsertWithWhereUniqueWithoutReceiptsInput[]
    createMany?: ordersCreateManyReceiptsInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutReceiptsInput | ordersUpdateWithWhereUniqueWithoutReceiptsInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutReceiptsInput | ordersUpdateManyWithWhereWithoutReceiptsInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutReceiptsNestedInput = {
    create?: XOR<ordersCreateWithoutReceiptsInput, ordersUncheckedCreateWithoutReceiptsInput> | ordersCreateWithoutReceiptsInput[] | ordersUncheckedCreateWithoutReceiptsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutReceiptsInput | ordersCreateOrConnectWithoutReceiptsInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutReceiptsInput | ordersUpsertWithWhereUniqueWithoutReceiptsInput[]
    createMany?: ordersCreateManyReceiptsInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutReceiptsInput | ordersUpdateWithWhereUniqueWithoutReceiptsInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutReceiptsInput | ordersUpdateManyWithWhereWithoutReceiptsInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutShop_by_needInput = {
    create?: XOR<productsCreateWithoutShop_by_needInput, productsUncheckedCreateWithoutShop_by_needInput>
    connectOrCreate?: productsCreateOrConnectWithoutShop_by_needInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutShop_by_needNestedInput = {
    create?: XOR<productsCreateWithoutShop_by_needInput, productsUncheckedCreateWithoutShop_by_needInput>
    connectOrCreate?: productsCreateOrConnectWithoutShop_by_needInput
    upsert?: productsUpsertWithoutShop_by_needInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutShop_by_needInput, productsUpdateWithoutShop_by_needInput>, productsUncheckedUpdateWithoutShop_by_needInput>
  }

  export type productsCreateNestedOneWithoutTrendingInput = {
    create?: XOR<productsCreateWithoutTrendingInput, productsUncheckedCreateWithoutTrendingInput>
    connectOrCreate?: productsCreateOrConnectWithoutTrendingInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutTrendingNestedInput = {
    create?: XOR<productsCreateWithoutTrendingInput, productsUncheckedCreateWithoutTrendingInput>
    connectOrCreate?: productsCreateOrConnectWithoutTrendingInput
    upsert?: productsUpsertWithoutTrendingInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutTrendingInput, productsUpdateWithoutTrendingInput>, productsUncheckedUpdateWithoutTrendingInput>
  }

  export type usersCreateNestedOneWithoutUser_detailsInput = {
    create?: XOR<usersCreateWithoutUser_detailsInput, usersUncheckedCreateWithoutUser_detailsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_detailsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutUser_detailsNestedInput = {
    create?: XOR<usersCreateWithoutUser_detailsInput, usersUncheckedCreateWithoutUser_detailsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_detailsInput
    upsert?: usersUpsertWithoutUser_detailsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUser_detailsInput, usersUpdateWithoutUser_detailsInput>, usersUncheckedUpdateWithoutUser_detailsInput>
  }

  export type user_detailsCreateNestedOneWithoutUsersInput = {
    create?: XOR<user_detailsCreateWithoutUsersInput, user_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: user_detailsCreateOrConnectWithoutUsersInput
    connect?: user_detailsWhereUniqueInput
  }

  export type user_detailsUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<user_detailsCreateWithoutUsersInput, user_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: user_detailsCreateOrConnectWithoutUsersInput
    connect?: user_detailsWhereUniqueInput
  }

  export type EnumuserroleFieldUpdateOperationsInput = {
    set?: $Enums.userrole
  }

  export type user_detailsUpdateOneWithoutUsersNestedInput = {
    create?: XOR<user_detailsCreateWithoutUsersInput, user_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: user_detailsCreateOrConnectWithoutUsersInput
    upsert?: user_detailsUpsertWithoutUsersInput
    disconnect?: user_detailsWhereInput | boolean
    delete?: user_detailsWhereInput | boolean
    connect?: user_detailsWhereUniqueInput
    update?: XOR<XOR<user_detailsUpdateToOneWithWhereWithoutUsersInput, user_detailsUpdateWithoutUsersInput>, user_detailsUncheckedUpdateWithoutUsersInput>
  }

  export type user_detailsUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<user_detailsCreateWithoutUsersInput, user_detailsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: user_detailsCreateOrConnectWithoutUsersInput
    upsert?: user_detailsUpsertWithoutUsersInput
    disconnect?: user_detailsWhereInput | boolean
    delete?: user_detailsWhereInput | boolean
    connect?: user_detailsWhereUniqueInput
    update?: XOR<XOR<user_detailsUpdateToOneWithWhereWithoutUsersInput, user_detailsUpdateWithoutUsersInput>, user_detailsUncheckedUpdateWithoutUsersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumproductstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.productstatus | EnumproductstatusFieldRefInput<$PrismaModel>
    in?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumproductstatusFilter<$PrismaModel> | $Enums.productstatus
  }

  export type NestedEnumproductstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.productstatus | EnumproductstatusFieldRefInput<$PrismaModel>
    in?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.productstatus[] | ListEnumproductstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumproductstatusWithAggregatesFilter<$PrismaModel> | $Enums.productstatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumproductstatusFilter<$PrismaModel>
    _max?: NestedEnumproductstatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumuserroleFilter<$PrismaModel = never> = {
    equals?: $Enums.userrole | EnumuserroleFieldRefInput<$PrismaModel>
    in?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserroleFilter<$PrismaModel> | $Enums.userrole
  }

  export type NestedEnumuserroleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userrole | EnumuserroleFieldRefInput<$PrismaModel>
    in?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userrole[] | ListEnumuserroleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserroleWithAggregatesFilter<$PrismaModel> | $Enums.userrole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserroleFilter<$PrismaModel>
    _max?: NestedEnumuserroleFilter<$PrismaModel>
  }

  export type productsCreateWithoutBestsellingInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutBestsellingInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutBestsellingInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutBestsellingInput, productsUncheckedCreateWithoutBestsellingInput>
  }

  export type productsUpsertWithoutBestsellingInput = {
    update: XOR<productsUpdateWithoutBestsellingInput, productsUncheckedUpdateWithoutBestsellingInput>
    create: XOR<productsCreateWithoutBestsellingInput, productsUncheckedCreateWithoutBestsellingInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutBestsellingInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutBestsellingInput, productsUncheckedUpdateWithoutBestsellingInput>
  }

  export type productsUpdateWithoutBestsellingInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutBestsellingInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type productsCreateWithoutCategoriesInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutCategoriesInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutCategoriesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput>
  }

  export type productsCreateManyCategoriesInputEnvelope = {
    data: productsCreateManyCategoriesInput | productsCreateManyCategoriesInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutCategoriesInput, productsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<productsCreateWithoutCategoriesInput, productsUncheckedCreateWithoutCategoriesInput>
  }

  export type productsUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutCategoriesInput, productsUncheckedUpdateWithoutCategoriesInput>
  }

  export type productsUpdateManyWithWhereWithoutCategoriesInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: IntFilter<"products"> | number
    product_id?: StringFilter<"products"> | string
    main_image_url?: StringFilter<"products"> | string
    side_images_url?: JsonNullableFilter<"products">
    name?: StringFilter<"products"> | string
    price?: IntFilter<"products"> | number
    category_id?: IntFilter<"products"> | number
    description?: StringNullableFilter<"products"> | string | null
    customization_options?: JsonNullableFilter<"products">
    status?: EnumproductstatusFilter<"products"> | $Enums.productstatus
    average_rating?: FloatNullableFilter<"products"> | number | null
    created_at?: DateTimeNullableFilter<"products"> | Date | string | null
    bulk_prices?: JsonNullableFilter<"products">
    dimensions?: JsonNullableFilter<"products">
    weight?: IntNullableFilter<"products"> | number | null
    material?: StringNullableFilter<"products"> | string | null
    standard_delivery_time?: StringNullableFilter<"products"> | string | null
    express_delivery_time?: StringNullableFilter<"products"> | string | null
  }

  export type productsCreateWithoutNew_arrivalsInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutNew_arrivalsInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutNew_arrivalsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutNew_arrivalsInput, productsUncheckedCreateWithoutNew_arrivalsInput>
  }

  export type productsUpsertWithoutNew_arrivalsInput = {
    update: XOR<productsUpdateWithoutNew_arrivalsInput, productsUncheckedUpdateWithoutNew_arrivalsInput>
    create: XOR<productsCreateWithoutNew_arrivalsInput, productsUncheckedCreateWithoutNew_arrivalsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutNew_arrivalsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutNew_arrivalsInput, productsUncheckedUpdateWithoutNew_arrivalsInput>
  }

  export type productsUpdateWithoutNew_arrivalsInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutNew_arrivalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type productsCreateWithoutOn_saleInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutOn_saleInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutOn_saleInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOn_saleInput, productsUncheckedCreateWithoutOn_saleInput>
  }

  export type productsUpsertWithoutOn_saleInput = {
    update: XOR<productsUpdateWithoutOn_saleInput, productsUncheckedUpdateWithoutOn_saleInput>
    create: XOR<productsCreateWithoutOn_saleInput, productsUncheckedCreateWithoutOn_saleInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutOn_saleInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutOn_saleInput, productsUncheckedUpdateWithoutOn_saleInput>
  }

  export type productsUpdateWithoutOn_saleInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutOn_saleInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type ordersCreateWithoutOrder_itemsInput = {
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    receipts?: receiptsCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    receipt_id?: number | null
  }

  export type ordersCreateOrConnectWithoutOrder_itemsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
  }

  export type productsCreateWithoutOrder_itemsInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutOrder_itemsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ordersUpsertWithoutOrder_itemsInput = {
    update: XOR<ordersUpdateWithoutOrder_itemsInput, ordersUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutOrder_itemsInput, ordersUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ordersUpdateWithoutOrder_itemsInput = {
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receipts?: receiptsUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    receipt_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type productsUpsertWithoutOrder_itemsInput = {
    update: XOR<productsUpdateWithoutOrder_itemsInput, productsUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<productsCreateWithoutOrder_itemsInput, productsUncheckedCreateWithoutOrder_itemsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutOrder_itemsInput, productsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type productsUpdateWithoutOrder_itemsInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type order_itemsCreateWithoutOrdersInput = {
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
    products: productsCreateNestedOneWithoutOrder_itemsInput
  }

  export type order_itemsUncheckedCreateWithoutOrdersInput = {
    id?: number
    product_id: string
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
  }

  export type order_itemsCreateOrConnectWithoutOrdersInput = {
    where: order_itemsWhereUniqueInput
    create: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemsCreateManyOrdersInputEnvelope = {
    data: order_itemsCreateManyOrdersInput | order_itemsCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type receiptsCreateWithoutOrdersInput = {
    payment_reference?: string | null
    amount_paid?: number | null
    created_at?: Date | string | null
  }

  export type receiptsUncheckedCreateWithoutOrdersInput = {
    id?: number
    payment_reference?: string | null
    amount_paid?: number | null
    created_at?: Date | string | null
  }

  export type receiptsCreateOrConnectWithoutOrdersInput = {
    where: receiptsWhereUniqueInput
    create: XOR<receiptsCreateWithoutOrdersInput, receiptsUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: order_itemsWhereUniqueInput
    update: XOR<order_itemsUpdateWithoutOrdersInput, order_itemsUncheckedUpdateWithoutOrdersInput>
    create: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: order_itemsWhereUniqueInput
    data: XOR<order_itemsUpdateWithoutOrdersInput, order_itemsUncheckedUpdateWithoutOrdersInput>
  }

  export type order_itemsUpdateManyWithWhereWithoutOrdersInput = {
    where: order_itemsScalarWhereInput
    data: XOR<order_itemsUpdateManyMutationInput, order_itemsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type order_itemsScalarWhereInput = {
    AND?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
    OR?: order_itemsScalarWhereInput[]
    NOT?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
    id?: IntFilter<"order_items"> | number
    order_id?: IntNullableFilter<"order_items"> | number | null
    product_id?: StringFilter<"order_items"> | string
    quantity?: IntFilter<"order_items"> | number
    selected_customizations?: JsonNullableFilter<"order_items">
    user_customization_type?: StringNullableFilter<"order_items"> | string | null
    user_customization_value?: StringNullableFilter<"order_items"> | string | null
    individual_price?: IntFilter<"order_items"> | number
  }

  export type receiptsUpsertWithoutOrdersInput = {
    update: XOR<receiptsUpdateWithoutOrdersInput, receiptsUncheckedUpdateWithoutOrdersInput>
    create: XOR<receiptsCreateWithoutOrdersInput, receiptsUncheckedCreateWithoutOrdersInput>
    where?: receiptsWhereInput
  }

  export type receiptsUpdateToOneWithWhereWithoutOrdersInput = {
    where?: receiptsWhereInput
    data: XOR<receiptsUpdateWithoutOrdersInput, receiptsUncheckedUpdateWithoutOrdersInput>
  }

  export type receiptsUpdateWithoutOrdersInput = {
    payment_reference?: NullableStringFieldUpdateOperationsInput | string | null
    amount_paid?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type receiptsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    payment_reference?: NullableStringFieldUpdateOperationsInput | string | null
    amount_paid?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productsCreateWithoutProduct_reviewsInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_reviewsInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_reviewsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_reviewsInput, productsUncheckedCreateWithoutProduct_reviewsInput>
  }

  export type productsUpsertWithoutProduct_reviewsInput = {
    update: XOR<productsUpdateWithoutProduct_reviewsInput, productsUncheckedUpdateWithoutProduct_reviewsInput>
    create: XOR<productsCreateWithoutProduct_reviewsInput, productsUncheckedCreateWithoutProduct_reviewsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutProduct_reviewsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutProduct_reviewsInput, productsUncheckedUpdateWithoutProduct_reviewsInput>
  }

  export type productsUpdateWithoutProduct_reviewsInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type bestsellingCreateWithoutProductsInput = {
    created_at?: Date | string | null
  }

  export type bestsellingUncheckedCreateWithoutProductsInput = {
    id?: number
    created_at?: Date | string | null
  }

  export type bestsellingCreateOrConnectWithoutProductsInput = {
    where: bestsellingWhereUniqueInput
    create: XOR<bestsellingCreateWithoutProductsInput, bestsellingUncheckedCreateWithoutProductsInput>
  }

  export type new_arrivalsCreateWithoutProductsInput = {
    created_at?: Date | string | null
  }

  export type new_arrivalsUncheckedCreateWithoutProductsInput = {
    id?: number
    created_at?: Date | string | null
  }

  export type new_arrivalsCreateOrConnectWithoutProductsInput = {
    where: new_arrivalsWhereUniqueInput
    create: XOR<new_arrivalsCreateWithoutProductsInput, new_arrivalsUncheckedCreateWithoutProductsInput>
  }

  export type on_saleCreateWithoutProductsInput = {
    created_at?: Date | string | null
  }

  export type on_saleUncheckedCreateWithoutProductsInput = {
    id?: number
    created_at?: Date | string | null
  }

  export type on_saleCreateOrConnectWithoutProductsInput = {
    where: on_saleWhereUniqueInput
    create: XOR<on_saleCreateWithoutProductsInput, on_saleUncheckedCreateWithoutProductsInput>
  }

  export type order_itemsCreateWithoutProductsInput = {
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
    orders?: ordersCreateNestedOneWithoutOrder_itemsInput
  }

  export type order_itemsUncheckedCreateWithoutProductsInput = {
    id?: number
    order_id?: number | null
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
  }

  export type order_itemsCreateOrConnectWithoutProductsInput = {
    where: order_itemsWhereUniqueInput
    create: XOR<order_itemsCreateWithoutProductsInput, order_itemsUncheckedCreateWithoutProductsInput>
  }

  export type order_itemsCreateManyProductsInputEnvelope = {
    data: order_itemsCreateManyProductsInput | order_itemsCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type product_reviewsCreateWithoutProductsInput = {
    clerkId: string
    user_name: string
    rating: number
    review_text?: string | null
    created_at?: Date | string | null
  }

  export type product_reviewsUncheckedCreateWithoutProductsInput = {
    id?: number
    clerkId: string
    user_name: string
    rating: number
    review_text?: string | null
    created_at?: Date | string | null
  }

  export type product_reviewsCreateOrConnectWithoutProductsInput = {
    where: product_reviewsWhereUniqueInput
    create: XOR<product_reviewsCreateWithoutProductsInput, product_reviewsUncheckedCreateWithoutProductsInput>
  }

  export type product_reviewsCreateManyProductsInputEnvelope = {
    data: product_reviewsCreateManyProductsInput | product_reviewsCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type categoriesCreateWithoutProductsInput = {
    name: string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    image_url?: string | null
  }

  export type categoriesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string | null
    image_url?: string | null
  }

  export type categoriesCreateOrConnectWithoutProductsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
  }

  export type shop_by_needCreateWithoutProductsInput = {
    need: string
    created_at?: Date | string | null
  }

  export type shop_by_needUncheckedCreateWithoutProductsInput = {
    id?: number
    need: string
    created_at?: Date | string | null
  }

  export type shop_by_needCreateOrConnectWithoutProductsInput = {
    where: shop_by_needWhereUniqueInput
    create: XOR<shop_by_needCreateWithoutProductsInput, shop_by_needUncheckedCreateWithoutProductsInput>
  }

  export type shop_by_needCreateManyProductsInputEnvelope = {
    data: shop_by_needCreateManyProductsInput | shop_by_needCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type trendingCreateWithoutProductsInput = {
    created_at?: Date | string | null
  }

  export type trendingUncheckedCreateWithoutProductsInput = {
    id?: number
    created_at?: Date | string | null
  }

  export type trendingCreateOrConnectWithoutProductsInput = {
    where: trendingWhereUniqueInput
    create: XOR<trendingCreateWithoutProductsInput, trendingUncheckedCreateWithoutProductsInput>
  }

  export type bestsellingUpsertWithoutProductsInput = {
    update: XOR<bestsellingUpdateWithoutProductsInput, bestsellingUncheckedUpdateWithoutProductsInput>
    create: XOR<bestsellingCreateWithoutProductsInput, bestsellingUncheckedCreateWithoutProductsInput>
    where?: bestsellingWhereInput
  }

  export type bestsellingUpdateToOneWithWhereWithoutProductsInput = {
    where?: bestsellingWhereInput
    data: XOR<bestsellingUpdateWithoutProductsInput, bestsellingUncheckedUpdateWithoutProductsInput>
  }

  export type bestsellingUpdateWithoutProductsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type bestsellingUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_arrivalsUpsertWithoutProductsInput = {
    update: XOR<new_arrivalsUpdateWithoutProductsInput, new_arrivalsUncheckedUpdateWithoutProductsInput>
    create: XOR<new_arrivalsCreateWithoutProductsInput, new_arrivalsUncheckedCreateWithoutProductsInput>
    where?: new_arrivalsWhereInput
  }

  export type new_arrivalsUpdateToOneWithWhereWithoutProductsInput = {
    where?: new_arrivalsWhereInput
    data: XOR<new_arrivalsUpdateWithoutProductsInput, new_arrivalsUncheckedUpdateWithoutProductsInput>
  }

  export type new_arrivalsUpdateWithoutProductsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type new_arrivalsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type on_saleUpsertWithoutProductsInput = {
    update: XOR<on_saleUpdateWithoutProductsInput, on_saleUncheckedUpdateWithoutProductsInput>
    create: XOR<on_saleCreateWithoutProductsInput, on_saleUncheckedCreateWithoutProductsInput>
    where?: on_saleWhereInput
  }

  export type on_saleUpdateToOneWithWhereWithoutProductsInput = {
    where?: on_saleWhereInput
    data: XOR<on_saleUpdateWithoutProductsInput, on_saleUncheckedUpdateWithoutProductsInput>
  }

  export type on_saleUpdateWithoutProductsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type on_saleUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type order_itemsUpsertWithWhereUniqueWithoutProductsInput = {
    where: order_itemsWhereUniqueInput
    update: XOR<order_itemsUpdateWithoutProductsInput, order_itemsUncheckedUpdateWithoutProductsInput>
    create: XOR<order_itemsCreateWithoutProductsInput, order_itemsUncheckedCreateWithoutProductsInput>
  }

  export type order_itemsUpdateWithWhereUniqueWithoutProductsInput = {
    where: order_itemsWhereUniqueInput
    data: XOR<order_itemsUpdateWithoutProductsInput, order_itemsUncheckedUpdateWithoutProductsInput>
  }

  export type order_itemsUpdateManyWithWhereWithoutProductsInput = {
    where: order_itemsScalarWhereInput
    data: XOR<order_itemsUpdateManyMutationInput, order_itemsUncheckedUpdateManyWithoutProductsInput>
  }

  export type product_reviewsUpsertWithWhereUniqueWithoutProductsInput = {
    where: product_reviewsWhereUniqueInput
    update: XOR<product_reviewsUpdateWithoutProductsInput, product_reviewsUncheckedUpdateWithoutProductsInput>
    create: XOR<product_reviewsCreateWithoutProductsInput, product_reviewsUncheckedCreateWithoutProductsInput>
  }

  export type product_reviewsUpdateWithWhereUniqueWithoutProductsInput = {
    where: product_reviewsWhereUniqueInput
    data: XOR<product_reviewsUpdateWithoutProductsInput, product_reviewsUncheckedUpdateWithoutProductsInput>
  }

  export type product_reviewsUpdateManyWithWhereWithoutProductsInput = {
    where: product_reviewsScalarWhereInput
    data: XOR<product_reviewsUpdateManyMutationInput, product_reviewsUncheckedUpdateManyWithoutProductsInput>
  }

  export type product_reviewsScalarWhereInput = {
    AND?: product_reviewsScalarWhereInput | product_reviewsScalarWhereInput[]
    OR?: product_reviewsScalarWhereInput[]
    NOT?: product_reviewsScalarWhereInput | product_reviewsScalarWhereInput[]
    id?: IntFilter<"product_reviews"> | number
    clerkId?: StringFilter<"product_reviews"> | string
    user_name?: StringFilter<"product_reviews"> | string
    product_id?: StringFilter<"product_reviews"> | string
    rating?: IntFilter<"product_reviews"> | number
    review_text?: StringNullableFilter<"product_reviews"> | string | null
    created_at?: DateTimeNullableFilter<"product_reviews"> | Date | string | null
  }

  export type categoriesUpsertWithoutProductsInput = {
    update: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutProductsInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type categoriesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoriesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    allowed_customizations?: NullableJsonNullValueInput | InputJsonValue
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type shop_by_needUpsertWithWhereUniqueWithoutProductsInput = {
    where: shop_by_needWhereUniqueInput
    update: XOR<shop_by_needUpdateWithoutProductsInput, shop_by_needUncheckedUpdateWithoutProductsInput>
    create: XOR<shop_by_needCreateWithoutProductsInput, shop_by_needUncheckedCreateWithoutProductsInput>
  }

  export type shop_by_needUpdateWithWhereUniqueWithoutProductsInput = {
    where: shop_by_needWhereUniqueInput
    data: XOR<shop_by_needUpdateWithoutProductsInput, shop_by_needUncheckedUpdateWithoutProductsInput>
  }

  export type shop_by_needUpdateManyWithWhereWithoutProductsInput = {
    where: shop_by_needScalarWhereInput
    data: XOR<shop_by_needUpdateManyMutationInput, shop_by_needUncheckedUpdateManyWithoutProductsInput>
  }

  export type shop_by_needScalarWhereInput = {
    AND?: shop_by_needScalarWhereInput | shop_by_needScalarWhereInput[]
    OR?: shop_by_needScalarWhereInput[]
    NOT?: shop_by_needScalarWhereInput | shop_by_needScalarWhereInput[]
    id?: IntFilter<"shop_by_need"> | number
    product_id?: StringFilter<"shop_by_need"> | string
    need?: StringFilter<"shop_by_need"> | string
    created_at?: DateTimeNullableFilter<"shop_by_need"> | Date | string | null
  }

  export type trendingUpsertWithoutProductsInput = {
    update: XOR<trendingUpdateWithoutProductsInput, trendingUncheckedUpdateWithoutProductsInput>
    create: XOR<trendingCreateWithoutProductsInput, trendingUncheckedCreateWithoutProductsInput>
    where?: trendingWhereInput
  }

  export type trendingUpdateToOneWithWhereWithoutProductsInput = {
    where?: trendingWhereInput
    data: XOR<trendingUpdateWithoutProductsInput, trendingUncheckedUpdateWithoutProductsInput>
  }

  export type trendingUpdateWithoutProductsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type trendingUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordersCreateWithoutReceiptsInput = {
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    order_items?: order_itemsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutReceiptsInput = {
    id?: number
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
    order_items?: order_itemsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutReceiptsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutReceiptsInput, ordersUncheckedCreateWithoutReceiptsInput>
  }

  export type ordersCreateManyReceiptsInputEnvelope = {
    data: ordersCreateManyReceiptsInput | ordersCreateManyReceiptsInput[]
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutReceiptsInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutReceiptsInput, ordersUncheckedUpdateWithoutReceiptsInput>
    create: XOR<ordersCreateWithoutReceiptsInput, ordersUncheckedCreateWithoutReceiptsInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutReceiptsInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutReceiptsInput, ordersUncheckedUpdateWithoutReceiptsInput>
  }

  export type ordersUpdateManyWithWhereWithoutReceiptsInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutReceiptsInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    id?: IntFilter<"orders"> | number
    order_id?: StringNullableFilter<"orders"> | string | null
    clerkId?: StringNullableFilter<"orders"> | string | null
    total_price?: IntFilter<"orders"> | number
    status?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeNullableFilter<"orders"> | Date | string | null
    receipt_id?: IntNullableFilter<"orders"> | number | null
  }

  export type productsCreateWithoutShop_by_needInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    trending?: trendingCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutShop_by_needInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    trending?: trendingUncheckedCreateNestedOneWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutShop_by_needInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutShop_by_needInput, productsUncheckedCreateWithoutShop_by_needInput>
  }

  export type productsUpsertWithoutShop_by_needInput = {
    update: XOR<productsUpdateWithoutShop_by_needInput, productsUncheckedUpdateWithoutShop_by_needInput>
    create: XOR<productsCreateWithoutShop_by_needInput, productsUncheckedCreateWithoutShop_by_needInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutShop_by_needInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutShop_by_needInput, productsUncheckedUpdateWithoutShop_by_needInput>
  }

  export type productsUpdateWithoutShop_by_needInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutShop_by_needInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type productsCreateWithoutTrendingInput = {
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsCreateNestedOneWithoutProductsInput
    on_sale?: on_saleCreateNestedOneWithoutProductsInput
    order_items?: order_itemsCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsCreateNestedManyWithoutProductsInput
    categories: categoriesCreateNestedOneWithoutProductsInput
    shop_by_need?: shop_by_needCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutTrendingInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    category_id: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
    bestselling?: bestsellingUncheckedCreateNestedOneWithoutProductsInput
    new_arrivals?: new_arrivalsUncheckedCreateNestedOneWithoutProductsInput
    on_sale?: on_saleUncheckedCreateNestedOneWithoutProductsInput
    order_items?: order_itemsUncheckedCreateNestedManyWithoutProductsInput
    product_reviews?: product_reviewsUncheckedCreateNestedManyWithoutProductsInput
    shop_by_need?: shop_by_needUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutTrendingInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutTrendingInput, productsUncheckedCreateWithoutTrendingInput>
  }

  export type productsUpsertWithoutTrendingInput = {
    update: XOR<productsUpdateWithoutTrendingInput, productsUncheckedUpdateWithoutTrendingInput>
    create: XOR<productsCreateWithoutTrendingInput, productsUncheckedCreateWithoutTrendingInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutTrendingInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutTrendingInput, productsUncheckedUpdateWithoutTrendingInput>
  }

  export type productsUpdateWithoutTrendingInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    categories?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutTrendingInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type usersCreateWithoutUser_detailsInput = {
    clerkId: string
    first_name: string
    last_name: string
    email: string
    phone_number: string
    role: $Enums.userrole
  }

  export type usersUncheckedCreateWithoutUser_detailsInput = {
    id?: number
    clerkId: string
    first_name: string
    last_name: string
    email: string
    phone_number: string
    role: $Enums.userrole
  }

  export type usersCreateOrConnectWithoutUser_detailsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_detailsInput, usersUncheckedCreateWithoutUser_detailsInput>
  }

  export type usersUpsertWithoutUser_detailsInput = {
    update: XOR<usersUpdateWithoutUser_detailsInput, usersUncheckedUpdateWithoutUser_detailsInput>
    create: XOR<usersCreateWithoutUser_detailsInput, usersUncheckedCreateWithoutUser_detailsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUser_detailsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUser_detailsInput, usersUncheckedUpdateWithoutUser_detailsInput>
  }

  export type usersUpdateWithoutUser_detailsInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    role?: EnumuserroleFieldUpdateOperationsInput | $Enums.userrole
  }

  export type usersUncheckedUpdateWithoutUser_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    role?: EnumuserroleFieldUpdateOperationsInput | $Enums.userrole
  }

  export type user_detailsCreateWithoutUsersInput = {
    address?: string | null
    city?: string | null
    state?: string | null
    country?: string | null
    pin_code?: string | null
  }

  export type user_detailsUncheckedCreateWithoutUsersInput = {
    id?: number
    address?: string | null
    city?: string | null
    state?: string | null
    country?: string | null
    pin_code?: string | null
  }

  export type user_detailsCreateOrConnectWithoutUsersInput = {
    where: user_detailsWhereUniqueInput
    create: XOR<user_detailsCreateWithoutUsersInput, user_detailsUncheckedCreateWithoutUsersInput>
  }

  export type user_detailsUpsertWithoutUsersInput = {
    update: XOR<user_detailsUpdateWithoutUsersInput, user_detailsUncheckedUpdateWithoutUsersInput>
    create: XOR<user_detailsCreateWithoutUsersInput, user_detailsUncheckedCreateWithoutUsersInput>
    where?: user_detailsWhereInput
  }

  export type user_detailsUpdateToOneWithWhereWithoutUsersInput = {
    where?: user_detailsWhereInput
    data: XOR<user_detailsUpdateWithoutUsersInput, user_detailsUncheckedUpdateWithoutUsersInput>
  }

  export type user_detailsUpdateWithoutUsersInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    pin_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_detailsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    pin_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productsCreateManyCategoriesInput = {
    id?: number
    product_id: string
    main_image_url: string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name: string
    price: number
    description?: string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.productstatus
    average_rating?: number | null
    created_at?: Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: number | null
    material?: string | null
    standard_delivery_time?: string | null
    express_delivery_time?: string | null
  }

  export type productsUpdateWithoutCategoriesInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUpdateManyWithoutProductsNestedInput
    trending?: trendingUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    bestselling?: bestsellingUncheckedUpdateOneWithoutProductsNestedInput
    new_arrivals?: new_arrivalsUncheckedUpdateOneWithoutProductsNestedInput
    on_sale?: on_saleUncheckedUpdateOneWithoutProductsNestedInput
    order_items?: order_itemsUncheckedUpdateManyWithoutProductsNestedInput
    product_reviews?: product_reviewsUncheckedUpdateManyWithoutProductsNestedInput
    shop_by_need?: shop_by_needUncheckedUpdateManyWithoutProductsNestedInput
    trending?: trendingUncheckedUpdateOneWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    main_image_url?: StringFieldUpdateOperationsInput | string
    side_images_url?: NullableJsonNullValueInput | InputJsonValue
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customization_options?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumproductstatusFieldUpdateOperationsInput | $Enums.productstatus
    average_rating?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bulk_prices?: NullableJsonNullValueInput | InputJsonValue
    dimensions?: NullableJsonNullValueInput | InputJsonValue
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    material?: NullableStringFieldUpdateOperationsInput | string | null
    standard_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
    express_delivery_time?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type order_itemsCreateManyOrdersInput = {
    id?: number
    product_id: string
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
  }

  export type order_itemsUpdateWithoutOrdersInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
    products?: productsUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type order_itemsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsCreateManyProductsInput = {
    id?: number
    order_id?: number | null
    quantity: number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: string | null
    user_customization_value?: string | null
    individual_price: number
  }

  export type product_reviewsCreateManyProductsInput = {
    id?: number
    clerkId: string
    user_name: string
    rating: number
    review_text?: string | null
    created_at?: Date | string | null
  }

  export type shop_by_needCreateManyProductsInput = {
    id?: number
    need: string
    created_at?: Date | string | null
  }

  export type order_itemsUpdateWithoutProductsInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
    orders?: ordersUpdateOneWithoutOrder_itemsNestedInput
  }

  export type order_itemsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    selected_customizations?: NullableJsonNullValueInput | InputJsonValue
    user_customization_type?: NullableStringFieldUpdateOperationsInput | string | null
    user_customization_value?: NullableStringFieldUpdateOperationsInput | string | null
    individual_price?: IntFieldUpdateOperationsInput | number
  }

  export type product_reviewsUpdateWithoutProductsInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_reviewsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_reviewsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    clerkId?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    review_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shop_by_needUpdateWithoutProductsInput = {
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shop_by_needUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shop_by_needUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    need?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordersCreateManyReceiptsInput = {
    id?: number
    order_id?: string | null
    clerkId?: string | null
    total_price: number
    status?: string | null
    created_at?: Date | string | null
  }

  export type ordersUpdateWithoutReceiptsInput = {
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_items?: order_itemsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutReceiptsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_items?: order_itemsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutReceiptsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}